[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "# CanoE-COACH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "CanoE-COACH is a **desktop app for managing training schedules for secondary school canoe teams, optimized for use"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " via a Command Line Interface** (CLI) while still having the benefits of a Graphical Interface (GUI). If you can type fast, CanoE-COACH can get your training scheduling done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "CanoE-COACH aims to help secondary school canoe coaches with managing student contacts and scheduling training sessions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Some of the features include:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Adding student records to the student contact list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Finding specific students to access their records"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Filtering students by their dismissal times to find a suitable timing to schedule a training session"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Ability to tag students to include any extra information such as their level of competency and so on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "For more in-depth information on the CanoE-COACH visit [our website](https://ay2021s1-cs2103-f10-1.github.io/tp/)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your CanoE-COACH."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/johnd@example.com ay/2` : Adds a student named"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    `John Doe` to the student list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd student shown in the current student list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "   * **`filter`**`n/alex n/david` : Returns `Alex Yeoh`, `David Li`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`clear`** : Deletes all students."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. Refer to the [User Guide](https://ay2021s1-cs2103-f10-1.github.io/tp/UserGuide.html) for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org/)."
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 8,
      "Whleee": 23,
      "yejiadong": 10,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "mainClassName \u003d \u0027seedu.canoe.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    archiveName \u003d \u0027CanoE-COACH.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 3,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "You can reach us at the email `e0406790@comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "### Faqih"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "\u003cimg src\u003d\"images/abdurrahmanfaqihiskandar.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "[[github](https://github.com/abdurrahmanfaqihiskandar)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "### Ye Jia Dong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "\u003cimg src\u003d\"images/yejiadong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "[[github](https://github.com/yejiadong)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Responsibilities: Testing, Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "### Lee Wei Heng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003cimg src\u003d\"images/whleee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "[[github](https://github.com/Whleee)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Responsibilities: Testing, Documentation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "### Kerk Pei Yong"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "\u003cimg src\u003d\"images/kerkpy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "[[github](https://github.com/kerkpy)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Responsibilities: Testing, Documentation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "### Andy Wu"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "\u003cimg src\u003d\"images/sudogene.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "[[github](https://github.com/sudogene)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "* Responsibilities: Testing, Documentation"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "Whleee": 21,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-F10-1/tp/tree/master/docs/diagrams) folder. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/logic/Logic.java)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "1. `Logic` uses the `CanoeCoachParser` class to parse the user command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/model/Model.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* stores the CanoeCoach data."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ") model is given below. It has a `Tag` list in the `CanoeCoach`, which `Student` references. This allows `CanoeCoach` to"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " only require one `Tag` object per unique `Tag`, instead of each `Student` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-F10-1/tp/blob/master/src/main/java/seedu/canoe/storage/Storage.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* can save the CanoeCoach data in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Classes used by multiple components are in the `seedu.canoe.commons` package."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedCanoeCoach`. It extends `CanoeCoach` with an undo/redo history, stored internally as an `canoeCoachStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* `VersionedCanoeCoach#commit()` — Saves the current CanoeCoach state in its history."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* `VersionedCanoeCoach#undo()` — Restores the previous CanoeCoach state from its history."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* `VersionedCanoeCoach#redo()` — Restores a previously undone CanoeCoach state from its history."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCanoeCoach()`, `Model#undoCanoeCoach()` and `Model#redoCanoeCoach()` respectively."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedCanoeCoach` will be initialized with the initial CanoeCoach state, and the `currentStatePointer` pointing to that single CanoeCoach state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th student in the CanoeCoach. The `delete` command calls `Model#commitCanoeCoach()`, causing the modified state of the CanoeCoach after the `delete 5` command executes to be saved in the `canoeCoachStateList`, and the `currentStatePointer` is shifted to the newly inserted CanoeCoach state."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new student. The `add` command also calls `Model#commitCanoeCoach()`, causing another modified CanoeCoach state to be saved into the `canoeCoachStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitCanoeCoach()`, so the CanoeCoach state will not be saved into the `canoeCoachStateList`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 4. The user now decides that adding the student was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCanoeCoach()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous CanoeCoach state, and restores the CanoeCoach to that state."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial CanoeCoach state, then there are no previous CanoeCoach states to restore. The `undo` command uses `Model#canUndoCanoeCoach()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoCanoeCoach()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the CanoeCoach to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `canoeCoachStateList.size() - 1`, pointing to the latest CanoeCoach state, then there are no undone CanoeCoach states to restore. The `redo` command uses `Model#canRedoCanoeCoach()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the CanoeCoach, such as `list`, will usually not call `Model#commitCanoeCoach()`, `Model#undoCanoeCoach()` or `Model#redoCanoeCoach()`. Thus, the `canoeCoachStateList` remains unchanged."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCanoeCoach()`. Since the `currentStatePointer` is not pointing at the end of the `canoeCoachStateList`, all CanoeCoach states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire CanoeCoach."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the student being deleted)."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Canoeing Coach for Secondary School Students"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Has a need to manage a significant number of students"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Value proposition**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Manage students and canoeing training schedules faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Manage large student numbers efficiently"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t* Automatically sound warnings if certain students do not attend consecutive trainings"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Fast scheduling of canoeing trainings compared to manual modes"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Data Visualisation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | create new student record entries          | store data of students in a structured way    |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | see the contact information of the students        | contact them easily when necessary.    |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | see the academic year that the students belong to      | use it as a metric to group the students for training.    |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | see the dismissal times of the students       |  find a common available time to have classes.           |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* *  `  | user     | be able to tag students        |  highlight students who may need more attention.           |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | delete students that have quit              | keep track of only current active students                |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | easily modify the details of my students          | see the most accurate updated information    |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | find students by their name          | easily retrieve the details of any student without having to go through the entire list |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* *`    | user     | find students by their Academic Year          | easily retrieve all students from a particular academic level |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* *`    | user     | find students by their Phone Numbers          | easily retrieve the details of a particular student by their contact details |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | find students by their dismissal time        | easily find students whose dismissal times are before a given dismissal time  |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* *`    | user     | find students by their Id             | easily retrieve the details of a particular student without having to go through the entire list  |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* *`    | user     | determine the earliest time to conduct training given a subgroup of students | schedule training at the earliest possible time for these students |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | create new Training sessions | schedule training at a given date and time |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | delete a Training session that was already created | make changes to the schedule |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | add students to a training session | view who are the students to expect for a training |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * *`  | user     | delete students from a training session | remove students who are unable to come for training |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "| `* * `   | user     | view the trainings that a student will be attending | determine the number of sessions he has attended |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "(For all use cases below, the **System** is the `CanoE-COACH` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**UC01: Add a student**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. User requests to add a student to the student list"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2. CanoE-COACH adds the student"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "*   1a. Name, phone number, email, or academic year is missing."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    *  1a1. CanoE-COACH displays an error message."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "*   1b. Student with the same name already exists."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    *   1b1. CanoE-COACH displays an error message."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "*   1c. Details have invalid format."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    *   1c1. CanoE-COACH displays an error message."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**UC02: Delete a student**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  CanoE-COACH shows a list of students"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "3.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "4.  CanoE-COACH deletes the student"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "5.  CanoE-COACH removes the student from all the trainings he is scheduled in."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    * 3a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC03: Edit a Student\u0027s particulars**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  CanoE-COACH shows a list of students"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "3.  User requests to edit a specific student in the list"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "4.  CanoE-COACH edits the student\u0027s details"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    * 3a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 4a. The student\u0027s new dismissal time is later than a training that he has been scheduled for."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    * 4a1. Student is removed from the Training."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "       "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC04: Find students**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1.  User requests to find students"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  CanoE-COACH shows a list of students who match the criteria"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* 1a. There are no parameters specified in the find command."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  * 1a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**UC05: Clear all Students**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1.  User requests to clear all students"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  CanoE-COACH deletes all existing students in the student list"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC06: Find Common Time to conduct training for students**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "1.  User requests to find common time to conduct training for a specified sub-group of students"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2.  CanoE-COACH shows a list of students that have been specified by user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2.  CanoE-COACH shows shows the latest dismissal times for the list of students."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 1a. There are no parameters specified in the commonTime command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "  * 1a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC07: Add a Training**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "1. User requests to add a Training to the training list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2. CanoE-COACH adds the training."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "*   1a. Date or time is missing."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    *  1a1. CanoE-COACH displays an error message."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "*   1b. Training with the same date and time already exists."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    *   1b1. CanoE-COACH displays an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC08: Delete a training**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "1.  User requests to delete a specific training in the list"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2.  CanoE-COACH deletes the training"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "3.  CanoE-COACH removes the training from all the students that are attending the training."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    * 2a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC09: Add students to the training**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "1.  User requests to add students to training."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2.  CanoE-COACH adds the specified students to the training. "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 2a. The student\u0027s dismissal time is later than the time the training is scheduled for."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "  * 2a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 2b. The student or training does not exist."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    * 2b1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**UC10: Delete student from training**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "1.  User requests to delete student from training."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "2.  CanoE-COACH deletes the specified student from the training."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "3.  CanoE-COACH deletes the training from the student\u0027s list of trainings."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 2a. Student was not attending the training"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "  * 2a1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "* 2b. The student or training does not exist."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    * 2b1. CanoE-COACH shows an error message."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "4. CanoE-COACH is optimised for a single-user, rather than multiple users."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "5. Any data must be stored locally in a human editable text-file, rather than in a database."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "6. The system should respond to commands within 1 second."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Deleting a student"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. Deleting a student while all students are being shown"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   1. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      Expected: First student is deleted from the list. Details of the deleted student is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "kerkpy": 123,
      "yejiadong": 108,
      "-": 300
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "   1. Run the `seedu.canoe.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "   e.g. `seedu.canoe.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "   e.g. `seedu.canoe.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "   e.g. `seedu.canoe.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "CanoE-COACH is a **desktop app for managing training schedules for secondary school canoe teams, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical Interface (GUI). If you can type fast, CanoE-COACH can get your training scheduling done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1. Download the latest `CanoE-COACH.jar` from [here](https://github.com/AY2021S1-CS2103-F10-1/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your CanoE-COACH."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`list`** : Lists all students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`add`**`n/Steven Soo p/98665432 e/stev@example.com ay/2` : Adds a student named"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    `Steven Soo` to the student list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd student shown in the student list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "   * **`clear`** : Deletes all students."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/treasurer` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/treasurer`, `t/treasurer t/EXCO` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Shows a summarised list of available commands."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Adding a student: `add`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Adds a student to the student list. The student will be auto-assigned a unique `id`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL ay/ACADEMIC_YEAR [d1/HHmm d2/HHmm d3/HHmm d4/HHmm d5/HHmm] [t/TAG]`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| Prefix   |      Representation      |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "|:----------:|:-------------:|"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| `d1/` |  **Monday\u0027s** Dismissal Time|"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| `d2/` |    **Tuesday\u0027s** Dismissal Time   |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| `d3/` | **Wednesday\u0027s** Dismissal Time |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| `d4/` | **Thursday\u0027s** Dismissal Time |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "| `d5/` | **Friday\u0027s** Dismissal Time |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Academic year ranges from `1` to `5` and represents Secondary 1 to 5."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "* `d1/ d2/ d3/ d4/ d5/` corresponds to the dismissal times on different days. They are optional fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "* The default dismissal time is 1500. If the user inputs `d1/1700 d5/1200`, then the record will be equivalent to `d1/1700 d2/1500 d3/1500 d4/1500 d5/1200`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Be careful of adding duplicates:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e * Student names can be the same, but they should not share the same contact number **AND** email address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- `add n/Benjamin p/12345678 e/littleicemaiden@rocket.com ay/3 d1/1330 d2/1730 d3/1600 d4/1200 d5/1100`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- `add n/Sarah p/56781234 e/sa.rah@googoo.com ay/1 d1/1700 d3/1430`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Editing a student : `edit`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Edits an existing student in the student list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `edit STUDENT_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [ay/ACADEMIC_YEAR] [d1/HHmm d2/HHmm d3/HHmm d4/HHmm d5/HHmm] [t/TAG]…​`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Edits the student at the specified `STUDENT_INDEX`. The student index refers to the index number shown in the displayed student list. The student index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* You can remove all of the student’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Take note that editing the details of a student will also propagate the changes on the training panel."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Be careful when editing dismissal times, as this might automatically remove students from scheduled trainings if"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " the updated dismissal time on the same day of the week is now later than the time of the student\u0027s scheduled trainings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "*  `edit 1 p/91234567 e/johndoe@example.com d1/1600` Edits the phone number and email address of the 1st student in the displayed student list to be `91234567` and `johndoe@example.com` respectively. This also changes his Monday\u0027s dismissal time to 1600."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "### Delete student: `delete`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Deletes the specified student from the nominal roll."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `delete STUDENT_INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- Deletes the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- The index must be an unsigned integer 1, 2, 3, …"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- This will remove the student from all of his/her scheduled training sessions."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `delete 2` deletes the 2nd student in the displayed student list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "### Find : `find`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Find students based on specified fields."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sudogene"
        },
        "content": "Format: `find [n/KEYWORDS] [p/PHONE_VALUE] [ay/ACADEMIC_YEAR] [e/EMAIL] [d1/HHmm d2/HHmm d3/HHmm d4/HHmm d5/HHmm] [id/ID]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- At least one field needs to be filled"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Students matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Phone Number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Value will match exactly. e.g. `98765432` will not match `987654` but will match `98765432`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Only one phone number can be searched for at any one time"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Students with emails containing the search word will be returned. e.g. `meow` will match `meow@domain.com`, `emailer@meow.com`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Only one email address can be searched for at any one time"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Academic Year"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Value will match exactly. e.g. `2` will match `2` but not `1`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- Dismissal Time (`d1` to `d5`)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    - Students with dismissal times equal OR before the query time will be matched"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      e.g. `d1/1500` will match `1500` and `1200`, but not `1530` on Monday"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sudogene"
        },
        "content": "- Id"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    - Student with the same `id` value will be matched."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    - Due to the nature of id being unique, only one student should be matched."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- Searching by more than one field"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    - Find command will return student(s) that matches exactly with all the fields provided. e.g. `n/Alex p/123` will return `Alex Yeoh` only if his phone number matches `123`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    - Order in which fields are written does not matter. e.g. `find n/alex e/meow.com` is the same as `find e/meow.com n/alex`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- `find n/alex david` returns `Alex Yeoh`, `David Li`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- `find n/alex david p/123` returns `Alex Yeoh`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "- `find e/alexyeoh@example.com p/123` returns `Alex Yeoh`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `find n/Alex d2/1600` returns `Alex Yeoh`, provided his dismissal time on Tuesday falls at or before `1600`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `find e/alexyeoh@example.com p/456` returns an empty list, if such an email **AND** contact number is not present in the student list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "### Common Time : `commonTime`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "Returns the latest dismissal times on all days for all of the students in the specified subgroup. This would be the earliest"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "time to conduct training for all in the sub group."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "Format: `commonTime [n/KEYWORDS] [ay/ACADEMIC_YEAR]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "- At least one field needs to be filled"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "- Name"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    - The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    - The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    - Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    - Students matching at least one keyword will be checked (i.e. OR search). e.g. `Hans Bo` will match `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "- Academic Year"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    - Value will match exactly. e.g. `2` will match `2` but not `1`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "- Searching by more than one field"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    - Common Time command will return student(s) that matches any of the fields provided."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- If no student matches the search criteria, the default dismissal time of 1500 for all 5 days will be returned."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `commonTime n/alex ay/1` returns the latest dismissal times for any student with names containing the whole word `alex`, **OR** who are in Academic Year 1."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `commonTime ay/1` returns the latest dismissal times for all the students in the student list who are in Academic Year 1."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `commonTime n/Alex Jane Mary` returns the latest dismissal times for any student with names Alex, Jane or Mary. Take note the rules above for matching applies."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Create Training : `training`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Creates a new training at the specified date and time."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "Format: `training yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "- `training 2020-10-10 1800`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Delete Training : `delete-training`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Deletes an existing training based on the training index."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `delete-training TRAINING_INDEX`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Training index refers to the index of the training in the displayed training list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* All students inside of the training to be deleted will be cleared."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Only one training index can be specified at a time."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `delete-training 2` removes the training with index 2 in the displayed training list. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Add Student to Training : `ts-add`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Adds students to a training."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `ts-add TRAINING_INDEX id/STUDENT_INDEX...`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Training index refers to the index of the training in the displayed training list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Student index refers to the index of the student in the entire student list (can be viewed with `list` command)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Multiple students can be added with the same command by inputing multiple student indexes separated with a comma."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Only one training index can be specified at a time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Each student can only be added to a **SINGLE** training on the same date regardless of time."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Student\u0027s dismissal time for the same day should also be equal or earlier than the time of the training. (i.e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ". Student\u0027s dismissal time for Monday should be equal or earlier than the time of a training that falls on a Monday"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " for him/her to be successfully added.)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Note: Training schedules can also be viewed on the student list panel and they will update as you add students to trainings."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `ts-add 2 id/1,2,3` adds students with indexes 1,2,3 to training 1."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### Delete Student from Training : `ts-delete`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Deletes students from a training."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `ts-delete TRAINING_INDEX id/STUDENT_INDEX...`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Training index refers to the index of the training in the displayed training list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Student index refers to the index of the student in the entire student list (can be viewed with `list` command)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Multiple students can be deleted with the same command by inputing multiple student indexes separated with a comma."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Only one training index can be specified at a time."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Note: Training schedules can also be viewed on the student list panel and it will update as you delete students from"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e trainings."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- `ts-delete 2 id/1,2,3` deletes students with indexes 1,2,3 from training 1."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Clears the student and training list of all existing students and trainings."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Note: Be careful, this deletes all data stored inside of the program, including student and training records. All sample data will be cleared too."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CanoE-COACH home folder."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL ay/ACADEMIC_YEAR [t/TAG]… [d1/MONDAY] [d2/TUESDAY] [d3/WEDNESDAY] [d4/THURSDAY] [d5/FRIDAY]​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com ay/1 t/friend`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Delete** | `delete STUDENT_INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**Edit** | `edit STUDENT_INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]… [d1/MONDAY] [d2/TUESDAY] [d3/WEDNESDAY] [d4/THURSDAY] [d5/FRIDAY] ​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sudogene"
        },
        "content": "**Find** | `find [n/KEYWORDS] [p/PHONE_NUMBER] [ay/ACADEMIC_YEAR] [e/EMAIL] [d1/HHmm d2/HHmm d3/HHmm d4/HHmm d5/HHmm] [id/ID]`\u003cbr\u003e e.g., `find n/James Jake ay/2`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**commonTime** | `commonTime [n/KEYWORDS] [ay/ACADEMIC_YEAR]`\u003cbr\u003e e.g., `commonTime n/alex ay/1`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**training** | `training yyyy-MM-dd HHmm`\u003cbr\u003e e.g., `training 2021-01-20 1800`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**delete-training** | `delete-training TRAINING_INDEX`\u003cbr\u003e e.g., `delete-training 1`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**ts-add** | `ts-add TRAINING_INDEX id/STUDENT_INDEX...`\u003cbr\u003e e.g., `ts-add 1 id/1,2,3`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**ts-delete** | `ts-delete TRAINING_INDEX id/STUDENT_INDEX...`\u003cbr\u003e e.g., `ts-delete 1 id/1,2,3`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 41,
      "sudogene": 4,
      "kerkpy": 19,
      "yejiadong": 103,
      "-": 121
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "title: CanoE-COACH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-F10-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-F10-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "**CanoE-COACH is a desktop application for managing training schedules for secondary school canoe teams.** While it has a GUI, most of the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* If you are interested in using CanoE-COACH, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* If you are interested about developing CanoE-COACH, the [**Developer Guide**](DeveloperGuide.html) is a good place to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 8,
      "-": 13
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Changes the remark of an existing student in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param index of the student in the filtered student list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param remark of the student to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.canoe.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of student data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the student’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a student."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Create a new `Remark` in `seedu.canoe.model.student`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each student."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "Simply add the following to [`seedu.canoe.ui.StudentCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public PersonCard(Person student, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    remark.setText(student.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Person editedStudent \u003d new Person(studentToEdit.getName(), studentToEdit.getPhone(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                studentToEdit.getAddress(), remark, studentToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String generateSuccessMessage(Person studentToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "yejiadong": 17,
      "-": 371
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.canoe.model.student.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 1,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.canoe.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       Person editedStudent \u003d createEditedPerson(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       if (!studentToEdit.isSamePerson(editedStudent) \u0026\u0026 model.hasPerson(editedStudent)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "       students.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 6,
      "-": 243
    }
  },
  {
    "path": "src/main/java/seedu/canoe/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/canoe/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/canoe/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.CanoeCoachStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.JsonCanoeCoachStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CanoeCoach ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoachStorage canoeCoachStorage \u003d new JsonCanoeCoachStorage(userPrefs.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        storage \u003d new StorageManager(canoeCoachStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s canoe coach book and {@code userPrefs}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The data from the sample canoe coach book will be used instead if {@code storage}\u0027s canoe coach book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * is not found, or an empty canoe coach book will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * canoe coach book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Optional\u003cReadOnlyCanoeCoach\u003e canoeCoachOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ReadOnlyCanoeCoach initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            canoeCoachOptional \u003d storage.readCanoeCoach();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (!canoeCoachOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CanoeCoach\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            initialData \u003d canoeCoachOptional.orElseGet(SampleDataUtil::getCanoeCoachBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CanoeCoach\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            initialData \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CanoeCoach\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            initialData \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CanoeCoach\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        logger.info(\"Starting CanoeCoach \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 44,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"One of the Student Ids provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_TRAININGS_LISTED_OVERVIEW \u003d \"%1$d trainings listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX \u003d \"The Training index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"The date and time\\n provided is not valid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENTS_IN_TRAINING \u003d \"One \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"of the Students provided is already in the Training Session!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "Whleee": 5,
      "yejiadong": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/canoe/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns the CanoeCoach."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see seedu.canoe.model.Model#getCanoeCoach()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    ReadOnlyCanoeCoach getCanoeCoach();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of trainings */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    ObservableList\u003cTraining\u003e getFilteredTrainingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns the user prefs\u0027 canoe book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Path getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 13,
      "Whleee": 3,
      "yejiadong": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.CanoeCoachParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final CanoeCoachParser canoeCoachParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoachParser \u003d new CanoeCoachParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Command command \u003d canoeCoachParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            storage.saveCanoeCoach(model.getCanoeCoach());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public ReadOnlyCanoeCoach getCanoeCoach() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return model.getCanoeCoach();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public ObservableList\u003cTraining\u003e getFilteredTrainingList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return model.getFilteredTrainingList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return model.getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 21,
      "Whleee": 4,
      "yejiadong": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Adds a student to the canoe book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the canoe book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + \"ACADEMIC YEAR \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"[\" + PREFIX_MONDAY_DISMISSAL + \"MONDAY DISMISSAL TIME \" + PREFIX_TUESDAY_DISMISSAL"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"TUESDAY DISMISSAL TIME \" + PREFIX_WEDNESDAY_DISMISSAL + \"WEDNESDAY DISMISSAL TIME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + PREFIX_THURSDAY_DISMISSAL + \"THURSDAY DISMISSAL TIME \" + PREFIX_FRIDAY_DISMISSAL"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"FRIDAY DISMISSAL TIME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + \"2 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_MONDAY_DISMISSAL + \"1600 \" + PREFIX_TUESDAY_DISMISSAL"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"1500 \" + PREFIX_WEDNESDAY_DISMISSAL + \"1400 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + PREFIX_THURSDAY_DISMISSAL + \"1700 \" + PREFIX_FRIDAY_DISMISSAL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"1800 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the canoe book\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.toAdd;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Student validToAdd \u003d toAdd.createStudentWithValidId();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        model.addStudent(validToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, validToAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 17,
      "sudogene": 3,
      "Whleee": 4,
      "kerkpy": 6,
      "yejiadong": 12,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/AddStudentToTrainingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_DUPLICATE_STUDENTS_IN_TRAINING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_TRAININGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Adds an existing student to a training."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class AddStudentToTrainingCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ts-add\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the corresponding Students \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \" to the specified Training Session\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"Parameters: Training_Session-ID \" + PREFIX_ID + \"Student_ID...\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"\\nExample: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + COMMAND_WORD + \"1 \" + PREFIX_ID + \"3,5,7\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"Added Student: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_NO_STUDENTS_SPECIFIED \u003d \"At least one student to be added must be specified.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_STUDENT_UNAVAILABLE \u003d \"This student cannot be added to the training as \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"either his dismissal time on the specified day falls after the training\u0027s start time or he has a \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"training scheduled on the same date already!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final String[] studentsToAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param index of the Training Session to add Students to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param studentsToAdd corresponding Id of Students to add."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public AddStudentToTrainingCommand(Index index, String[] studentsToAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(studentsToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.studentsToAdd \u003d studentsToAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Added in case previous command is find"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredTrainingList(PREDICATE_SHOW_ALL_TRAININGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cTraining\u003e lastShownList \u003d model.getFilteredTrainingList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (studentsToAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STUDENTS_SPECIFIED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Training trainingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Training editedTraining \u003d new Training(trainingToEdit.getDateTime(), trainingToEdit.getStudents());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student ID Checks - not invalid index, numbered index and exists in student list and not duplicated"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cStudent\u003e targetStudentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cStudent\u003e editedStudentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (String str : studentsToAdd) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (str.length() !\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new CommandException(String"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentToTrainingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(str)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new CommandException(String"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentToTrainingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (Integer.parseInt(str) \u003e studentList.size() || Integer.parseInt(str) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Student studentToEdit \u003d studentList.get(Integer.parseInt(str) - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Student editedStudent \u003d createEditedStudent(studentToEdit, editedTraining);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!uniqueChecker(editedTraining, studentToEdit)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            //Ensures student is available to attend training based on dismissal time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!studentToEdit.isAvailableAtDateTime(editedTraining.getDateTime())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    || studentToEdit.hasTrainingAtDateTime(editedTraining.getDateTime())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new CommandException(MESSAGE_STUDENT_UNAVAILABLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            Add students that have passed all checks to the corresponding lists first without"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            modifying the model."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "             */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editedTraining.addStudent(editedStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            targetStudentList.add(studentToEdit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            editedStudentList.add(editedStudent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        //All checked passed at this point, iterate through student lists to update the model."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (int i \u003d 0; i \u003c targetStudentList.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            model.setStudentInUniqueStudentList(targetStudentList.get(i), editedStudentList.get(i));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        model.setTraining(trainingToEdit, editedTraining);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String result \u003d this.getStudentsAdded();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_STUDENT_SUCCESS, result));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Checks that the Training Specified does not contain the Student to Add."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param trainingToCheck"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param check Student to check."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return boolean that indicates whether Student to be added is unique."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean uniqueChecker(Training trainingToCheck, Student check) throws CommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (Student student : trainingToCheck.getStudents()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (student.getId().equals(check.getId())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_STUDENTS_IN_TRAINING);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, Training editedTraining) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Name updatedName \u003d studentToEdit.getName();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Phone updatedPhone \u003d studentToEdit.getPhone();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Email updatedEmail \u003d studentToEdit.getEmail();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AcademicYear updatedAcademicYear \u003d studentToEdit.getAcademicYear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day mondayDismissal \u003d studentToEdit.getMondayDismissal();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day tuesdayDismissal \u003d studentToEdit.getTuesdayDismissal();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day wednesdayDismissal \u003d studentToEdit.getWednesdayDismissal();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day thursdayDismissal \u003d studentToEdit.getThursdayDismissal();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day fridayDismissal \u003d studentToEdit.getFridayDismissal();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cLocalDateTime\u003e trainingSchedules \u003d studentToEdit.getTrainingSchedule().stream()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules.add(editedTraining.getDateTime());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Id id \u003d studentToEdit.getId();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student newStudent \u003d new Student(updatedName, updatedPhone, updatedEmail, updatedAcademicYear, updatedTags,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                mondayDismissal, tuesdayDismissal, wednesdayDismissal, thursdayDismissal, fridayDismissal, id);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        newStudent.addAllTraining(trainingSchedules);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return newStudent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns a String with the IDs of the students added, removing duplicate IDs."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return String with Unique Ids of Students added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String getStudentsAdded() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (String str : studentsToAdd) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (result.contains(str)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            result +\u003d str + \" \";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        result \u003d result.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!(other instanceof AddStudentToTrainingCommand)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AddStudentToTrainingCommand e \u003d (AddStudentToTrainingCommand) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 studentsToAdd.equals(e.studentsToAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 19,
      "Whleee": 133,
      "kerkpy": 3,
      "yejiadong": 59
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Clears the canoe coach book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Canoe Coach book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.setCanoeCoach(new CanoeCoach());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/CommonTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AnyMatchPredicateList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.CommonTimeFinder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Finds the latest dismissal time of all the students stated in the keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CommonTimeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"commonTime\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            + \": Finds a common time amongst all selected students \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            + \"for each day and displays them as a list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_NO_QUERY \u003d \"At least one valid field is required to find a common time.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final AnyMatchPredicateList predicates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private List\u003cLocalTime\u003e commonDismissalTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CommonTimeCommand(AnyMatchPredicateList predicates) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.updateFilteredStudentList(predicates);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        commonDismissalTimes \u003d new CommonTimeFinder(model.getFilteredStudentList()).getCommonDismissalTimes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new CommandResult(commonDismissalTimesToString(commonDismissalTimes));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof CommonTimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 predicates.equals(((CommonTimeCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Converts a list of LocalTime objects into string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns a string version of the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param commonDismissalTimes list of LocalTime objects"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @return String version of the given list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public String commonDismissalTimesToString (List\u003cLocalTime\u003e commonDismissalTimes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String strCommonDismissalTimes \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d \"Monday: \" + commonDismissalTimes.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d \"Tuesday: \" + commonDismissalTimes.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d \"Wednesday: \" + commonDismissalTimes.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d \"Thursday: \" + commonDismissalTimes.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d \"Friday: \" + commonDismissalTimes.get(i).toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                strCommonDismissalTimes +\u003d MESSAGE_NO_QUERY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return strCommonDismissalTimes;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 87,
      "yejiadong": 1
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_TRAININGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.util.StudentTrainingSessionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the canoe book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalDateTime\u003e studentTrainingDateTimeList \u003d new ArrayList\u003c\u003e(studentToDelete.getTrainingSchedule());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cTraining\u003e studentTrainings \u003d StudentTrainingSessionUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .getTrainingListFromDateTimeList(studentTrainingDateTimeList, model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        for (Training training: studentTrainings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            Training editedTraining \u003d new Training(training.getDateTime(), training.getStudents());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            editedTraining.removeStudent(studentToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            model.setTraining(training, editedTraining);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.updateFilteredTrainingList(PREDICATE_SHOW_ALL_TRAININGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 22,
      "yejiadong": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/DeleteStudentFromTrainingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_TRAININGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Deletes an existing student from a training."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DeleteStudentFromTrainingCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ts-delete\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the corresponding Students \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"from the specified Training Session\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"Parameters: Training_Session-ID \" + PREFIX_ID + \"Student_ID...\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"\\nExample: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + COMMAND_WORD + \"1 \" + PREFIX_ID + \"3,5,7\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT \u003d \"One of the\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \" Students provided is not inside of the training specified!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_NO_STUDENTS_SPECIFIED \u003d \"At least one student to be deleted must be specified.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final String[] studentsToDelete;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param index of the training in the filtered training list to delete"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param studentsToDelete corresponding Id of Students to delete"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public DeleteStudentFromTrainingCommand(Index index, String[] studentsToDelete) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(studentsToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.studentsToDelete \u003d studentsToDelete;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Added in case previous command is find"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredTrainingList(PREDICATE_SHOW_ALL_TRAININGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cTraining\u003e lastShownList \u003d model.getFilteredTrainingList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Ensures that command contains at least one student to delete"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (studentsToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STUDENTS_SPECIFIED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Ensures correct training index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Training trainingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Training editedTraining \u003d new Training(trainingToEdit.getDateTime(), trainingToEdit.getStudents());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student ID Checks - not invalid index, numbered index and exists in student list and exists inside of training"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cStudent\u003e targetStudentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        List\u003cStudent\u003e editedStudentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (String str : studentsToDelete) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (str.length() !\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new CommandException(String"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentToTrainingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(str)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new CommandException(String"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentToTrainingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (Integer.parseInt(str) \u003e studentList.size() || Integer.parseInt(str) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Student studentToEdit \u003d studentList.get(Integer.parseInt(str) - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Student editedStudent \u003d createEditedStudent(studentToEdit, editedTraining);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!containStudentChecker(editedTraining, studentToEdit)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_STUDENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            Add students that have passed all checks to the corresponding lists first without"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            modifying the model."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Whleee"
        },
        "content": "             */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editedTraining.removeStudent(editedStudent);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            targetStudentList.add(studentToEdit);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            editedStudentList.add(editedStudent);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        //All checked passed at this point, iterate through student lists to update the model."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (int i \u003d 0; i \u003c targetStudentList.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            model.setStudentInUniqueStudentList(targetStudentList.get(i), editedStudentList.get(i));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        model.setTraining(trainingToEdit, editedTraining);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String result \u003d getStudentsDeleted();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, result));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks that the Training Specified contains the Student to be removed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param trainingToCheck"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param check Student to check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return boolean that indicates whether Student to be removed is contained within the training."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean containStudentChecker(Training trainingToCheck, Student check) throws CommandException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        boolean containsStudent \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Student student : trainingToCheck.getStudents()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (student.getId().equals(check.getId())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                containsStudent \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return containsStudent;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, Training editedTraining) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Name updatedName \u003d studentToEdit.getName();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Phone updatedPhone \u003d studentToEdit.getPhone();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Email updatedEmail \u003d studentToEdit.getEmail();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AcademicYear updatedAcademicYear \u003d studentToEdit.getAcademicYear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day mondayDismissal \u003d studentToEdit.getMondayDismissal();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day tuesdayDismissal \u003d studentToEdit.getTuesdayDismissal();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day wednesdayDismissal \u003d studentToEdit.getWednesdayDismissal();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day thursdayDismissal \u003d studentToEdit.getThursdayDismissal();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day fridayDismissal \u003d studentToEdit.getFridayDismissal();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cLocalDateTime\u003e trainingSchedules \u003d studentToEdit.getTrainingSchedule().stream()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules.remove(editedTraining.getDateTime());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Id id \u003d studentToEdit.getId();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student newStudent \u003d new Student(updatedName, updatedPhone, updatedEmail, updatedAcademicYear, updatedTags,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                mondayDismissal, tuesdayDismissal, wednesdayDismissal, thursdayDismissal, fridayDismissal, id);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        newStudent.addAllTraining(trainingSchedules);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return newStudent;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns a String with the IDs of the students deleted, removing duplicate IDs."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return String with Unique Ids of Students deleted"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String getStudentsDeleted() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (String str : studentsToDelete) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (result.contains(str)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            result +\u003d str + \" \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        result \u003d result.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Return the index of the Training."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return index of Training"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!(other instanceof DeleteStudentFromTrainingCommand)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DeleteStudentFromTrainingCommand e \u003d (DeleteStudentFromTrainingCommand) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 studentsToDelete.equals(e.studentsToDelete);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 17,
      "Whleee": 128,
      "kerkpy": 3,
      "yejiadong": 69
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/DeleteTrainingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_TRAININGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DeleteTrainingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-training\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + \": Deletes the training session identified by the index number used in the displayed training list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Training: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a DeleteTrainingCommand to delete the specified {@code Training} based on the training index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public DeleteTrainingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Added in case previous command is find"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredTrainingList(PREDICATE_SHOW_ALL_TRAININGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        List\u003cTraining\u003e lastShownList \u003d model.getFilteredTrainingList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Training trainingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Deletes the training\u0027s date time from the students involved in that training"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        trainingToDelete.getStudents()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .map(Student::getId)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .forEach(id -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                    Student studentToEdit \u003d getStudentById(studentList, id);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                    Student editedStudent \u003d createEditedStudent(studentToEdit, trainingToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                    model.setStudentInUniqueStudentList(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        trainingToDelete.clearStudents();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Updating the model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        model.deleteTraining(trainingToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, trainingToDelete));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private Student createEditedStudent(Student studentToEdit, Training trainingToDelete) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        requireNonNull(studentToEdit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Student newStudent \u003d studentToEdit.cloneStudent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        newStudent.removeTraining(trainingToDelete.getDateTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return newStudent;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private Student getStudentById(List\u003cStudent\u003e studentsList, Id id) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Optional\u003cStudent\u003e filteredStudent \u003d studentsList.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .filter(student -\u003e student.getId().equals(id))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assert filteredStudent.isPresent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return filteredStudent.get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                || (other instanceof DeleteTrainingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTrainingCommand) other).targetIndex));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "sudogene": 54,
      "Whleee": 30,
      "yejiadong": 6
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_TRAININGS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.util.StudentTrainingSessionUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Edits the details of an existing student in the canoe book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"[\" + PREFIX_ACADEMIC_YEAR + \"ACADEMIC YEAR] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"[\" + PREFIX_MONDAY_DISMISSAL + \"MONDAY DISMISSAL TIME \" + PREFIX_TUESDAY_DISMISSAL"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"TUESDAY DISMISSAL TIME \" + PREFIX_WEDNESDAY_DISMISSAL + \"WEDNESDAY DISMISSAL TIME \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + PREFIX_THURSDAY_DISMISSAL + \"THURSDAY DISMISSAL TIME \" + PREFIX_FRIDAY_DISMISSAL"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"FRIDAY DISMISSAL TIME] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + \"1 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + PREFIX_MONDAY_DISMISSAL + \"1600 \" + PREFIX_TUESDAY_DISMISSAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + \"1500 \" + PREFIX_WEDNESDAY_DISMISSAL + \"1400 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + PREFIX_THURSDAY_DISMISSAL + \"1700 \" + PREFIX_FRIDAY_DISMISSAL"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"1800\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the canoe book.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Student studentToEdit \u003d lastShownStudentList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (!editedStudent.isAvailableForAllTrainingsScheduled()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            List\u003cLocalDateTime\u003e dateTimesUnableToAttend \u003d StudentTrainingSessionUtil"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    .getConflictsInStudentTrainingSchedule(editedStudent.getTrainingSchedule(), editedStudent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            List\u003cTraining\u003e trainingsUnableToAttend \u003d StudentTrainingSessionUtil"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    .getTrainingListFromDateTimeList(dateTimesUnableToAttend, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            for (Training training: trainingsUnableToAttend) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Training editedTraining \u003d new Training(training.getDateTime(), training.getStudents());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                editedTraining.removeStudent(studentToEdit);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                editedStudent.removeTraining(training.getDateTime());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                model.setTraining(training, editedTraining);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalDateTime\u003e studentTrainingDateTimeList \u003d new ArrayList\u003c\u003e(editedStudent.getTrainingSchedule());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cTraining\u003e studentTrainingList \u003d StudentTrainingSessionUtil"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .getTrainingListFromDateTimeList(studentTrainingDateTimeList, model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        for (Training training: studentTrainingList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            Training editedTraining \u003d new Training(training.getDateTime(), training.getStudents());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            editedTraining.removeStudent(studentToEdit);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            editedTraining.addStudent(editedStudent);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            model.setTraining(training, editedTraining);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.setStudentInUniqueStudentList(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.updateFilteredTrainingList(PREDICATE_SHOW_ALL_TRAININGS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AcademicYear updatedAcademicYear \u003d editStudentDescriptor.getAcademicYear()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .orElse(studentToEdit.getAcademicYear());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day mondayDismissal \u003d editStudentDescriptor.getMondayDismissal().orElse(studentToEdit.getMondayDismissal());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day tuesdayDismissal \u003d editStudentDescriptor.getTuesdayDismissal().orElse(studentToEdit.getTuesdayDismissal());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day wednesdayDismissal \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                editStudentDescriptor.getWednesdayDismissal().orElse(studentToEdit.getWednesdayDismissal());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day thursdayDismissal \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                editStudentDescriptor.getThursdayDismissal().orElse(studentToEdit.getThursdayDismissal());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day fridayDismissal \u003d editStudentDescriptor.getFridayDismissal().orElse(studentToEdit.getFridayDismissal());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cLocalDateTime\u003e trainingSchedules \u003d studentToEdit.getTrainingSchedule().stream()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Id id \u003d studentToEdit.getId();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student newStudent \u003d new Student(updatedName, updatedPhone, updatedEmail, updatedAcademicYear, updatedTags,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            mondayDismissal, tuesdayDismissal, wednesdayDismissal, thursdayDismissal, fridayDismissal, id);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        newStudent.addAllTraining(trainingSchedules);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return newStudent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        private AcademicYear academicYear;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        private Id id;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Dismissal Times"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private Day mondayDismissal;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private Day tuesdayDismissal;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private Day wednesdayDismissal;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private Day thursdayDismissal;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private Day fridayDismissal;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            setMondayDismissal(toCopy.mondayDismissal);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            setTuesdayDismissal(toCopy.tuesdayDismissal);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            setWednesdayDismissal(toCopy.wednesdayDismissal);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            setThursdayDismissal(toCopy.thursdayDismissal);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            setFridayDismissal(toCopy.fridayDismissal);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            setAcademicYear(toCopy.academicYear);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, academicYear,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                mondayDismissal, tuesdayDismissal, wednesdayDismissal, thursdayDismissal, fridayDismissal, tags);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void setMondayDismissal(Day mondayDismissal) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.mondayDismissal \u003d mondayDismissal;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public Optional\u003cDay\u003e getMondayDismissal() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Optional.ofNullable(mondayDismissal);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void setTuesdayDismissal(Day tuesdayDismissal) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.tuesdayDismissal \u003d tuesdayDismissal;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public Optional\u003cDay\u003e getTuesdayDismissal() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Optional.ofNullable(tuesdayDismissal);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void setWednesdayDismissal(Day wednesdayDismissal) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.wednesdayDismissal \u003d wednesdayDismissal;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public Optional\u003cDay\u003e getWednesdayDismissal() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Optional.ofNullable(wednesdayDismissal);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void setThursdayDismissal(Day thursdayDismissal) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.thursdayDismissal \u003d thursdayDismissal;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public Optional\u003cDay\u003e getThursdayDismissal() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Optional.ofNullable(thursdayDismissal);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void setFridayDismissal(Day fridayDismissal) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.fridayDismissal \u003d fridayDismissal;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public Optional\u003cDay\u003e getFridayDismissal() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Optional.ofNullable(fridayDismissal);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public void setAcademicYear (AcademicYear academicYear) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public Optional\u003cAcademicYear\u003e getAcademicYear() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return Optional.ofNullable(academicYear);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    \u0026\u0026 getMondayDismissal().equals(e.getMondayDismissal())"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    \u0026\u0026 getTuesdayDismissal().equals(e.getTuesdayDismissal())"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    \u0026\u0026 getWednesdayDismissal().equals(e.getWednesdayDismissal())"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    \u0026\u0026 getThursdayDismissal().equals(e.getThursdayDismissal())"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    \u0026\u0026 getFridayDismissal().equals(e.getFridayDismissal())"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    \u0026\u0026 getAcademicYear().equals(e.getAcademicYear())"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 58,
      "sudogene": 13,
      "Whleee": 11,
      "kerkpy": 9,
      "yejiadong": 112,
      "-": 155
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CanoE-COACH as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AllMatchPredicateList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Finds and lists all students in canoe book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String MESSAGE_NO_QUERY \u003d \"At least one valid field is required to find a student.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final AllMatchPredicateList predicates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public FindCommand(AllMatchPredicateList predicates) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        model.updateFilteredStudentList(predicates);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 7,
      "sudogene": 4,
      "yejiadong": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/FindStudentTrainingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.student.IdMatchesPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.student.TrainingMatchesIdPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Finds and lists all trainings in canoe book which match the student id specified."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class FindStudentTrainingCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-training\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all trainings whose ID matches \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"the specified ID and displays them as a list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"Parameters: STUDENT_INDEX \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" id/1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_NO_STUDENT_QUERY \u003d \"A student ID is required to find a student\u0027s \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"trainings.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_ONE_STUDENT_QUERY \u003d \"Only ONE student ID without extra characters should be \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            + \"provided to find a student\u0027s trainings.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final IdMatchesPredicate studentPredicates;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final TrainingMatchesIdPredicate trainingPredicates;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates an FindStudentTrainingCommand to find all the specified {@code Student}\u0027s trainings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public FindStudentTrainingCommand(IdMatchesPredicate studentPredicates,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                                      TrainingMatchesIdPredicate trainingPredicates) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.studentPredicates \u003d studentPredicates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.trainingPredicates \u003d trainingPredicates;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(studentPredicates);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredTrainingList(trainingPredicates);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (model.getFilteredStudentList().size() \u003c 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(\"Please provide a student index that exists in the student list!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Make sure ONLY one student in the filtered student list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert model.getFilteredStudentList().size() \u003c\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        model.getFilteredStudentList().size()) + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        + String.format(Messages.MESSAGE_TRAININGS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        model.getFilteredTrainingList().size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                || (other instanceof FindStudentTrainingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 studentPredicates.equals(((FindStudentTrainingCommand) other).studentPredicates)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 trainingPredicates.equals(((FindStudentTrainingCommand) other).trainingPredicates)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 67
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Lists all students in the canoe book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "yejiadong": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/TrainingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TrainingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"training\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a Training Session \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"Parameters: Date and Time (yyyy-MM-dd HHmm) \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \" 2020-10-20 1800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TRAINING \u003d \"New Training Session created at: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRAINING \u003d \"There \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + \"already exists a Training Session at this Date and Time\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_PAST_TRAINING \u003d \"Trainings cannot be scheduled for dates that are past!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final Training toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingCommand(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        toAdd \u003d new Training(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Training getTraining() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (getTraining().getDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new CommandException(MESSAGE_PAST_TRAINING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (model.hasTraining(getTraining())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRAINING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.addTraining(getTraining());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_TRAINING, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                || (other instanceof TrainingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 getTraining().equals(((TrainingCommand) other).getTraining()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "Whleee": 50,
      "yejiadong": 8
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.student.time.Friday.DEFAULT_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.student.time.Monday.DEFAULT_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.student.time.Thursday.DEFAULT_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.student.time.Tuesday.DEFAULT_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.student.time.Wednesday.DEFAULT_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        PREFIX_ACADEMIC_YEAR, PREFIX_MONDAY_DISMISSAL, PREFIX_TUESDAY_DISMISSAL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        PREFIX_WEDNESDAY_DISMISSAL, PREFIX_THURSDAY_DISMISSAL, PREFIX_FRIDAY_DISMISSAL, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ACADEMIC_YEAR)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AcademicYear academicYear \u003d ParserUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                .parseAcademicYear(argMultimap.getValue(PREFIX_ACADEMIC_YEAR).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day mondayDismissal \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ParserUtil.parseDismissal(Day.DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        argMultimap.getValue(PREFIX_MONDAY_DISMISSAL).orElse(DEFAULT_MONDAY_DISMISSAL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day tuesdayDismissal \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ParserUtil.parseDismissal(Day.DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        argMultimap.getValue(PREFIX_TUESDAY_DISMISSAL).orElse(DEFAULT_TUESDAY_DISMISSAL));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day wednesdayDismissal \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ParserUtil.parseDismissal(Day.DayOfWeek.WEDNESDAY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        argMultimap.getValue(PREFIX_WEDNESDAY_DISMISSAL).orElse(DEFAULT_WEDNESDAY_DISMISSAL));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day thursdayDismissal \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ParserUtil.parseDismissal(Day.DayOfWeek.THURSDAY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        argMultimap.getValue(PREFIX_THURSDAY_DISMISSAL).orElse(DEFAULT_THURSDAY_DISMISSAL));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Day fridayDismissal \u003d ParserUtil.parseDismissal(Day.DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                argMultimap.getValue(PREFIX_FRIDAY_DISMISSAL).orElse(DEFAULT_FRIDAY_DISMISSAL));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new Student(name, phone, email, academicYear, tagList, mondayDismissal, tuesdayDismissal,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                wednesdayDismissal, thursdayDismissal, fridayDismissal, Id.getPlaceHolderId());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 27,
      "sudogene": 4,
      "Whleee": 1,
      "kerkpy": 2,
      "yejiadong": 17,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddStudentToTrainingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Parses input arguments and creates a new AddStudentToTrainingCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentToTrainingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentToTrainingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * and returns an AddStudentToTrainingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public AddStudentToTrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                AddStudentToTrainingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        String[] studentIndexes \u003d new String[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            String text \u003d argMultimap.getValue(PREFIX_ID).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentIndexes \u003d text.split(\",\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (studentIndexes.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            throw new ParseException(AddStudentToTrainingCommand.MESSAGE_NO_STUDENTS_SPECIFIED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return new AddStudentToTrainingCommand(index, studentIndexes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "Whleee": 23,
      "kerkpy": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/CanoeCoachParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddStudentToTrainingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommonTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteStudentFromTrainingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteTrainingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.logic.commands.FindStudentTrainingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CanoeCoachParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case FindStudentTrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new FindStudentTrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        case TrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return new TrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        case DeleteTrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return new DeleteTrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        case CommonTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            return new CommonTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        case AddStudentToTrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        case DeleteStudentFromTrainingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new DeleteStudentFromTrainingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 22,
      "Whleee": 11,
      "yejiadong": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Prefix PREFIX_MONDAY_DISMISSAL \u003d new Prefix(\"d1/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Prefix PREFIX_TUESDAY_DISMISSAL \u003d new Prefix(\"d2/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Prefix PREFIX_WEDNESDAY_DISMISSAL \u003d new Prefix(\"d3/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Prefix PREFIX_THURSDAY_DISMISSAL \u003d new Prefix(\"d4/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Prefix PREFIX_FRIDAY_DISMISSAL \u003d new Prefix(\"d5/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Prefix PREFIX_ACADEMIC_YEAR \u003d new Prefix(\"ay/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Prefix PREFIX_TRAINING \u003d new Prefix(\"training\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TRAINING \u003d new Prefix(\"delete-training\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Prefix PREFIX_ADD_STUDENT \u003d new Prefix(\"ts-add\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Prefix PREFIX_DELETE_STUDENT \u003d new Prefix(\"ts-delete\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "sudogene": 1,
      "Whleee": 5,
      "yejiadong": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/CommonTimeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommonTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYearMatchesPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AnyMatchPredicateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Parses input arguments and creates a CommonTimeCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CommonTimeCommandParser implements Parser\u003cCommonTimeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CommonTimeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * and returns a CommonTimeCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CommonTimeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ACADEMIC_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        boolean checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicates \u003d new AnyMatchPredicateList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            String text \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (text.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                predicates.add(new NameContainsKeywordsPredicate(getKeywordsFromString(text)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACADEMIC_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            String academicYearValue \u003d argMultimap.getValue(PREFIX_ACADEMIC_YEAR).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!academicYearValue.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                predicates.add(new AcademicYearMatchesPredicate(academicYearValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (predicates.isEmpty() || checkEmptyString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            throw new ParseException(CommonTimeCommand.MESSAGE_NO_QUERY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new CommonTimeCommand(predicates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private List\u003cString\u003e getKeywordsFromString(String str) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return Arrays.asList(str.split(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 50,
      "yejiadong": 10
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/DeleteStudentFromTrainingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteStudentFromTrainingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentFromTrainingCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DeleteStudentFromTrainingCommandParser implements Parser\u003cDeleteStudentFromTrainingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentFromTrainingCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * and returns an DeleteStudentFromTrainingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public DeleteStudentFromTrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                DeleteStudentFromTrainingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        String[] studentIndexes \u003d new String[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            String text \u003d argMultimap.getValue(PREFIX_ID).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentIndexes \u003d text.split(\",\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (studentIndexes.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            throw new ParseException(DeleteStudentFromTrainingCommand.MESSAGE_NO_STUDENTS_SPECIFIED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return new DeleteStudentFromTrainingCommand(index, studentIndexes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "Whleee": 19,
      "kerkpy": 22,
      "yejiadong": 6
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/DeleteTrainingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteTrainingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DeleteTrainingCommandParser implements Parser\u003cDeleteTrainingCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TrainingCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * and returns a TrainingCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public DeleteTrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return new DeleteTrainingCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTrainingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "sudogene": 2,
      "Whleee": 17
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_MONDAY_DISMISSAL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        PREFIX_TUESDAY_DISMISSAL, PREFIX_WEDNESDAY_DISMISSAL, PREFIX_THURSDAY_DISMISSAL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        PREFIX_FRIDAY_DISMISSAL, PREFIX_TAG, PREFIX_ACADEMIC_YEAR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACADEMIC_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            editStudentDescriptor.setAcademicYear(ParserUtil.parseAcademicYear("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                argMultimap.getValue(PREFIX_ACADEMIC_YEAR).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setMondayDismissal(ParserUtil.parseDismissal(Day.DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    argMultimap.getValue(PREFIX_MONDAY_DISMISSAL).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUESDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setTuesdayDismissal(ParserUtil.parseDismissal(Day.DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    argMultimap.getValue(PREFIX_TUESDAY_DISMISSAL).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEDNESDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setWednesdayDismissal(ParserUtil.parseDismissal(Day.DayOfWeek.WEDNESDAY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    argMultimap.getValue(PREFIX_WEDNESDAY_DISMISSAL).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_THURSDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setThursdayDismissal(ParserUtil.parseDismissal(Day.DayOfWeek.THURSDAY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    argMultimap.getValue(PREFIX_THURSDAY_DISMISSAL).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FRIDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            editStudentDescriptor.setFridayDismissal(ParserUtil.parseDismissal(Day.DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    argMultimap.getValue(PREFIX_FRIDAY_DISMISSAL).get()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 18,
      "kerkpy": 6,
      "yejiadong": 35,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYearMatchesPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AllMatchPredicateList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.EmailContainsKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.IdMatchesPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.PhoneMatchesPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.FridayDismissalPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.MondayDismissalPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.ThursdayDismissalPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.TuesdayDismissalPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.WednesdayDismissalPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ACADEMIC_YEAR,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        PREFIX_MONDAY_DISMISSAL, PREFIX_TUESDAY_DISMISSAL, PREFIX_WEDNESDAY_DISMISSAL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        PREFIX_THURSDAY_DISMISSAL, PREFIX_FRIDAY_DISMISSAL, PREFIX_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        boolean checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList predicates \u003d new AllMatchPredicateList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String text \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (text.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new NameContainsKeywordsPredicate(getKeywordsFromString(text)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String phoneValue \u003d argMultimap.getValue(PREFIX_PHONE).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!phoneValue.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new PhoneMatchesPredicate(phoneValue));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String keyword \u003d argMultimap.getValue(PREFIX_EMAIL).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new EmailContainsKeywordPredicate(keyword));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACADEMIC_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String academicYearValue \u003d argMultimap.getValue(PREFIX_ACADEMIC_YEAR).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!academicYearValue.equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new AcademicYearMatchesPredicate(academicYearValue));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String timeString \u003d argMultimap.getValue(PREFIX_MONDAY_DISMISSAL).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!timeString.equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new MondayDismissalPredicate(getTimeFromString(timeString)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUESDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String timeString \u003d argMultimap.getValue(PREFIX_TUESDAY_DISMISSAL).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!timeString.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new TuesdayDismissalPredicate(getTimeFromString(timeString)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEDNESDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String timeString \u003d argMultimap.getValue(PREFIX_WEDNESDAY_DISMISSAL).get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!timeString.equals(\"\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new WednesdayDismissalPredicate(getTimeFromString(timeString)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_THURSDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String timeString \u003d argMultimap.getValue(PREFIX_THURSDAY_DISMISSAL).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!timeString.equals(\"\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new ThursdayDismissalPredicate(getTimeFromString(timeString)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FRIDAY_DISMISSAL).isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String timeString \u003d argMultimap.getValue(PREFIX_FRIDAY_DISMISSAL).get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!timeString.equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new FridayDismissalPredicate(getTimeFromString(timeString)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            String idValue \u003d argMultimap.getValue(PREFIX_ID).get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!idValue.equals(\"\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                checkEmptyString \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                predicates.add(new IdMatchesPredicate(idValue));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (predicates.isEmpty() || checkEmptyString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            throw new ParseException(FindCommand.MESSAGE_NO_QUERY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private List\u003cString\u003e getKeywordsFromString(String str) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return Arrays.asList(str.split(\" \"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private LocalTime getTimeFromString(String str) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day day \u003d ParserUtil.parseDismissal(Day.DayOfWeek.MONDAY, str);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return day.dismissalTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 26,
      "sudogene": 72,
      "yejiadong": 33,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/FindStudentTrainingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.logic.commands.FindStudentTrainingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.student.IdMatchesPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.model.student.TrainingMatchesIdPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Parses input arguments and creates a new FindStudentTrainingCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class FindStudentTrainingCommandParser implements Parser\u003cFindStudentTrainingCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FindStudentTrainingCommand.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindStudentTrainingCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * and returns an FindStudentTrainingCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public FindStudentTrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Parsing FindStudentTrainingCommand ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            String idValue \u003d argMultimap.getValue(PREFIX_ID).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!idValue.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new ParseException(FindStudentTrainingCommand.MESSAGE_ONE_STUDENT_QUERY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!idValue.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                Id id \u003d new Id(idValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                IdMatchesPredicate studentIdMatchPredicate \u003d new IdMatchesPredicate(idValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                TrainingMatchesIdPredicate trainingMatchPredicate \u003d new TrainingMatchesIdPredicate(id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                return new FindStudentTrainingCommand(studentIdMatchPredicate, trainingMatchPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            logger.warning(\"No students specified in the command argument!\" + args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new ParseException(FindStudentTrainingCommand.MESSAGE_NO_STUDENT_QUERY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        logger.warning(\"No students specified in the command!\" + args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        throw new ParseException(FindStudentTrainingCommand.MESSAGE_NO_STUDENT_QUERY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 50
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Friday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Monday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Thursday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Tuesday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Wednesday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses a {@code String dismissalTime} into a {@code Day} based on the {@code dayOfWeek}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws ParseException if the given {@code dismissalTime} or {@code dayOfWeek} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static Day parseDismissal(Day.DayOfWeek dayOfWeek, String dismissalTime) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(dayOfWeek, dismissalTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String trimmedDismissalTime \u003d dismissalTime.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(trimmedDismissalTime)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        switch (dayOfWeek) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Monday(trimmedDismissalTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Tuesday(trimmedDismissalTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Wednesday(trimmedDismissalTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Thursday(trimmedDismissalTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Friday(trimmedDismissalTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new ParseException(\"Unexpected value: \" + dayOfWeek);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Parses a {@code String academicYear} into an {@code AcademicYear}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws ParseException if the given {@code academicYear} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static AcademicYear parseAcademicYear(String academicYear) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(academicYear);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String trimmedAcademicYear \u003d academicYear.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!AcademicYear.isValidAcademicYear(trimmedAcademicYear)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new ParseException(AcademicYear.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new AcademicYear(trimmedAcademicYear);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Parses a {@code String training} into a {@code Training}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws ParseException if the given {@code training} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static Training parseTraining(String training) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(training);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String trimmedTraining \u003d training.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedTraining, formatter);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return new Training(dateTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new ParseException(Training.MESSAGE_CONSTRAINTS + \"DateTime has to be valid as well.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 16,
      "Whleee": 34,
      "kerkpy": 1,
      "yejiadong": 29,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/TrainingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.TrainingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TrainingCommandParser implements Parser\u003cTrainingCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TrainingCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * and returns a TrainingCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            LocalDateTime trainingTime \u003d ParserUtil.parseTraining(args).getDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return new TrainingCommand(trainingTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrainingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "Whleee": 22
    }
  },
  {
    "path": "src/main/java/seedu/canoe/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/CanoeCoach.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.UniqueTrainingList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Wraps all data at the canoe coach book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CanoeCoach implements ReadOnlyCanoeCoach {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final UniqueTrainingList trainings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainings \u003d new UniqueTrainingList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CanoeCoach() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Creates an CanoeCoach using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CanoeCoach(ReadOnlyCanoeCoach toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Replaces the contents of the training list with {@code trainings}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * {@code trainings} must not contain duplicate trainings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void setTrainings(List\u003cTraining\u003e trainings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.trainings.setTrainings(trainings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Replaces the given training {@code target} in the list with {@code editedTraining}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code target} must exist in the canoe book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * The training identity of {@code editedTraining} must not be the same as another existing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * training in the canoe book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void setTraining(Training target, Training editedTraining) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(editedTraining);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainings.setTraining(target, editedTraining);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Resets the existing data of this {@code CanoeCoach} with {@code newData}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void resetData(ReadOnlyCanoeCoach newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        setTrainings(newData.getTrainingList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    //// student-level operations and training-level operations"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the canoe book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns true if a training with the same identity as {@code training} exists in the canoe book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean hasTraining(Training training) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(training);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return trainings.contains(training);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Adds a student to the canoe book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The student must not already exist in the canoe book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Adds a training to the canoe book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The training must not already exist in the canoe book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void addTraining(Training p) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainings.add(p);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code target} must exist in the canoe book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * student in the canoe book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void setStudentInUniqueStudentList(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Removes {@code key} from this {@code CanoeCoach}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code key} must exist in the canoe book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Removes the specified Training from the Address Book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param training"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void removeTraining(Training training) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainings.remove(training);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public ObservableList\u003cTraining\u003e getTrainingList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return trainings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof CanoeCoach // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 students.equals(((CanoeCoach) other).students));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 27,
      "Whleee": 48,
      "yejiadong": 23,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Predicate\u003cTraining\u003e PREDICATE_SHOW_ALL_TRAININGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns the user prefs\u0027 canoe coach file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Path getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Sets the user prefs\u0027 canoe coach file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void setCanoeCoachFilePath(Path canoeCoachFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Replaces canoe coach data with the data in {@code canoeCoach}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void setCanoeCoach(ReadOnlyCanoeCoach canoeCoach);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /** Returns the CanoeCoach */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    ReadOnlyCanoeCoach getCanoeCoach();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the canoe coach book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The student must exist in the canoe coach book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code student} must not already exist in the canoe coach book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code target} must exist in the canoe book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * existing student in the canoe coach book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void setStudentInUniqueStudentList(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Replaces the given training {@code target} with {@code editedTraining}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code target} must exist in the canoe book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * The student identity of {@code editedTraining} must not be the same as another"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * existing training in the canoe coach book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    void setTraining(Training target, Training editedTraining);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Adds the given Training Session."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param training to be added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    void addTraining(Training training);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns true if the Training Session already exists in the canoe coach book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param training to be checked."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    boolean hasTraining(Training training);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered training list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    ObservableList\u003cTraining\u003e getFilteredTrainingList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Deletes the specified Training Session."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param training to be deleted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    void deleteTraining(Training training);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Updates the filter of the filtered training list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void updateFilteredTrainingList(Predicate\u003cTraining\u003e predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 36,
      "Whleee": 23,
      "yejiadong": 12,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents the in-memory model of the canoe coach data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final CanoeCoach canoeCoach;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final FilteredList\u003cTraining\u003e filteredTrainings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Initializes a ModelManager with the given canoeCoach and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public ModelManager(ReadOnlyCanoeCoach canoeCoach, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireAllNonNull(canoeCoach, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        logger.fine(\"Initializing with canoe book: \" + canoeCoach + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.canoeCoach \u003d new CanoeCoach(canoeCoach);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.canoeCoach.getStudentList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        filteredTrainings \u003d new FilteredList\u003c\u003e(this.canoeCoach.getTrainingList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this(new CanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return userPrefs.getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void setCanoeCoachFilePath(Path canoeCoachFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(canoeCoachFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        userPrefs.setCanoeCoachFilePath(canoeCoachFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CanoeCoach \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void setCanoeCoach(ReadOnlyCanoeCoach canoeCoach) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.canoeCoach.resetData(canoeCoach);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public ReadOnlyCanoeCoach getCanoeCoach() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach.hasStudent(student);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.removeStudent(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.addStudent(student);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void setStudentInUniqueStudentList(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.setStudentInUniqueStudentList(target, editedStudent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void setTraining(Training target, Training editedTraining) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireAllNonNull(target, editedTraining);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.setTraining(target, editedTraining);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void addTraining(Training training) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.addTraining(training);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean hasTraining(Training training) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach.hasTraining(training);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void deleteTraining(Training training) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.removeTraining(training);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code versionedCanoeCoach}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public ObservableList\u003cTraining\u003e getFilteredTrainingList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return filteredTrainings;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void updateFilteredTrainingList(Predicate\u003cTraining\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        filteredTrainings.setPredicate(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach.equals(other.canoeCoach)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 43,
      "Whleee": 23,
      "yejiadong": 14,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/ReadOnlyCanoeCoach.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Unmodifiable view of a canoe coach book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public interface ReadOnlyCanoeCoach {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    ObservableList\u003cTraining\u003e getTrainingList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "Whleee": 2,
      "yejiadong": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Path getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private Path canoeCoachFilePath \u003d Paths.get(\"data\" , \"canoecoach.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        setCanoeCoachFilePath(newUserPrefs.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoachFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void setCanoeCoachFilePath(Path canoeCoachFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(canoeCoachFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.canoeCoachFilePath \u003d canoeCoachFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 canoeCoachFilePath.equals(o.canoeCoachFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return Objects.hash(guiSettings, canoeCoachFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + canoeCoachFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/AcademicYear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student\u0027s name in the canoe coach book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAcademicYear(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class AcademicYear {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            \"The Academic Year should only contain a number between 1 to 5.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The first character of the input must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @param academicYear A valid AcademicYear."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public AcademicYear(String academicYear) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(academicYear);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        checkArgument(isValidAcademicYear(academicYear), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        value \u003d academicYear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static boolean isValidAcademicYear(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                || (other instanceof AcademicYear // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 value.equals(((AcademicYear) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "Whleee": 55
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/AcademicYearMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code AcademicYear} value matches the value given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class AcademicYearMatchesPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final String academicYearValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public AcademicYearMatchesPredicate(String academicYearValue) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.academicYearValue \u003d academicYearValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return student.getAcademicYear().value.equals(academicYearValue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof AcademicYearMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 academicYearValue.equals(((AcademicYearMatchesPredicate) other).academicYearValue)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "sudogene": 27
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/AllMatchPredicateList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Tests that the searched parameters match all the predicates in the predicate list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * If the predicate list is empty, it defaults to false."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class AllMatchPredicateList implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final List\u003cPredicate\u003cStudent\u003e\u003e predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public AllMatchPredicateList(List\u003cPredicate\u003cStudent\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public AllMatchPredicateList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        predicates \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static AllMatchPredicateList of(Predicate\u003cStudent\u003e... predicates) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new AllMatchPredicateList(Arrays.asList(predicates));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean add(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return predicates.add(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return predicates.isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (predicates.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .allMatch(p -\u003e p.test(student));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof AllMatchPredicateList // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 predicates.equals(((AllMatchPredicateList) other).predicates)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 10,
      "sudogene": 42
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/AnyMatchPredicateList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Tests that the searched parameters match any of the predicates in the predicate list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * If the predicate list is empty, it defaults to false."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class AnyMatchPredicateList implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final List\u003cPredicate\u003cStudent\u003e\u003e predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public AnyMatchPredicateList(List\u003cPredicate\u003cStudent\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public AnyMatchPredicateList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        predicates \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static AnyMatchPredicateList of(Predicate\u003cStudent\u003e... predicates) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new AnyMatchPredicateList(Arrays.asList(predicates));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean add(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return predicates.add(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return predicates.isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (predicates.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .anyMatch(p -\u003e p.test(student));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof AnyMatchPredicateList // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 predicates.equals(((AnyMatchPredicateList) other).predicates)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 52
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/CommonTimeFinder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Gets a list of students and returns the latest dismissal time of all"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * students for all days."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CommonTimeFinder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final List\u003cStudent\u003e studentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private LocalTime latestMondayDismissalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private LocalTime latestTuesdayDismissalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private LocalTime latestWednesdayDismissalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private LocalTime latestThursdayDismissalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private LocalTime latestFridayDismissalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Constructs a {@code CommonTimeFinder} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param studentList List of students."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CommonTimeFinder(List\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.studentList \u003d studentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        latestMondayDismissalTime \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        latestTuesdayDismissalTime \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        latestWednesdayDismissalTime \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        latestThursdayDismissalTime \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        latestFridayDismissalTime \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Gets the latest common dismissal times of all students and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * returns them as a list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @return List of dismissal times."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public List\u003cLocalTime\u003e getCommonDismissalTimes() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        getCommonTimes();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestMondayDismissalTime,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestTuesdayDismissalTime,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestWednesdayDismissalTime,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestThursdayDismissalTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestFridayDismissalTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Searches through every student in the student list and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * gets the latest dismissal time for each day."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void getCommonTimes() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        for (Student student: studentList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (latestMondayDismissalTime.compareTo("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    student.getMondayDismissal().dismissalTime) \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestMondayDismissalTime \u003d student.getMondayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (latestTuesdayDismissalTime.compareTo("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    student.getTuesdayDismissal().dismissalTime) \u003c 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestTuesdayDismissalTime \u003d student.getTuesdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (latestWednesdayDismissalTime.compareTo("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    student.getWednesdayDismissal().dismissalTime) \u003c 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestWednesdayDismissalTime \u003d student.getWednesdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (latestThursdayDismissalTime.compareTo("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    student.getThursdayDismissal().dismissalTime) \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestThursdayDismissalTime \u003d student.getThursdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (latestFridayDismissalTime.compareTo("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    student.getFridayDismissal().dismissalTime) \u003c 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                latestFridayDismissalTime \u003d student.getFridayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 82
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student\u0027s email in the canoe coach book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/EmailContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Email} contains the keyword given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class EmailContainsKeywordPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public EmailContainsKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return student.getEmail().value.contains(keyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof EmailContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 keyword.equals(((EmailContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "sudogene": 26
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student\u0027s id in the canoe coach book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Id must be numeric and unique.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /** pads the Id value with leading spaces to be converted to zeroes */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String PADDING_FORMAT \u003d \"%1$3s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /** validates if the string is numeric */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"-?\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /** placeholder value */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String PLACEHOLDER_VALUE \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /** fields allowing auto-assignment and uniqueness of Id value */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private static int lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private static final Set\u003cString\u003e usedIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Constructs an {@code Id} with value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public Id(String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (!value.equals(PLACEHOLDER_VALUE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            Id.usedIds.add(value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            Id.lastUsedId \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Generates a new Id with auto-assigned value."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static Id newId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        lastUsedId++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String newIdValue \u003d String.valueOf(lastUsedId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new Id(newIdValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Returns true if a given string is a valid id."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return !Id.usedIds.contains(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static Id getPlaceHolderId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new Id(Id.PLACEHOLDER_VALUE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static int getLastUsedId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return lastUsedId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public Set\u003cString\u003e getUsedIds() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return usedIds;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 value.equals(((Id) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return String.format(PADDING_FORMAT, value)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .replace(\u0027 \u0027, \u00270\u0027);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 84,
      "Whleee": 2
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/IdMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Id} value matches the value given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class IdMatchesPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final String idValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public IdMatchesPredicate(String idValue) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.idValue \u003d idValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return student.getId().value.equals(idValue);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof IdMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 idValue.equals(((IdMatchesPredicate) other).idValue)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "sudogene": 26
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student\u0027s name in the canoe coach book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * The first character of the input must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student\u0027s phone number in the canoe coach book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/PhoneMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Phone} value matches the value given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class PhoneMatchesPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final String phoneValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public PhoneMatchesPredicate(String phoneValue) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.phoneValue \u003d phoneValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return student.getPhone().value.equals(phoneValue);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof PhoneMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 phoneValue.equals(((PhoneMatchesPredicate) other).phoneValue)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "sudogene": 23
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Student in the canoe coach book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final AcademicYear academicYear;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    // Dismissal Times"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Day mondayDismissal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Day tuesdayDismissal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Day wednesdayDismissal;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Day thursdayDismissal;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Day fridayDismissal;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    class TreeSetComparator implements Comparator\u003cLocalDateTime\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public int compare(LocalDateTime dateTime1, LocalDateTime dateTime2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return dateTime1.compareTo(dateTime2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //Collection of scheduled training dates tagged to the particular student"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final TreeSet\u003cLocalDateTime\u003e trainingSchedules \u003d new TreeSet\u003c\u003e(new TreeSetComparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Constructs the {@code Student} with a given id."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Student(Name name, Phone phone, Email email, AcademicYear academicYear, Set\u003cTag\u003e tags, Day mondayDismissal,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                   Day tuesdayDismissal, Day wednesdayDismissal, Day thursdayDismissal,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                   Day fridayDismissal, Id id) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireAllNonNull(name, phone, email, tags, academicYear, mondayDismissal, tuesdayDismissal, wednesdayDismissal,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                thursdayDismissal, fridayDismissal, id);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.mondayDismissal \u003d mondayDismissal;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.tuesdayDismissal \u003d tuesdayDismissal;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.wednesdayDismissal \u003d wednesdayDismissal;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.thursdayDismissal \u003d thursdayDismissal;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.fridayDismissal \u003d fridayDismissal;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Constructs the {@code Student} with a given id and training schedules."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Student(Name name, Phone phone, Email email, AcademicYear academicYear, Set\u003cTag\u003e tags, Day mondayDismissal,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                   Day tuesdayDismissal, Day wednesdayDismissal, Day thursdayDismissal,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                   Day fridayDismissal, List\u003cLocalDateTime\u003e trainingSchedules, Id id) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireAllNonNull(name, phone, email, tags, academicYear, mondayDismissal, tuesdayDismissal, wednesdayDismissal,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                thursdayDismissal, fridayDismissal, trainingSchedules, id);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.mondayDismissal \u003d mondayDismissal;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.tuesdayDismissal \u003d tuesdayDismissal;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.wednesdayDismissal \u003d wednesdayDismissal;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.thursdayDismissal \u003d thursdayDismissal;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.fridayDismissal \u003d fridayDismissal;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.trainingSchedules.addAll(trainingSchedules);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Clones a student."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public Student cloneStudent() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return new Student(getName(), getPhone(), getEmail(), getAcademicYear(), getTags(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                getMondayDismissal(), getTuesdayDismissal(), getWednesdayDismissal(), getThursdayDismissal(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                getFridayDismissal(), new ArrayList\u003c\u003e(getTrainingSchedule()), getId());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Creates a student with a new valid Id if it was constructed with placeholder Id."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * If the student already has a valid Id, the same student is returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public Student createStudentWithValidId() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        if (getId().equals(Id.getPlaceHolderId())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return new Student(getName(), getPhone(), getEmail(), getAcademicYear(), getTags(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                    getMondayDismissal(), getTuesdayDismissal(), getWednesdayDismissal(), getThursdayDismissal(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                    getFridayDismissal(), new ArrayList\u003c\u003e(getTrainingSchedule()), Id.newId());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Adds a training session to the student\u0027s schedule."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Training sessions are automatically sorted by their respective date and times."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param trainingDateTime LocalDateTime corresponding to the training\u0027s date and start time."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Duplicates are not allowed and will not be added."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addTraining(LocalDateTime trainingDateTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules.add(trainingDateTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Adds a list of training sessions to the student\u0027s schedule."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Training sessions are automatically sorted by their respective date and times."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param trainingDateTimes List of LocalDateTime corresponding to the trainings\u0027 dates and start times."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Duplicates are not allowed and will not be added."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addAllTraining(List\u003cLocalDateTime\u003e trainingDateTimes) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules.addAll(trainingDateTimes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks if student has a training scheduled at the specified date and start time."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param trainingDateTime LocalDateTime corresponding to the training\u0027s date and start time."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Specified training must exist in the student\u0027s training schedule."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return true If a training has been scheduled at the specified date and time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean containsTraining(LocalDateTime trainingDateTime) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return trainingSchedules.contains(trainingDateTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Removes a scheduled training from the student\u0027s training schedule."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param trainingDateTime LocalDateTime corresponding to the training\u0027s date and start time."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void removeTraining(LocalDateTime trainingDateTime) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (containsTraining(trainingDateTime)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            trainingSchedules.remove(trainingDateTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Removes all trainings scheduled for the student."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void removeAllTraining() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules.clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day getMondayDismissal() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return mondayDismissal;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day getTuesdayDismissal() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return tuesdayDismissal;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day getWednesdayDismissal() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return wednesdayDismissal;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day getThursdayDismissal() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return thursdayDismissal;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day getFridayDismissal() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return fridayDismissal;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public AcademicYear getAcademicYear() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns an immutable training schedule set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Set\u003cLocalDateTime\u003e getTrainingSchedule() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Collections.unmodifiableSet(trainingSchedules);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 otherStudent.getAcademicYear().equals(getAcademicYear())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 (otherStudent.getPhone().equals(getPhone()) || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getMondayDismissal().equals(getMondayDismissal())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getTuesdayDismissal().equals(getTuesdayDismissal())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getWednesdayDismissal().equals(getWednesdayDismissal())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getThursdayDismissal().equals(getThursdayDismissal())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getFridayDismissal().equals(getFridayDismissal())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 otherStudent.getAcademicYear().equals(getAcademicYear())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 otherStudent.getTrainingSchedule().equals(getTrainingSchedule());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Objects.hash(name, phone, email, academicYear, mondayDismissal, tuesdayDismissal, wednesdayDismissal,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                thursdayDismissal, fridayDismissal, tags, id, trainingSchedules);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .append(\" Id: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" Dismissal Times: \")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(getMondayDismissal())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(getTuesdayDismissal())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(getWednesdayDismissal())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(getThursdayDismissal())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(getFridayDismissal())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(\" Academic  Year: \")"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(getAcademicYear())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        builder.append(\" Training Schedules: \");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        getTrainingSchedule().forEach(builder::append);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns only the essential information of Students (Name, Id, Phone, Email, Academic Year)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return Name, Phone, Email, Academic Year"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String studentEssentialPrinter() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        builder.append(\"\\n\" + getName())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(\"\\nId: \")"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(\"\\nEmail: \")"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(\"\\nAcademic  Year: \")"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(getAcademicYear());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns whether a student has a training at a particular DateTime already"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean hasTrainingAtDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Has a training scheduled on the same date already"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (LocalDateTime training: trainingSchedules) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (LocalDate.from(training).isEqual(LocalDate.from(dateTime))) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Returns whether a student is able to attend a training at a particular DateTime"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public boolean isAvailableAtDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        DayOfWeek day \u003d dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        LocalTime queryTime \u003d LocalTime.from(dateTime);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        LocalTime studentTime;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentTime \u003d mondayDismissal.dismissalTime;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentTime \u003d tuesdayDismissal.dismissalTime;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentTime \u003d wednesdayDismissal.dismissalTime;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentTime \u003d thursdayDismissal.dismissalTime;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            studentTime \u003d fridayDismissal.dismissalTime;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            //Students do not have lessons on Saturday and Sunday, thus able to attend training."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns whether a student is able to attend all of his/her scheduled trainings"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean isAvailableForAllTrainingsScheduled() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        if (trainingSchedules.isEmpty()) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        boolean isAvailable \u003d true;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        for (LocalDateTime trainingSession: trainingSchedules) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (!isAvailableAtDateTime(trainingSession)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                isAvailable \u003d false;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return isAvailable;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 24,
      "sudogene": 37,
      "Whleee": 30,
      "kerkpy": 35,
      "yejiadong": 175,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/Training.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class Training {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Must be a valid date and time.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    //Used a TreeSet with Comparator to sort Students by increasing Unique ID values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final TreeSet\u003cStudent\u003e students \u003d new TreeSet\u003c\u003e(new StudentComparator());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Student Comparator class that implements the compare method to compare unique IDs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    class StudentComparator implements Comparator\u003cStudent\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public int compare(Student student1, Student student2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return Integer.parseInt(student1.getId().value)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    - Integer.parseInt(student2.getId().value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Constructor with only LocalDateTime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param dateTime of training"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Training(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Constructor with both LocalDateTime and a Set of Students."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Initialises Training with the specified set of students."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param dateTime of training"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param students set of students"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Training(LocalDateTime dateTime, Set\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Set\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this.students;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Adds the specified student to the Training Session."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also adds training\u0027s LocalDateTime to the student container"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param student to be added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (students.contains(student)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            this.students.add(student);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            student.addTraining(getDateTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Removes the specified student from the Training Session."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also removes training\u0027s LocalDateTime from the student container"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param student to be removed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void removeStudent(Student student) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Set\u003cStudent\u003e studentsCopy \u003d new HashSet\u003c\u003e(students);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (Student studentCheck : studentsCopy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (student.getId().equals(studentCheck.getId())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                students.remove(studentCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                removeDateTimeFromStudent(student);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Removes the training\u0027s date time from the student."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void removeDateTimeFromStudent(Student student) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        student.removeTraining(getDateTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks if specified student is already present inside of training list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param student to be checked"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return true if student is present inside of training schedule."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return getStudents().contains(student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks if specified student id is present inside of training list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param studentId to be checked"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return true if student id is present inside of training schedule."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean hasStudentId(Id studentId) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return getStudents().stream().map(student -\u003e student.getId()).anyMatch(id -\u003e id.equals(studentId));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Clears all students from the Training."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also removes the training date from students\u0027 training schedules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void clearStudents() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            removeDateTimeFromStudent(student);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.students.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean isSameTraining(Training training) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return dateTime.equals(training.getDateTime());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!(other instanceof Training)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Training otherTraining \u003d (Training) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return otherTraining.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 otherTraining.getStudents().equals(getStudents());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        final int prime \u003d 31;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        int result \u003d 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        result \u003d prime * result + dateTime.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        result \u003d prime * result + students.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return dateTime.toString().substring(0, 10) + \" \" + dateTime.toString().substring(11);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 7,
      "sudogene": 10,
      "Whleee": 113,
      "yejiadong": 30
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/TrainingMatchesIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Tests that a {@code Training} {@code Student}\u0027s {@code Id} matches the value given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TrainingMatchesIdPredicate implements Predicate\u003cTraining\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Id idValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public TrainingMatchesIdPredicate(Id idValue) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.idValue \u003d idValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean test(Training training) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return training.hasStudentId(idValue);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                || (other instanceof TrainingMatchesIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 idValue.equals(((TrainingMatchesIdPredicate) other).idValue)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 27
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/TrainingMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Tests that a {@code Training}\u0027s {@code dateTime} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class TrainingMatchesPredicate implements Predicate\u003cTraining\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final List\u003cLocalDateTime\u003e localDateTimes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public TrainingMatchesPredicate(List\u003cLocalDateTime\u003e localDateTimes) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.localDateTimes \u003d localDateTimes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean test(Training training) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return localDateTimes.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .anyMatch(localDateTime -\u003e localDateTime.equals(training.getDateTime()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                || (other instanceof TrainingMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                \u0026\u0026 localDateTimes.equals(((TrainingMatchesPredicate) other).localDateTimes)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 30
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "yejiadong": 133
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/UniqueTrainingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.DuplicateTrainingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.TrainingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * A list of trainings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * A training is considered unique by comparing using {@code Training#isSameTraining(Training)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * updating of trainings uses Training#isSameTraining(Training) for equality so as to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * ensure that the training being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTrainingList. However, the removal of a training uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Training#equals(Object) so as to ensure that the training with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * @see Training#isSameTraining(Training)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class UniqueTrainingList implements Iterable\u003cTraining\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final ObservableList\u003cTraining\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final ObservableList\u003cTraining\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns true if the list contains an equivalent training as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean contains(Training toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTraining);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Adds a training to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * The training must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void add(Training toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new DuplicateTrainingException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Replaces the training {@code target} in the list with {@code editedTraining}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * The training identity of {@code editedTraining} must not be the same as another existing training in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void setTraining(Training target, Training editedTraining) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireAllNonNull(target, editedTraining);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            throw new TrainingNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        internalList.set(index, editedTraining);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Removes the equivalent training from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * The training must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void remove(Training toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new TrainingNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Replaces the contents of this list with {@code trainings}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * {@code trainings} must not contain duplicate trainings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void setTrainings(List\u003cTraining\u003e trainings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        requireAllNonNull(trainings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!trainingsAreUnique(trainings)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new DuplicateTrainingException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        internalList.setAll(trainings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public ObservableList\u003cTraining\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Iterator\u003cTraining\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                || (other instanceof UniqueTrainingList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTrainingList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Returns true if {@code trainings} contains only unique trainings."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private boolean trainingsAreUnique(List\u003cTraining\u003e trainings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (int i \u003d 0; i \u003c trainings.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c trainings.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                if (trainings.get(i).isSameTraining(trainings.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "Whleee": 124
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 10
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/exceptions/DuplicateTrainingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Signals that the operation will result in duplicate Trainings (Trainings are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DuplicateTrainingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public DuplicateTrainingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        super(\"Operation would result in duplicate Trainings\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "Whleee": 10
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 5
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/exceptions/TrainingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TrainingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "Whleee": 4
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a Student\u0027s dismissal time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDismissalTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public enum DayOfWeek {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            \"Dismissal Times should only contain numbers, and it should be in HHmm format\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Time must be in HHmm format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public final LocalTime dismissalTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Day(String dismissalTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(dismissalTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkArgument(isValidDismissalTime(dismissalTime), Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.dismissalTime \u003d formatTime(dismissalTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns true if a given string is a valid dismissal time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static boolean isValidDismissalTime(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the formatted LocalTime object from a given string time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Time string passed in must be in the HHmm format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param time String to be parsed into LocalTime object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return LocalTime object representing the specified time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static LocalTime formatTime(String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkArgument(isValidDismissalTime(time));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return dismissalTime.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 dismissalTime.equals(((Day) other).dismissalTime)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return dismissalTime.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 75
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Friday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents Friday in a week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Friday extends Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_FRIDAY_DISMISSAL \u003d \"1500\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the dismissal time of the {@code Friday}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Friday(String dismissalTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(dismissalTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 1,
      "yejiadong": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/FridayDismissalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s dismissal time for Friday is before the query time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class FridayDismissalPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final LocalTime queryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public FridayDismissalPredicate(LocalTime queryTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.queryTime \u003d queryTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        LocalTime studentTime \u003d student.getFridayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof FridayDismissalPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 queryTime.equals(((FridayDismissalPredicate) other).queryTime)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Monday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents Monday in a week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Monday extends Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_MONDAY_DISMISSAL \u003d \"1500\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the dismissal time of the {@code Monday}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Monday(String dismissalTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(dismissalTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 1,
      "yejiadong": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/MondayDismissalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s dismissal time for Monday is before the query time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class MondayDismissalPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final LocalTime queryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public MondayDismissalPredicate(LocalTime queryTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.queryTime \u003d queryTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        LocalTime studentTime \u003d student.getMondayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof MondayDismissalPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 queryTime.equals(((MondayDismissalPredicate) other).queryTime)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Thursday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents Thursday in a week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Thursday extends Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_THURSDAY_DISMISSAL \u003d \"1500\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the dismissal time of the {@code Thursday}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Thursday(String dismissalTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(dismissalTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 1,
      "yejiadong": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/ThursdayDismissalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s dismissal time for Thursday is before the query time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class ThursdayDismissalPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final LocalTime queryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public ThursdayDismissalPredicate(LocalTime queryTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.queryTime \u003d queryTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        LocalTime studentTime \u003d student.getThursdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof ThursdayDismissalPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 queryTime.equals(((ThursdayDismissalPredicate) other).queryTime)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Tuesday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents Tuesday in a week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Tuesday extends Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_TUESDAY_DISMISSAL \u003d \"1500\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the dismissal time of the {@code Tuesday}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Tuesday(String dismissalTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(dismissalTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 1,
      "yejiadong": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/TuesdayDismissalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s dismissal time for Tuesday is before the query time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class TuesdayDismissalPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final LocalTime queryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public TuesdayDismissalPredicate(LocalTime queryTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.queryTime \u003d queryTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        LocalTime studentTime \u003d student.getTuesdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof TuesdayDismissalPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 queryTime.equals(((TuesdayDismissalPredicate) other).queryTime)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/Wednesday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents Wednesday in a week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Wednesday extends Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_WEDNESDAY_DISMISSAL \u003d \"1500\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the dismissal time of the {@code Wednesday}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dismissalTime A valid dismissal time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Wednesday(String dismissalTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(dismissalTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 1,
      "yejiadong": 21
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/student/time/WednesdayDismissalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": " * Tests that a {@code Student}\u0027s dismissal time for Wednesday is before the query time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class WednesdayDismissalPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final LocalTime queryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public WednesdayDismissalPredicate(LocalTime queryTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.queryTime \u003d queryTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        LocalTime studentTime \u003d student.getWednesdayDismissal().dismissalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return studentTime.equals(queryTime) || studentTime.isBefore(queryTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                || (other instanceof WednesdayDismissalPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                \u0026\u0026 queryTime.equals(((WednesdayDismissalPredicate) other).queryTime)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a Tag in the canoe coach book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Friday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Monday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Thursday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Tuesday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Wednesday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Contains utility methods for populating {@code CanoeCoach} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student alex \u003d new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new AcademicYear(\"2\"), getTagSet(\"friends\"), new Monday(\"1500\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new Tuesday(\"1500\"), new Wednesday(\"1500\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new Thursday(\"1500\"), new Friday(\"1500\"), Id.newId());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student bernice \u003d new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new AcademicYear(\"3\"), getTagSet(\"colleagues\", \"friends\"), new Monday(\"1500\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new Tuesday(\"1500\"), new Wednesday(\"1500\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new Thursday(\"1500\"), new Friday(\"1500\"), Id.newId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student charlotte \u003d new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + \"@example.com\"), new AcademicYear(\"5\"), getTagSet(\"neighbours\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new Monday(\"1500\"), new Tuesday(\"1500\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new Wednesday(\"1500\"), new Thursday(\"1500\"), new Friday(\"1500\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                Id.newId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student david \u003d new Student(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new AcademicYear(\"1\"), getTagSet(\"family\"), new Monday(\"1500\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new Tuesday(\"1500\"), new Wednesday(\"1500\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        new Thursday(\"1500\"), new Friday(\"1500\"), Id.newId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student irfan \u003d new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new AcademicYear(\"4\"), getTagSet(\"classmates\"), new Monday(\"1500\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new Tuesday(\"1500\"), new Wednesday(\"1500\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        new Thursday(\"1500\"), new Friday(\"1500\"), Id.newId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student roy \u003d new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new AcademicYear(\"1\"), getTagSet(\"colleagues\"), new Monday(\"1500\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        new Tuesday(\"1500\"), new Wednesday(\"1500\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        new Thursday(\"1500\"), new Friday(\"1500\"), Id.newId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            alex, bernice, charlotte, david, irfan, roy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static ReadOnlyCanoeCoach getCanoeCoachBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach sampleAb \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns a training schedule list containing the list of LocalDateTimes given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getTrainingSchedule(LocalDateTime... dateTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(dateTime)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 18,
      "sudogene": 1,
      "kerkpy": 10,
      "yejiadong": 30,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/canoe/model/util/StudentTrainingSessionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.TrainingMatchesPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class StudentTrainingSessionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getConflictsInStudentTrainingSchedule("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            Set\u003cLocalDateTime\u003e trainingSchedules, Student student) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalDateTime\u003e conflicts \u003d trainingSchedules"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .filter(training -\u003e !student.isAvailableAtDateTime(training))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return conflicts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static List\u003cTraining\u003e getTrainingListFromDateTimeList(List\u003cLocalDateTime\u003e localDateTimes, Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        TrainingMatchesPredicate predicate \u003d new TrainingMatchesPredicate(localDateTimes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        model.updateFilteredTrainingList(predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return model.getFilteredTrainingList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 28
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/CanoeCoachStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a storage for {@link CanoeCoach}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public interface CanoeCoachStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Path getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns CanoeCoach data as a {@link ReadOnlyCanoeCoach}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see #getCanoeCoachFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Saves the given {@link ReadOnlyCanoeCoach} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param canoeCoach cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see #saveCanoeCoach(ReadOnlyCanoeCoach)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 48
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Friday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Monday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Thursday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Tuesday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Wednesday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final String academicYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String mondayDismissal;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String tuesdayDismissal;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String wednesdayDismissal;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String thursdayDismissal;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String fridayDismissal;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final List\u003cLocalDateTime\u003e trainingSchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                              @JsonProperty(\"academicYear\") String academicYear,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"monday\") String mondayDismissal,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"tuesday\") String tuesdayDismissal,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"wednesday\") String wednesdayDismissal,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"thursday\") String thursdayDismissal,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                              @JsonProperty(\"friday\") String fridayDismissal,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                              @JsonProperty(\"trainingSchedule\") List\u003cLocalDateTime\u003e trainingSchedule,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                              @JsonProperty(\"id\") String id) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.mondayDismissal \u003d mondayDismissal;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.tuesdayDismissal \u003d tuesdayDismissal;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.wednesdayDismissal \u003d wednesdayDismissal;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.thursdayDismissal \u003d thursdayDismissal;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.fridayDismissal \u003d fridayDismissal;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (trainingSchedule !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.trainingSchedule.addAll(trainingSchedule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        id \u003d source.getId().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        academicYear \u003d source.getAcademicYear().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        mondayDismissal \u003d source.getMondayDismissal().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tuesdayDismissal \u003d source.getTuesdayDismissal().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        wednesdayDismissal \u003d source.getWednesdayDismissal().toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        thursdayDismissal \u003d source.getThursdayDismissal().toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        fridayDismissal \u003d source.getFridayDismissal().toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedule.addAll(source.getTrainingSchedule().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (academicYear \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    AcademicYear.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (!AcademicYear.isValidAcademicYear(academicYear)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalValueException(AcademicYear.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        final AcademicYear modelAcademicYear \u003d new AcademicYear(academicYear);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (mondayDismissal \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(mondayDismissal)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Day monday \u003d new Monday(mondayDismissal);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (tuesdayDismissal \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(tuesdayDismissal)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Day tuesday \u003d new Tuesday(tuesdayDismissal);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (wednesdayDismissal \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(wednesdayDismissal)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Day wednesday \u003d new Wednesday(wednesdayDismissal);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (thursdayDismissal \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(thursdayDismissal)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Day thursday \u003d new Thursday(thursdayDismissal);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (fridayDismissal \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!Day.isValidDismissalTime(fridayDismissal)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Day friday \u003d new Friday(fridayDismissal);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        final Id studentId \u003d new Id(id);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new Student(modelName, modelPhone, modelEmail, modelAcademicYear,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            modelTags, monday, tuesday, wednesday, thursday, friday, studentId);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        student.addAllTraining(trainingSchedule);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return student;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 15,
      "sudogene": 8,
      "Whleee": 16,
      "kerkpy": 1,
      "yejiadong": 89,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonAdaptedTraining.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Jackson-friendly version of {@link Training}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "class JsonAdaptedTraining {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Training\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Constructs a {@code JsonAdaptedTraining} with the given training details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public JsonAdaptedTraining(@JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                              @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            this.dateTime \u003d LocalDateTime.parse(dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (students !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                this.students.addAll(students);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Converts a given {@code Training} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public JsonAdaptedTraining(Training source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        dateTime \u003d source.getDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        students.addAll(source.getStudents().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Converts this Jackson-friendly adapted training object into the model\u0027s {@code Training} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted training."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Training toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        final List\u003cStudent\u003e studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (JsonAdaptedStudent student : students) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            studentList.add(student.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new IllegalValueException(String"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                    .format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        final LocalDateTime modelDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Set\u003cStudent\u003e studentSet \u003d new HashSet\u003c\u003e(studentList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new Training(modelDateTime, studentSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "Whleee": 74
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonCanoeCoachStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * A class to access CanoeCoach data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class JsonCanoeCoachStorage implements CanoeCoachStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCanoeCoachStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public JsonCanoeCoachStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return readCanoeCoach(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Similar to {@link #readCanoeCoach()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Optional\u003cJsonSerializableCanoeCoach\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                filePath, JsonSerializableCanoeCoach.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        saveCanoeCoach(canoeCoach, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Similar to {@link #saveCanoeCoach(ReadOnlyCanoeCoach)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        requireNonNull(canoeCoach);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCanoeCoach(canoeCoach), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 24,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonSerializableCanoeCoach.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * An Immutable CanoeCoach that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "@JsonRootName(value \u003d \"canoecoach\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class JsonSerializableCanoeCoach {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRAINING \u003d \"Training list contains duplicate Training Session(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private final List\u003cJsonAdaptedTraining\u003e trainings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Constructs a {@code JsonSerializableCanoeCoach} with the given students."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public JsonSerializableCanoeCoach(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                                      @JsonProperty(\"trainings\") List\u003cJsonAdaptedTraining\u003e trainings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.trainings.addAll(trainings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Converts a given {@code ReadOnlyCanoeCoach} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCanoeCoach}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public JsonSerializableCanoeCoach(ReadOnlyCanoeCoach source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainings.addAll(source.getTrainingList().stream().map(JsonAdaptedTraining::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Converts this canoe coach book into the model\u0027s {@code CanoeCoach} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CanoeCoach toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach canoeCoach \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (canoeCoach.hasStudent(student)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            canoeCoach.addStudent(student);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (JsonAdaptedTraining jsonAdaptedTraining : trainings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            Training training \u003d jsonAdaptedTraining.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            if (canoeCoach.hasTraining(training)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRAINING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            canoeCoach.addTraining(training);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 22,
      "Whleee": 11,
      "yejiadong": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public interface Storage extends CanoeCoachStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Path getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Manages storage of CanoeCoach data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private CanoeCoachStorage canoeCoachStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code CanoeCoachStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public StorageManager(CanoeCoachStorage canoeCoachStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.canoeCoachStorage \u003d canoeCoachStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CanoeCoach methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoachStorage.getCanoeCoachFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return readCanoeCoach(canoeCoachStorage.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public Optional\u003cReadOnlyCanoeCoach\u003e readCanoeCoach(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoachStorage.readCanoeCoach(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        saveCanoeCoach(canoeCoach, canoeCoachStorage.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoachStorage.saveCanoeCoach(canoeCoach, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/canoe/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Represents a storage for {@link seedu.canoe.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Saves the given {@link seedu.canoe.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "         * @see seedu.canoe.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-f10-1.github.io/tp/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private TrainingListPanel trainingListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private StackPane trainingListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        //This is a placeholder."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainingListPanel \u003d new TrainingListPanel(logic.getFilteredTrainingList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        trainingListPanelPlaceholder.getChildren().add(trainingListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see seedu.canoe.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "Whleee": 1,
      "kerkpy": 5,
      "yejiadong": 6,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.Separator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CanoeCoach level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private Label academicYear;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Label dismissalTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private FlowPane dismissalTimes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Label trainingTag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private FlowPane trainingSchedules;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        studentId.setText(\"ID: \" + student.getId());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        academicYear.setText(\"Academic Year: \" + student.getAcademicYear().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTime.setText(\"Dismissal Times: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Label mondayDismissal \u003d new Label();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Label tuesdayDismissal \u003d new Label();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Label wednesdayDismissal \u003d new Label();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Label thursdayDismissal \u003d new Label();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Label fridayDismissal \u003d new Label();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        mondayDismissal.setText(\"Monday: \" + student.getMondayDismissal().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tuesdayDismissal.setText(\"Tuesday: \" + student.getTuesdayDismissal().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        wednesdayDismissal.setText(\"Wednesday: \" + student.getWednesdayDismissal().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        thursdayDismissal.setText(\"Thursday: \" + student.getThursdayDismissal().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        fridayDismissal.setText(\"Friday: \" + student.getFridayDismissal().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTimes.getChildren().add(mondayDismissal);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTimes.getChildren().add(tuesdayDismissal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTimes.getChildren().add(wednesdayDismissal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTimes.getChildren().add(thursdayDismissal);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dismissalTimes.getChildren().add(fridayDismissal);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Separator trainingSeparator \u003d new Separator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Separator dismissalTimesSeparator \u003d new Separator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingTag.setText(\"Trainings Scheduled (Most recent upcoming 3): \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        student.getTrainingSchedule().stream().filter(dateTime -\u003e dateTime.isAfter(LocalDateTime.now())).limit(3)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .forEach(trainingSchedule -\u003e trainingSchedules.getChildren()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        .add(new Label(trainingSchedule.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")))));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "sudogene": 4,
      "Whleee": 2,
      "yejiadong": 49,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "yejiadong": 46
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/TrainingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.Separator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerkpy"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerkpy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "public class TrainingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String FXML \u003d \"TrainingListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CanoeCoach level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public final Training training;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private HBox cardPane2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private FlowPane students;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingCard(Training training, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.training \u003d training;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Separator trainingCardSeparator \u003d new Separator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String day \u003d training.getDateTime().getDayOfWeek().getDisplayName(TextStyle.SHORT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                Locale.getDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        name.setText(\"Training on: \" + training.getDateTime().format(formatter)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + \" (\" + day + \")\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        training.getStudents().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .sorted(Comparator.comparing(student -\u003e student.getName().toString()))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .forEach(student -\u003e students.getChildren().add(new Label(student.studentEssentialPrinter())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        if (!(other instanceof TrainingCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        TrainingCard card \u003d (TrainingCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                \u0026\u0026 training.equals(card.training);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "Whleee": 20,
      "kerkpy": 55,
      "yejiadong": 2
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/TrainingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": " * Panel containing the list of trainings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerkpy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "public class TrainingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String FXML \u003d \"TrainingListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TrainingListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private ListView\u003cTraining\u003e trainingListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Creates a {@code TrainingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingListPanel(ObservableList\u003cTraining\u003e trainingList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainingListView.setItems(trainingList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        trainingListView.setCellFactory(listView -\u003e new TrainingListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Training} using a {@code TrainingCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    class TrainingListViewCell extends ListCell\u003cTraining\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        protected void updateItem(Training training, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            super.updateItem(training, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            if (empty || training \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                setGraphic(new TrainingCard(training, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "Whleee": 12,
      "kerkpy": 34
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/canoe_coach.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/canoe/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CanoE-COACH\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    \u003cImage url\u003d\"@/images/canoe_coach.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"studentList\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                  \u003cVBox fx:id\u003d\"trainingList\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"trainingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "kerkpy": 19,
      "yejiadong": 3,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "      \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "      \u003cLabel fx:id\u003d\"academicYear\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$academicYear\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cSeparator fx:id\u003d\"trainingSeparator\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cLabel fx:id\u003d\"trainingTag\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$trainingTag\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"trainingSchedules\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cSeparator fx:id\u003d\"dismissalTimeSeparator\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cLabel fx:id\u003d\"dismissalTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dismissalTime\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"dismissalTimes\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sudogene": 1,
      "Whleee": 1,
      "kerkpy": 9,
      "yejiadong": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerkpy": 1,
      "yejiadong": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TrainingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "\u003cHBox id\u003d\"cardPane2\" fx:id\u003d\"cardPane2\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "      \u003cSeparator fx:id\u003d\"trainingCardSeparator\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"students\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Whleee": 2,
      "yejiadong": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/TrainingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "  \u003cListView fx:id\u003d\"trainingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerkpy": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/canoe/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/canoe_coach.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/canoe/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.ACADEMICYEAR_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.JsonCanoeCoachStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonCanoeCoachStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new JsonCanoeCoachStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Setup LogicManager with JsonCanoeCoachIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonCanoeCoachStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new JsonCanoeCoachIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ACADEMICYEAR_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().withTrainingSchedules().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static class JsonCanoeCoachIoExceptionThrowingStub extends JsonCanoeCoachStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        private JsonCanoeCoachIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public void saveCanoeCoach(ReadOnlyCanoeCoach canoeCoach, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 32,
      "sudogene": 1,
      "Whleee": 1,
      "yejiadong": 5,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Student studentInList \u003d model.getCanoeCoach().getStudentList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 11,
      "yejiadong": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public Path getCanoeCoachFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public void setCanoeCoachFilePath(Path canoeCoachFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public void addTraining(Training training) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public boolean hasTraining(Training training) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public void deleteTraining(Training training) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public void setCanoeCoach(ReadOnlyCanoeCoach canoeCoach) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public ReadOnlyCanoeCoach getCanoeCoach() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public ObservableList\u003cTraining\u003e getFilteredTrainingList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public void setStudentInUniqueStudentList(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        public void setTraining(Training target, Training editedTraining) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public void updateFilteredTrainingList(Predicate\u003cTraining\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        public ReadOnlyCanoeCoach getCanoeCoach() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            return new CanoeCoach();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 23,
      "Whleee": 25,
      "yejiadong": 38,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/AddStudentToTrainingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_ID_ARRAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_STRINGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_STRINGS3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_6;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_TRAINING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_SECOND_TRAINING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_THIRD_TRAINING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.TypicalStudentsInTypicalTrainings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class AddStudentToTrainingCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalStudentsInTypicalTrainings.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new AddStudentToTrainingCommand(null, VALID_ID_ARRAY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentAcceptedByModelAndDuplicate_addSuccessfulAndFail() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d addStudentToTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(AddStudentToTrainingCommand.MESSAGE_ADD_STUDENT_SUCCESS, VALID_ID_STRINGS),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should have dateTime added to his field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //One student Jonas inside of the training container"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain JONAS too"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_DUPLICATE_STUDENTS_IN_TRAINING, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                addStudentToTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_multipleStudentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d addStudentToTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(AddStudentToTrainingCommand.MESSAGE_ADD_STUDENT_SUCCESS, VALID_ID_STRINGS3),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 1 should have dateTime added to his field"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 2 should have dateTime added to his field"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(1).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 3 should have dateTime added to his field"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(2).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Three students inside of the training container"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain student1 too"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain student2 too"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(1)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain student3 too"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(2)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_DUPLICATE_STUDENTS_IN_TRAINING, () -\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                addStudentToTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentInvalidIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_SECOND_TRAINING, INVALID_ID_ARRAY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                addStudentToTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should not have dateTime added to his field"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_6));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student Jonas should not be inside of the training container"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(1).getStudents().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain JONAS too"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(1).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_trainingInvalidIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_THIRD_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                addStudentToTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentDismissalTimeOver_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_SECOND_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, AddStudentToTrainingCommand.MESSAGE_STUDENT_UNAVAILABLE, () -\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                addStudentToTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should not have dateTime added to his field"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_6));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student Jonas should not be inside of the training container"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(1).getStudents().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain JONAS too"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(1).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AddStudentToTrainingCommand addStudent1Command \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AddStudentToTrainingCommand addStudent12Command \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertTrue(addStudent1Command.equals(addStudent1Command));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommandCopy \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertTrue(addStudent1Command.equals(addStudentToTrainingCommandCopy));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(addStudent1Command.equals(1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(addStudent1Command.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(addStudent1Command.equals(addStudent12Command));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 19,
      "Whleee": 49,
      "yejiadong": 88
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.setCanoeCoach(new CanoeCoach());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String VALID_ACADEMICYEAR_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String VALID_ACADEMICYEAR_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_MONDAY_AMY \u003d \"1500\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_TUESDAY_AMY \u003d \"1500\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_WEDNESDAY_AMY \u003d \"1500\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_THURSDAY_AMY \u003d \"1500\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_FRIDAY_AMY \u003d \"1500\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_MONDAY_BOB \u003d \"1500\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_TUESDAY_BOB \u003d \"1500\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_WEDNESDAY_BOB \u003d \"1500\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_THURSDAY_BOB \u003d \"1500\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String VALID_FRIDAY_BOB \u003d \"1500\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String VALID_ID \u003d \"1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String VALID_ID_STRINGS \u003d \"1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String VALID_ID_STRINGS3 \u003d \"1 2 3\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String[] VALID_ID_ARRAY \u003d new String[] {\"1\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String[] INVALID_ID_ARRAY \u003d new String[] {\"9\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String[] VALID_ID_ARRAY2 \u003d new String[]{\"1\", \"2\"};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String[] VALID_ID_ARRAY3 \u003d new String[]{\"1\", \"2\", \"3\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String ACADEMICYEAR_DESC_AMY \u003d \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + VALID_ACADEMICYEAR_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String ACADEMICYEAR_DESC_BOB \u003d \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + VALID_ACADEMICYEAR_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String MONDAY_DESC_AMY \u003d \" \" + PREFIX_MONDAY_DISMISSAL + VALID_MONDAY_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String TUESDAY_DESC_AMY \u003d \" \" + PREFIX_TUESDAY_DISMISSAL + VALID_TUESDAY_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String WEDNESDAY_DESC_AMY \u003d \" \" + PREFIX_WEDNESDAY_DISMISSAL + VALID_WEDNESDAY_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String THURSDAY_DESC_AMY \u003d \" \" + PREFIX_THURSDAY_DISMISSAL + VALID_THURSDAY_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String FRIDAY_DESC_AMY \u003d \" \" + PREFIX_FRIDAY_DISMISSAL + VALID_FRIDAY_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String MONDAY_DESC_BOB \u003d \" \" + PREFIX_MONDAY_DISMISSAL + VALID_MONDAY_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String TUESDAY_DESC_BOB \u003d \" \" + PREFIX_TUESDAY_DISMISSAL + VALID_TUESDAY_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String WEDNESDAY_DESC_BOB \u003d \" \" + PREFIX_WEDNESDAY_DISMISSAL + VALID_WEDNESDAY_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String THURSDAY_DESC_BOB \u003d \" \" + PREFIX_THURSDAY_DISMISSAL + VALID_THURSDAY_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String FRIDAY_DESC_BOB \u003d \" \" + PREFIX_FRIDAY_DISMISSAL + VALID_FRIDAY_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String INVALID_ACADEMICYEAR_DESC \u003d \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            + PREFIX_ACADEMIC_YEAR + \"1f\"; // \u0027f\u0027 not allowed in academic year"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .withAcademicYear(VALID_ACADEMICYEAR_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .withAcademicYear(VALID_ACADEMICYEAR_BOB)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                .withId(VALID_ID).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * - the canoe book, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach expectedCanoeCoach \u003d new CanoeCoach(actualModel.getCanoeCoach());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(expectedCanoeCoach, actualModel.getCanoeCoach());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * {@code model}\u0027s canoe book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 23,
      "sudogene": 3,
      "Whleee": 19,
      "kerkpy": 20,
      "yejiadong": 18,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/CommonTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYearMatchesPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AnyMatchPredicateList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CommonTimeCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class CommonTimeCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_zeroKeywords_defaultDismissalTimes() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 15:00\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 15:00\\n\" + \"Wednesday: 15:00\\n\" + \"Thursday: 15:00\\n\" + \"Friday: 15:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AcademicYearMatchesPredicate academicYearPredicate \u003d new AcademicYearMatchesPredicate(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, academicYearPredicate)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_oneNameKeyword_oneStudentMatchedDismissalTimes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 15:00\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 15:00\\n\" + \"Wednesday: 15:00\\n\" + \"Thursday: 17:00\\n\" + \"Friday: 15:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Alice\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleNameKeywords_aLlMatchLatestDismissalTimes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 16:21\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 15:00\\n\" + \"Wednesday: 18:00\\n\" + \"Thursday: 17:00\\n\" + \"Friday: 15:00\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Alice Benson Daniel\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_oneAcademicYearKeyword_matchedAcademicYearLatestDismissalTimes() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 15:00\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 16:23\\n\" + \"Wednesday: 15:00\\n\" + \"Thursday: 17:00\\n\" + \"Friday: 15:00\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AcademicYearMatchesPredicate academicYearPredicate \u003d new AcademicYearMatchesPredicate(\"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList(Arrays.asList(academicYearPredicate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleNameKeywordsSameAcademicYear_allMatchLatestDismissalTimes() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 15:00\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 16:23\\n\" + \"Wednesday: 15:00\\n\" + \"Thursday: 17:00\\n\" + \"Friday: 15:00\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Alice Kunz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AcademicYearMatchesPredicate academicYearPredicate \u003d new AcademicYearMatchesPredicate(\"1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, academicYearPredicate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleNameKeywordsDifferentAcademicYear_allMatchLatestDismissalTimes() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 15:00\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 16:23\\n\" + \"Wednesday: 17:45\\n\" + \"Thursday: 17:00\\n\" + \"Friday: 17:12\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Daniel Best\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AcademicYearMatchesPredicate academicYearPredicate \u003d new AcademicYearMatchesPredicate(\"1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, academicYearPredicate)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand command \u003d new CommonTimeCommand(predicateList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicateList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, DANIEL, FIONA, GEORGE), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void commonDismissalTimesToString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d \"Monday: 12:34\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                + \"Tuesday: 20:42\\n\" + \"Wednesday: 16:59\\n\" + \"Thursday: 09:01\\n\" + \"Friday: 11:20\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        LocalTime mondayDismissalTime \u003d LocalTime.of(12, 34);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        LocalTime tuesdayDismissalTime \u003d LocalTime.of(20, 42);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        LocalTime wednesdayDismissalTime \u003d LocalTime.of(16, 59);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        LocalTime thursdayDismissalTime \u003d LocalTime.of(9, 01);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        LocalTime fridayDismissalTime \u003d LocalTime.of(11, 20);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalTime\u003e commonDismissalTimes \u003d Arrays.asList("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                mondayDismissalTime,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                tuesdayDismissalTime,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                wednesdayDismissalTime,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                thursdayDismissalTime,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                fridayDismissalTime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate dummyPredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AnyMatchPredicateList predicateList \u003d new AnyMatchPredicateList(Arrays.asList(dummyPredicate));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(expectedMessage,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new CommonTimeCommand(predicateList).commonDismissalTimesToString(commonDismissalTimes));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 141
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of canoe book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCanoeCoach().getStudentList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 17,
      "yejiadong": 22,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/DeleteStudentFromTrainingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_ID_ARRAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_ARRAY3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_STRINGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ID_STRINGS3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_TRAINING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_THIRD_TRAINING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.TypicalStudentsInTypicalTrainings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DeleteStudentFromTrainingCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalStudentsInTypicalTrainings.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_STUDENT, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new DeleteStudentFromTrainingCommand(null, VALID_ID_ARRAY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentAcceptedByModelNoStudent_removeSuccessfulAndFail() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudentFromTrainingCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, DeleteStudentFromTrainingCommand.MESSAGE_INVALID_STUDENT, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                deleteStudentFromTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d addStudentToTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(AddStudentToTrainingCommand.MESSAGE_ADD_STUDENT_SUCCESS, VALID_ID_STRINGS),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should have dateTime added to his field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //One student Jonas inside of the training container"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain JONAS too"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult2 \u003d deleteStudentFromTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(DeleteStudentFromTrainingCommand.MESSAGE_DELETE_STUDENT_SUCCESS, VALID_ID_STRINGS),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult2.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should not have dateTime in his field anymore"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Nobody inside of the training container"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain JONAS too"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_multipleStudentAcceptedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d addStudentToTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(AddStudentToTrainingCommand.MESSAGE_ADD_STUDENT_SUCCESS, VALID_ID_STRINGS3),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudentFromTrainingCommand \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult2 \u003d deleteStudentFromTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(String.format(DeleteStudentFromTrainingCommand.MESSAGE_DELETE_STUDENT_SUCCESS, VALID_ID_STRINGS3),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                commandResult2.getFeedbackToUser());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 1 should not have dateTime added to his field"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 2 should not have dateTime added to his field"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(1).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student 3 should not have dateTime added to his field"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(2).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //0 students inside of the training container"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain student1 too"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain student2 too"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(1)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should not contain student3 too"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(2)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, DeleteStudentFromTrainingCommand.MESSAGE_INVALID_STUDENT, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                deleteStudentFromTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_studentInvalidIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddStudentToTrainingCommand addStudentToTrainingCommand \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddStudentToTrainingCommand(INDEX_FIRST_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        CommandResult commandResult \u003d addStudentToTrainingCommand.execute(getModel());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudentFromTrainingCommand \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_TRAINING, INVALID_ID_ARRAY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                deleteStudentFromTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student should still have dateTime in his field"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().get(0).containsTraining(VALID_LOCAL_DATE_TIME_5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Student Jonas should be inside of the training container"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(getModel().getFilteredTrainingList().get(0).getStudents().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Training class should contain JONAS too"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(getModel().getFilteredTrainingList().get(0).getStudents().contains(getModel()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .getFilteredStudentList().get(0)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_trainingInvalidIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudentFromTrainingCommand \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_THIRD_TRAINING, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                deleteStudentFromTrainingCommand.execute(getModel()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudent1Command \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_STUDENT, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudent12Command \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_STUDENT, VALID_ID_ARRAY2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertTrue(deleteStudent1Command.equals(deleteStudent1Command));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DeleteStudentFromTrainingCommand deleteStudentFromTrainingCommandCopy \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new DeleteStudentFromTrainingCommand(INDEX_FIRST_STUDENT, VALID_ID_ARRAY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertTrue(deleteStudent1Command.equals(deleteStudentFromTrainingCommandCopy));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(deleteStudent1Command.equals(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(deleteStudent1Command.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertFalse(deleteStudent1Command.equals(deleteStudent12Command));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 18,
      "Whleee": 48,
      "yejiadong": 99
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/DeleteTrainingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_TRAINING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalTraining.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class DeleteTrainingCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Training trainingToDelete \u003d model.getFilteredTrainingList().get(INDEX_FIRST_TRAINING.getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        DeleteTrainingCommand deleteTrainingCommand \u003d new DeleteTrainingCommand(INDEX_FIRST_TRAINING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTrainingCommand.MESSAGE_SUCCESS, trainingToDelete);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        expectedModel.deleteTraining(trainingToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertCommandSuccess(deleteTrainingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTrainingList().size() + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        DeleteTrainingCommand deleteTrainingCommand \u003d new DeleteTrainingCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertCommandFailure(deleteTrainingCommand, model, Messages.MESSAGE_INVALID_TRAINING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 12,
      "sudogene": 15,
      "Whleee": 14
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CanoeCoach(model.getCanoeCoach()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.setStudentInUniqueStudentList(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CanoeCoach(model.getCanoeCoach()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.setStudentInUniqueStudentList(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, new EditCommand.EditStudentDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CanoeCoach(model.getCanoeCoach()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CanoeCoach(model.getCanoeCoach()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.setStudentInUniqueStudentList(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // edit student in filtered list into a duplicate in canoe book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Student studentInList \u003d model.getCanoeCoach().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * but smaller than size of canoe book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of canoe book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCanoeCoach().getStudentList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor copyDescriptor \u003d new EditCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 34,
      "yejiadong": 46,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptorWithSameValues \u003d new EditCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 8,
      "yejiadong": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AllMatchPredicateList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.PhoneMatchesPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate firstNamePredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate secondNamePredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate firstPhonePredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new PhoneMatchesPredicate(\"12345678\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate secondPhonePredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new PhoneMatchesPredicate(\"87654321\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList firstAllMatchPredicateList \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new AllMatchPredicateList(Arrays.asList(firstNamePredicate, firstPhonePredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList secondAllMatchPredicateList \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new AllMatchPredicateList(Arrays.asList(secondNamePredicate, secondPhonePredicate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstAllMatchPredicateList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondAllMatchPredicateList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstAllMatchPredicateList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand command \u003d new FindCommand(allMatchPredicateList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(allMatchPredicateList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleNameKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand command \u003d new FindCommand(allMatchPredicateList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(allMatchPredicateList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_phoneKeyword_oneStudentFound() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"9482224\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(phonePredicate));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand command \u003d new FindCommand(allMatchPredicateList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(allMatchPredicateList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(ELLE), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleKeywords_oneStudentFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"9482427\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand command \u003d new FindCommand(allMatchPredicateList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(allMatchPredicateList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Arrays.asList(FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void execute_multipleKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"1234567\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand command \u003d new FindCommand(allMatchPredicateList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel.updateFilteredStudentList(allMatchPredicateList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 82,
      "sudogene": 1,
      "yejiadong": 6,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCanoeCoach(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "yejiadong": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/commands/TrainingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalTraining.VALID_TRAINING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import seedu.canoe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TrainingCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private LocalDateTime validDateTime \u003d VALID_TRAINING.getDateTime();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    //tests with a valid Training object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void executeTrainingAcceptedByModelAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String expectedCommandResult \u003d new TrainingCommand(validDateTime).execute(expectedModel).getFeedbackToUser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertCommandSuccess(new TrainingCommand(VALID_TRAINING.getDateTime()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //tests with a invalid Training object set in the past"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void execute_pastTraining_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        LocalDateTime pastDateTime \u003d LocalDateTime.parse(\"2020-08-26 1800\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        TrainingCommand pastTrainingCommand \u003d new TrainingCommand(pastDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(CommandException.class, TrainingCommand.MESSAGE_PAST_TRAINING, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            pastTrainingCommand.execute(expectedModel));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    //tests with a invalid Training object with invalid month."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void executeTrainingRejectedByModelAddFailure() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e new TrainingCommand(LocalDateTime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .parse(\"2000-20-11 1900\", formatter)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    //tests with a invalid Training object with wrong format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void executeTrainingRejectedByModelAddFailure2() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e new TrainingCommand(LocalDateTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .parse(\"2000-20-11\", formatter)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "Whleee": 41,
      "yejiadong": 11
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.ACADEMICYEAR_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.ACADEMICYEAR_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.FRIDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_ACADEMICYEAR_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.MONDAY_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.THURSDAY_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.TUESDAY_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ACADEMICYEAR_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.WEDNESDAY_DESC_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student expectedStudent \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + ACADEMICYEAR_DESC_BOB + TAG_DESC_FRIEND + MONDAY_DESC_BOB + TUESDAY_DESC_BOB + WEDNESDAY_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + THURSDAY_DESC_BOB + FRIDAY_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + ACADEMICYEAR_DESC_BOB + TAG_DESC_FRIEND + MONDAY_DESC_BOB + TUESDAY_DESC_BOB + WEDNESDAY_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + THURSDAY_DESC_BOB + FRIDAY_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + ACADEMICYEAR_DESC_BOB + TAG_DESC_FRIEND + MONDAY_DESC_BOB + TUESDAY_DESC_BOB + WEDNESDAY_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + THURSDAY_DESC_BOB + FRIDAY_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + ACADEMICYEAR_DESC_BOB + TAG_DESC_FRIEND + MONDAY_DESC_BOB + TUESDAY_DESC_BOB + WEDNESDAY_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + THURSDAY_DESC_BOB + FRIDAY_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ACADEMICYEAR_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + MONDAY_DESC_BOB + TUESDAY_DESC_BOB + WEDNESDAY_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            + THURSDAY_DESC_BOB + FRIDAY_DESC_BOB, new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + EMAIL_DESC_AMY + ACADEMICYEAR_DESC_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // missing id prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + EMAIL_DESC_BOB + ACADEMICYEAR_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + EMAIL_DESC_BOB + ACADEMICYEAR_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + EMAIL_DESC_BOB + ACADEMICYEAR_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + VALID_EMAIL_BOB + ACADEMICYEAR_DESC_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // missing academic year prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        + VALID_EMAIL_BOB + VALID_ACADEMICYEAR_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        + VALID_EMAIL_BOB + VALID_ACADEMICYEAR_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + ACADEMICYEAR_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + ACADEMICYEAR_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + ACADEMICYEAR_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        // invalid academic year"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + INVALID_ACADEMICYEAR_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                AcademicYear.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND + ACADEMICYEAR_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        + EMAIL_DESC_BOB + ACADEMICYEAR_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                        + ACADEMICYEAR_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 43,
      "sudogene": 23,
      "Whleee": 24,
      "kerkpy": 9,
      "yejiadong": 8,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/CanoeCoachParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AllMatchPredicateList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.PhoneMatchesPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CanoeCoachParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final CanoeCoachParser parser \u003d new CanoeCoachParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \"))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        + \" p/123456\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(new FindCommand(new AllMatchPredicateList(Arrays.asList("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"foo\", \"bar\", \"baz\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new PhoneMatchesPredicate(\"123456\")))), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 29,
      "kerkpy": 2,
      "yejiadong": 8,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/CommonTimeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.CommonTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYearMatchesPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AnyMatchPredicateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class CommonTimeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private CommonTimeCommandParser parser \u003d new CommonTimeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void parse_validArgs_returnsCommonTimeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand firstExpectedCommonTimeCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new CommonTimeCommand(AnyMatchPredicateList.of("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        new AcademicYearMatchesPredicate(\"123456\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob ay/123456\", firstExpectedCommonTimeCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand secondExpectedCommonTimeCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new CommonTimeCommand(AnyMatchPredicateList.of("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        new AcademicYearMatchesPredicate(\"85355255\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertParseSuccess(parser, \"  \\n  \\t n/Alice Bob \\t \\n \\n ay/85355255\", secondExpectedCommonTimeCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void parse_noQuery_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertParseFailure(parser, \" \", CommonTimeCommand.MESSAGE_NO_QUERY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeCommand expectedCommonTimeCommand \u003d new CommonTimeCommand(AnyMatchPredicateList.of("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new AcademicYearMatchesPredicate(\"3\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertParseSuccess(parser, \" ay/11111111 ay/22222222 ay/3\", expectedCommonTimeCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 50
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "yejiadong": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.MONDAY_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_MONDAY_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + MONDAY_DESC_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withMonday(VALID_MONDAY_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        //dismissal time"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MONDAY_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMonday(VALID_MONDAY_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 36,
      "kerkpy": 5,
      "yejiadong": 26,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYearMatchesPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AllMatchPredicateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.EmailContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.IdMatchesPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.PhoneMatchesPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand firstExpectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new FindCommand(AllMatchPredicateList.of("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new PhoneMatchesPredicate(\"123456\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob p/123456\", firstExpectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand secondExpectedFindCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new FindCommand(AllMatchPredicateList.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new PhoneMatchesPredicate(\"85355255\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseSuccess(parser, \"  \\n  \\t n/Alice Bob \\t \\n \\n p/85355255\", secondExpectedFindCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // mixture of find parameters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        FindCommand thirdExpectedFindCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new FindCommand(AllMatchPredicateList.of("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new EmailContainsKeywordPredicate(\"meow\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new AcademicYearMatchesPredicate(\"2\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                        new IdMatchesPredicate(\"1\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseSuccess(parser, \" e/meow ay/2 id/1\", thirdExpectedFindCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void parse_noQuery_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, \" \", FindCommand.MESSAGE_NO_QUERY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void parse_invalidTime_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, \" d1/423\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void parse_validTimeFollowedByInvalidTime_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseFailure(parser, \" d1/0800 d2/432\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(AllMatchPredicateList.of("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new PhoneMatchesPredicate(\"33333333\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertParseSuccess(parser, \" p/11111111 p/22222222 p/33333333\", expectedFindCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 22,
      "sudogene": 35,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/canoe/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "yejiadong": 2,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/CanoeCoachTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class CanoeCoachTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private final CanoeCoach canoeCoach \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(Collections.emptyList(), canoeCoach.getStudentList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e canoeCoach.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(newData, canoeCoach);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoachStub newData \u003d new CanoeCoachStub(newStudents);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e canoeCoach.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e canoeCoach.hasStudent(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(canoeCoach.hasStudent(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.addStudent(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(canoeCoach.hasStudent(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.addStudent(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(canoeCoach.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e canoeCoach.getStudentList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * A stub ReadOnlyCanoeCoach whose students list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static class CanoeCoachStub implements ReadOnlyCanoeCoach {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        private final ObservableList\u003cTraining\u003e trainings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoachStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        public ObservableList\u003cTraining\u003e getTrainingList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            return trainings;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 28,
      "sudogene": 3,
      "Whleee": 3,
      "yejiadong": 14,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(new CanoeCoach(), new CanoeCoach(modelManager.getCanoeCoach()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        userPrefs.setCanoeCoachFilePath(Paths.get(\"canoe/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        userPrefs.setCanoeCoachFilePath(Paths.get(\"new/canoe/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCanoeCoachFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        Path path \u003d Paths.get(\"canoe/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        modelManager.setCanoeCoachFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(path, modelManager.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach canoeCoach \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach differentCanoeCoach \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        modelManager \u003d new ModelManager(canoeCoach, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(canoeCoach, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // different canoeCoach -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCanoeCoach, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(canoeCoach, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        differentUserPrefs.setCanoeCoachFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(canoeCoach, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 24,
      "yejiadong": 11,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCanoeCoachFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/AcademicYearMatchesPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": "class AcademicYearMatchesPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstYear \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondYear \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        AcademicYearMatchesPredicate firstPredicate \u003d new AcademicYearMatchesPredicate(firstYear);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        AcademicYearMatchesPredicate secondPredicate \u003d new AcademicYearMatchesPredicate(secondYear);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        AcademicYearMatchesPredicate firstPredicateCopy \u003d new AcademicYearMatchesPredicate(firstYear);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different academic year -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_yearMatches_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        AcademicYearMatchesPredicate predicate \u003d new AcademicYearMatchesPredicate(\"3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withAcademicYear(\"3\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_yearDoesNotMatch_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        AcademicYearMatchesPredicate predicate \u003d new AcademicYearMatchesPredicate(\"3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withAcademicYear(\"1\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withAcademicYear(\"2\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 47
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/AllMatchPredicateListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class AllMatchPredicateListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate firstNamePredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate firstPhonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate secondNamePredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate secondPhonePredicate \u003d new PhoneMatchesPredicate(\"321\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cPredicate\u003cStudent\u003e\u003e firstListOfPredicates \u003d Arrays.asList(firstNamePredicate, firstPhonePredicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cPredicate\u003cStudent\u003e\u003e secondListOfPredicates \u003d Arrays.asList(secondNamePredicate, secondPhonePredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList firstAllMatchPredicateList \u003d new AllMatchPredicateList(firstListOfPredicates);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList secondAllMatchPredicateList \u003d new AllMatchPredicateList(secondListOfPredicates);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(firstAllMatchPredicateList.equals(firstAllMatchPredicateList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList firstAllMatchPredicateListCopy \u003d new AllMatchPredicateList(firstListOfPredicates);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(firstAllMatchPredicateList.equals(firstAllMatchPredicateListCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstAllMatchPredicateList.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstAllMatchPredicateList.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // different predicate list -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstAllMatchPredicateList.equals(secondAllMatchPredicateList));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentContainsNameKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // One name keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Multiple name keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Only one matching name keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Mixed-case name keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_nameDoesNotContainNameKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Keywords match phone, email and canoe, but does not match name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentContainsPhoneValue_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(phonePredicate));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withPhone(\"123\").build()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentDoesNotContainPhoneValue_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // No value"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(phonePredicate));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Non-matching value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(phonePredicate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withPhone(\"321\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentContainsNameKeywordAndPhoneValue_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // One name keyword one phone value"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").withPhone(\"123\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Multiple name keywords one phone value"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"456789\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate, phonePredicate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(allMatchPredicateList.test(new StudentBuilder().withName(\"Bob\").withPhone(\"456789\").build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentDoesNotContainNameKeywordOrPhoneValue_returnsFalse() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Does not contain one name keyword, contains one phone value"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Bob\").withPhone(\"123\").build()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Does not contain multiple name keywords, contains one phone value"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"456789\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate, phonePredicate));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").withPhone(\"456789\").build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Contains one name keyword, does not contain phone value"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate, phonePredicate));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Alice\").withPhone(\"456\").build()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Contains multiple name keywords, does not contain phone value"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"456789\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate, phonePredicate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Carol\").withPhone(\"123\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_studentDoesNotContainNameKeywordAndPhoneValue_returnsFalse() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // One name keyword one phone value"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate phonePredicate \u003d new PhoneMatchesPredicate(\"123\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        AllMatchPredicateList allMatchPredicateList \u003d new AllMatchPredicateList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                Arrays.asList(namePredicate, phonePredicate)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        );"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Lisa\").withPhone(\"456\").build()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Multiple name keywords one phone value"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        phonePredicate \u003d new PhoneMatchesPredicate(\"456789\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        allMatchPredicateList \u003d new AllMatchPredicateList(Arrays.asList(namePredicate, phonePredicate));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(allMatchPredicateList.test(new StudentBuilder().withName(\"Boo\").withPhone(\"123\").build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 176
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/CommonTimeFinderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.GEORGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class CommonTimeFinderTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void getCommonDismissalTimes_emptyList_defaultDismissalTimes() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalTime\u003e expectedList \u003d Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeFinder commonTimeFinder \u003d new CommonTimeFinder(Collections.emptyList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(commonTimeFinder.getCommonDismissalTimes(), expectedList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    void getCommonDismissalTimes_multipleStudentsList_latestDismissalTimes() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cLocalTime\u003e expectedList \u003d Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(16, 21),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(18, 0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(15, 0),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                LocalTime.of(17, 12));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Arrays.asList(BENSON, CARL, ELLE, GEORGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CommonTimeFinder commonTimeFinder \u003d new CommonTimeFinder(studentList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(commonTimeFinder.getCommonDismissalTimes(), expectedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 42
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/DayDismissalPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.FridayDismissalPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.MondayDismissalPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.ThursdayDismissalPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.TuesdayDismissalPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.WednesdayDismissalPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class DayDismissalPredicateTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private String timePattern \u003d \"HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void equalsMonday() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstTime \u003d \"1240\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondTime \u003d \"1500\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        MondayDismissalPredicate firstPredicate \u003d new MondayDismissalPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        MondayDismissalPredicate secondPredicate \u003d new MondayDismissalPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(secondTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        MondayDismissalPredicate firstPredicateCopy \u003d new MondayDismissalPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void equalsTuesday() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstTime \u003d \"1240\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondTime \u003d \"1500\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        TuesdayDismissalPredicate firstPredicate \u003d new TuesdayDismissalPredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        TuesdayDismissalPredicate secondPredicate \u003d new TuesdayDismissalPredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(secondTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        TuesdayDismissalPredicate firstPredicateCopy \u003d new TuesdayDismissalPredicate("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void equalsWednesday() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstTime \u003d \"1240\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondTime \u003d \"1500\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        WednesdayDismissalPredicate firstPredicate \u003d new WednesdayDismissalPredicate("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        WednesdayDismissalPredicate secondPredicate \u003d new WednesdayDismissalPredicate("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(secondTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        WednesdayDismissalPredicate firstPredicateCopy \u003d new WednesdayDismissalPredicate("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void equalsThursday() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstTime \u003d \"1240\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondTime \u003d \"1500\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ThursdayDismissalPredicate firstPredicate \u003d new ThursdayDismissalPredicate("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ThursdayDismissalPredicate secondPredicate \u003d new ThursdayDismissalPredicate("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(secondTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ThursdayDismissalPredicate firstPredicateCopy \u003d new ThursdayDismissalPredicate("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void equalsFriday() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstTime \u003d \"1240\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondTime \u003d \"1500\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        FridayDismissalPredicate firstPredicate \u003d new FridayDismissalPredicate("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        FridayDismissalPredicate secondPredicate \u003d new FridayDismissalPredicate("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(secondTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        FridayDismissalPredicate firstPredicateCopy \u003d new FridayDismissalPredicate("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                LocalTime.parse(firstTime, DateTimeFormatter.ofPattern(timePattern)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void test_equalDismissalTime_returnsTrue() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String subjectTime \u003d \"1500\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String queryTime \u003d \"1500\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Monday"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day monday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new MondayDismissalPredicate(monday.dismissalTime).test("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withMondayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Tuesday"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day tuesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new TuesdayDismissalPredicate(tuesday.dismissalTime).test("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withTuesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Wednesday"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day wednesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new WednesdayDismissalPredicate(wednesday.dismissalTime).test("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withWednesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Thursday"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day thursday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new ThursdayDismissalPredicate(thursday.dismissalTime).test("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withThursdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Friday"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day friday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new FridayDismissalPredicate(friday.dismissalTime).test("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withFridayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void test_queryAfterSubjectDismissalTime_returnsTrue() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String subjectTime \u003d \"1500\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String queryTime \u003d \"1501\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Monday"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day monday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new MondayDismissalPredicate(monday.dismissalTime).test("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withMondayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Tuesday"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day tuesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new TuesdayDismissalPredicate(tuesday.dismissalTime).test("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withTuesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Wednesday"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day wednesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new WednesdayDismissalPredicate(wednesday.dismissalTime).test("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withWednesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Thursday"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day thursday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new ThursdayDismissalPredicate(thursday.dismissalTime).test("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withThursdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Friday"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day friday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(new FridayDismissalPredicate(friday.dismissalTime).test("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withFridayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void test_queryBeforeSubjectDismissalTime_returnsFalse() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String subjectTime \u003d \"1500\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String queryTime \u003d \"1459\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Monday"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day monday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(new MondayDismissalPredicate(monday.dismissalTime).test("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withMondayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Tuesday"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day tuesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(new TuesdayDismissalPredicate(tuesday.dismissalTime).test("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withTuesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Wednesday"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day wednesday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(new WednesdayDismissalPredicate(wednesday.dismissalTime).test("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withWednesdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Thursday"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day thursday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(new ThursdayDismissalPredicate(thursday.dismissalTime).test("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withThursdayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // Friday"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Day friday \u003d new Day(queryTime);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(new FridayDismissalPredicate(friday.dismissalTime).test("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sudogene"
        },
        "content": "                new StudentBuilder().withFridayDismissal(subjectTime).build()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 8,
      "sudogene": 261
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/EmailContainsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": "class EmailContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstKeyword \u003d \"meow\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondKeyword \u003d \"woof\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        EmailContainsKeywordPredicate firstPredicate \u003d new EmailContainsKeywordPredicate(firstKeyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        EmailContainsKeywordPredicate secondPredicate \u003d new EmailContainsKeywordPredicate(secondKeyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        EmailContainsKeywordPredicate firstPredicateCopy \u003d new EmailContainsKeywordPredicate(firstKeyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different keyword -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_emailContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        EmailContainsKeywordPredicate predicate \u003d new EmailContainsKeywordPredicate(\"meow\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // domain contains"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withEmail(\"JohnDoe@meow.edu\").build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // local part contains"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withEmail(\"meow@lolmail.com\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // substring matches"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withEmail(\"usermeows@woof.com\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_emailDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        EmailContainsKeywordPredicate predicate \u003d new EmailContainsKeywordPredicate(\"0\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withEmail(\"JohnDoe@meow.edu\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 54
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/IdMatchesPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": "class IdMatchesPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String firstId \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        String secondId \u003d \"2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        IdMatchesPredicate firstPredicate \u003d new IdMatchesPredicate(firstId);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        IdMatchesPredicate secondPredicate \u003d new IdMatchesPredicate(secondId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        IdMatchesPredicate firstPredicateCopy \u003d new IdMatchesPredicate(firstId);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different academic year -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_idMatches_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        IdMatchesPredicate predicate \u003d new IdMatchesPredicate(\"3\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withId(\"3\").build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    void test_idDoesNotMatch_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        IdMatchesPredicate predicate \u003d new IdMatchesPredicate(\"3\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withId(\"1\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withId(\"2\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 46
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/IdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sudogene"
        },
        "content": "public class IdTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Id(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void isValidId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // null Id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Id.isValidId(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // invalid Id values"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\"one\")); // non-numeric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\"1a2\")); // alphabets within digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\"1 2\")); // spaces within digits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // valid Id values"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(Id.isValidId(\"234\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(Id.isValidId(\"209\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(Id.isValidId(\"202\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // NOTE: Tests on uniqueness of Id values will be trickier due to mutability"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // unique values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        new Id(\"210\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(Id.isValidId(\"300\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // non-unique values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(Id.isValidId(\"210\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void getPlaceHolderId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(Id.getPlaceHolderId(), new Id(Id.PLACEHOLDER_VALUE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void getLastUsedId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        new Id(\"300\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(Id.getLastUsedId(), 300);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        new Id(\"301\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        new Id(\"302\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(Id.getLastUsedId(), 302);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        Id.getPlaceHolderId();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(Id.getLastUsedId(), 302);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "sudogene": 58
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Keywords match phone, email and canoe, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 5,
      "yejiadong": 8,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/PhoneMatchesPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "class PhoneMatchesPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String firstPredicateValue \u003d \"123\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        String secondPredicateValue \u003d \"987\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate firstPredicate \u003d new PhoneMatchesPredicate(firstPredicateValue);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate secondPredicate \u003d new PhoneMatchesPredicate(secondPredicateValue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate firstPredicateCopy \u003d new PhoneMatchesPredicate(firstPredicateValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // different phone number -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_phoneValueContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate predicate \u003d new PhoneMatchesPredicate(\"123456\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public void test_phoneValueDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        PhoneMatchesPredicate predicate \u003d new PhoneMatchesPredicate(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withPhone(\"65423112\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        predicate \u003d new PhoneMatchesPredicate(\"123675678\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"987654321\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 55
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sudogene"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ACADEMICYEAR_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void asObservableList_modifyTrainingList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTrainingSchedule().remove(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different name, same academic year -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same name, same academic year, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same name, same academic year, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same name, same academic year, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // same name, different academic year -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAcademicYear(VALID_ACADEMICYEAR_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different phone only -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different email only -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different academic year -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAcademicYear(VALID_ACADEMICYEAR_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        // different trainingSchedule -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTrainingSchedules(VALID_LOCAL_DATE_TIME_2).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public void cloneStudent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // weaker equality"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE.cloneStudent()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // stronger equality"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(ALICE, ALICE.cloneStudent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // equals to student builder"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertEquals(ALICE.cloneStudent(), new StudentBuilder(ALICE).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        // different student -\u003e not equals"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertNotEquals(BOB, ALICE.cloneStudent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        assertNotEquals(ALICE, BOB.cloneStudent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 10,
      "sudogene": 40,
      "yejiadong": 32,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 8,
      "yejiadong": 161
    }
  },
  {
    "path": "src/test/java/seedu/canoe/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private static final String INVALID_ACADEMICYEAR \u003d \"1f\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String INVALID_MONDAY \u003d \"Banana\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String INVALID_TUESDAY \u003d \"Banana\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String INVALID_WEDNESDAY \u003d \"Banana\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String INVALID_THURSDAY \u003d \"Banana\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String INVALID_FRIDAY \u003d \"Banana\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final String VALID_ACADEMICYEAR \u003d BENSON.getAcademicYear().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String VALID_MONDAY \u003d BENSON.getMondayDismissal().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String VALID_TUESDAY \u003d BENSON.getTuesdayDismissal().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String VALID_WEDNESDAY \u003d BENSON.getWednesdayDismissal().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String VALID_THURSDAY \u003d BENSON.getThursdayDismissal().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private static final String VALID_FRIDAY \u003d BENSON.getFridayDismissal().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final String VALID_ID \u003d \"42\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private static final List\u003cLocalDateTime\u003e VALID_TRAINING_SCHEDULE \u003d BENSON.getTrainingSchedule().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            VALID_TAGS, VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_ACADEMICYEAR,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            VALID_TAGS, VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_ACADEMICYEAR,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            VALID_TAGS, VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void toModelType_invalidAcademicYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String expectedMessage \u003d AcademicYear.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void toModelType_nullAcademicYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, AcademicYear.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_nullMonday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        null, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidMonday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        INVALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_nullTuesday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, null, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidTuesday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, INVALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_nullWednesday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, null, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidWednesday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, INVALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_nullThursday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, null, VALID_FRIDAY,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidThursday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, INVALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_nullFriday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, null,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidFriday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, VALID_TAGS,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, INVALID_FRIDAY,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ACADEMICYEAR, invalidTags,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    VALID_MONDAY, VALID_TUESDAY, VALID_WEDNESDAY, VALID_THURSDAY, VALID_FRIDAY,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        VALID_TRAINING_SCHEDULE, VALID_ID);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 10,
      "Whleee": 15,
      "kerkpy": 16,
      "yejiadong": 142,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/JsonAdaptedTrainingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class JsonAdaptedTrainingTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private static final LocalDateTime VALID_DATETIME \u003d LocalDateTime.parse(\"2020-10-20T19:00:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private static final Training VALID_TRAINING \u003d new Training(VALID_DATETIME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void toModelType_validTrainingDetails_returnsTraining() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        JsonAdaptedTraining training \u003d new JsonAdaptedTraining(VALID_TRAINING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertEquals(VALID_TRAINING, training.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void toModelType_invalidDateTime_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                new JsonAdaptedTraining(new Training(LocalDateTime.parse(\"2020-20-20T19:00:00\"))));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public void toModelType_nullDateTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedTraining(null).toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "Whleee": 30
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/JsonCanoeCoachStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class JsonCanoeCoachStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCanoeCoachStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCanoeCoach\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return new JsonCanoeCoachStorage(Paths.get(filePath)).readCanoeCoach(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatCanoeCoach.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidStudentCanoeCoach.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidStudentCanoeCoach.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonCanoeCoachStorage jsonAddressBookStorage \u003d new JsonCanoeCoachStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        jsonAddressBookStorage.saveCanoeCoach(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ReadOnlyCanoeCoach readBack \u003d jsonAddressBookStorage.readCanoeCoach(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(original, new CanoeCoach(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        jsonAddressBookStorage.saveCanoeCoach(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCanoeCoach(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(original, new CanoeCoach(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        jsonAddressBookStorage.saveCanoeCoach(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCanoeCoach().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(original, new CanoeCoach(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private void saveAddressBook(ReadOnlyCanoeCoach addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            new JsonCanoeCoachStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                    .saveCanoeCoach(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new CanoeCoach(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 31,
      "yejiadong": 5,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/JsonSerializableCanoeCoachTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "public class JsonSerializableCanoeCoachTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCanoeCoachTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsCanoeCoach.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentCanoeCoach.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentCanoeCoach.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonSerializableCanoeCoach dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                JsonSerializableCanoeCoach.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach canoeCoachFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach typicalStudentsCanoeCoach \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(canoeCoachFromFile, typicalStudentsCanoeCoach);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonSerializableCanoeCoach dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                JsonSerializableCanoeCoach.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonSerializableCanoeCoach dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "                JsonSerializableCanoeCoach.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCanoeCoach.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 21,
      "yejiadong": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        userPrefs.setCanoeCoachFilePath(Paths.get(\"data\", \"canoecoach.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/canoe/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.ReadOnlyCanoeCoach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        JsonCanoeCoachStorage addressBookStorage \u003d new JsonCanoeCoachStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "         * {@link JsonCanoeCoachStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCanoeCoachStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        storageManager.saveCanoeCoach(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        ReadOnlyCanoeCoach retrieved \u003d storageManager.readCanoeCoach().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertEquals(original, new CanoeCoach(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        assertNotNull(storageManager.getCanoeCoachFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": " *     {@code CanoeCoach ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    private CanoeCoach canoeCoach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public AddressBookBuilder(CanoeCoach canoeCoach) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        this.canoeCoach \u003d canoeCoach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Adds a new {@code Student} to the {@code CanoeCoach} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public AddressBookBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        canoeCoach.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public CanoeCoach build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        return canoeCoach;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 12,
      "yejiadong": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Friday;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Monday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Thursday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Tuesday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Wednesday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private EditCommand.EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder(EditCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor \u003d new EditCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        descriptor.setAcademicYear(student.getAcademicYear());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setMondayDismissal(student.getMondayDismissal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setTuesdayDismissal(student.getTuesdayDismissal());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setWednesdayDismissal(student.getWednesdayDismissal());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setThursdayDismissal(student.getThursdayDismissal());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setFridayDismissal(student.getFridayDismissal());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Sets the {@code AcademicYear} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public EditStudentDescriptorBuilder withAcademicYear(String academicYear) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        descriptor.setAcademicYear(new AcademicYear(academicYear));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Monday} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public EditStudentDescriptorBuilder withMonday(String monday) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setMondayDismissal(new Monday(monday));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Tuesday} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public EditStudentDescriptorBuilder withTuesday(String tuesday) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setTuesdayDismissal(new Tuesday(tuesday));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Wednesday} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public EditStudentDescriptorBuilder withWednesday(String wednesday) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setWednesdayDismissal(new Wednesday(wednesday));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Thursday} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public EditStudentDescriptorBuilder withThursday(String thursday) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setThursdayDismissal(new Thursday(thursday));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Friday} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public EditStudentDescriptorBuilder withFriday(String friday) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.setFridayDismissal(new Friday(friday));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Sets the {@code Id} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public EditStudentDescriptorBuilder withId(String validId) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        descriptor.setId(new Id(validId));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public EditCommand.EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 14,
      "sudogene": 9,
      "Whleee": 8,
      "kerkpy": 45,
      "yejiadong": 70
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/LocalDateTimeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * List of local date times for testing purposes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class LocalDateTimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //Do not modify any of the local date times to prevent regressions with other tests"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME \u003d LocalDateTime.parse(\"2020-11-20 1800\", FORMATTER);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_1 \u003d LocalDateTime.parse(\"2020-11-20 1900\", FORMATTER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_2 \u003d LocalDateTime.parse(\"2020-09-20 1500\", FORMATTER);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_3 \u003d LocalDateTime.parse(\"2020-10-21 1000\", FORMATTER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_4 \u003d LocalDateTime.parse(\"2020-10-20 1800\", FORMATTER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_5 \u003d LocalDateTime.parse(\"2020-09-14 1500\", FORMATTER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final LocalDateTime VALID_LOCAL_DATE_TIME_6 \u003d LocalDateTime.parse(\"2020-09-15 1400\", FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "yejiadong": 20
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.AcademicYear;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Friday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Monday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Thursday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Tuesday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.time.Wednesday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_MONDAY \u003d \"1500\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_TUESDAY \u003d \"1500\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_WEDNESDAY \u003d \"1500\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_THURSDAY \u003d \"1500\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public static final String DEFAULT_FRIDAY \u003d \"1500\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final String DEFAULT_ACADEMICYEAR \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private AcademicYear academicYear;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private List\u003cLocalDateTime\u003e trainingSchedules;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Monday mondayDismissal;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Tuesday tuesdayDismissal;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Wednesday wednesdayDismissal;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Thursday thursdayDismissal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    private Friday fridayDismissal;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        academicYear \u003d new AcademicYear(DEFAULT_ACADEMICYEAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        mondayDismissal \u003d new Monday(DEFAULT_MONDAY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        tuesdayDismissal \u003d new Tuesday(DEFAULT_TUESDAY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        wednesdayDismissal \u003d new Wednesday(DEFAULT_WEDNESDAY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        thursdayDismissal \u003d new Thursday(DEFAULT_THURSDAY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        fridayDismissal \u003d new Friday(DEFAULT_FRIDAY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        id \u003d new Id(DEFAULT_ID);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        academicYear \u003d studentToCopy.getAcademicYear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        trainingSchedules \u003d new ArrayList\u003c\u003e(studentToCopy.getTrainingSchedule());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        mondayDismissal \u003d (Monday) studentToCopy.getMondayDismissal();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        tuesdayDismissal \u003d (Tuesday) studentToCopy.getTuesdayDismissal();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        wednesdayDismissal \u003d (Wednesday) studentToCopy.getWednesdayDismissal();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        thursdayDismissal \u003d (Thursday) studentToCopy.getThursdayDismissal();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        fridayDismissal \u003d (Friday) studentToCopy.getFridayDismissal();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        id \u003d studentToCopy.getId();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the {@code dateTimes} into a {@code TreeSet\u003cLocalDateTime\u003e} and set it to the {@code Student} that we are"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder withTrainingSchedules(LocalDateTime ... dateTimes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.trainingSchedules \u003d SampleDataUtil.getTrainingSchedule(dateTimes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Sets the {@code AcademicYear} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public StudentBuilder withAcademicYear(String academicYear) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.academicYear \u003d new AcademicYear(academicYear);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Monday} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public StudentBuilder withMondayDismissal(String mondayDismissal) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        this.mondayDismissal \u003d new Monday(mondayDismissal);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Tuesday} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public StudentBuilder withTuesdayDismissal(String tuesdayDismissal) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        this.tuesdayDismissal \u003d new Tuesday(tuesdayDismissal);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Wednesday} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public StudentBuilder withWednesdayDismissal(String wednesdayDismissal) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        this.wednesdayDismissal \u003d new Wednesday(wednesdayDismissal);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Thursday} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public StudentBuilder withThursdayDismissal(String thursdayDismissal) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        this.thursdayDismissal \u003d new Thursday(thursdayDismissal);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Sets the {@code Friday} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    public StudentBuilder withFridayDismissal(String fridayDismissal) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        this.fridayDismissal \u003d new Friday(fridayDismissal);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kerkpy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     * Sets the {@code Id} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sudogene"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public StudentBuilder withId(String id) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        this.id \u003d new Id(id);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sudogene"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * Builds a student"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     * @return Student"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Student newStudent \u003d new Student(name, phone, email, academicYear, tags,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            mondayDismissal, tuesdayDismissal, wednesdayDismissal, thursdayDismissal, fridayDismissal, id);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        newStudent.addAllTraining(trainingSchedules);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return newStudent;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sudogene"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 14,
      "sudogene": 15,
      "Whleee": 12,
      "kerkpy": 66,
      "yejiadong": 92
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_FRIDAY_DISMISSAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_MONDAY_DISMISSAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_THURSDAY_DISMISSAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_TUESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.parser.CliSyntax.PREFIX_WEDNESDAY_DISMISSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        sb.append(PREFIX_ACADEMIC_YEAR + student.getAcademicYear().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        sb.append(PREFIX_MONDAY_DISMISSAL + student.getMondayDismissal().toString() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        sb.append(PREFIX_TUESDAY_DISMISSAL + student.getTuesdayDismissal().toString() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        sb.append(PREFIX_WEDNESDAY_DISMISSAL + student.getWednesdayDismissal().toString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        sb.append(PREFIX_THURSDAY_DISMISSAL + student.getThursdayDismissal().toString() + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        sb.append(PREFIX_FRIDAY_DISMISSAL + student.getFridayDismissal().toString() + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        descriptor.getAcademicYear().ifPresent(academicYear -\u003e sb.append(PREFIX_ACADEMIC_YEAR)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "                .append(academicYear.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.getMondayDismissal().ifPresent(monday -\u003e sb.append(PREFIX_MONDAY_DISMISSAL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            .append(monday.toString()).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.getTuesdayDismissal().ifPresent(tuesday -\u003e sb.append(PREFIX_TUESDAY_DISMISSAL)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            .append(tuesday.toString()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.getWednesdayDismissal().ifPresent(wednesday -\u003e sb.append(PREFIX_WEDNESDAY_DISMISSAL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            .append(wednesday.toString()).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.getThursdayDismissal().ifPresent(thursday -\u003e sb.append(PREFIX_THURSDAY_DISMISSAL)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            .append(thursday.toString()).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "        descriptor.getFridayDismissal().ifPresent(friday -\u003e sb.append(PREFIX_FRIDAY_DISMISSAL)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerkpy"
        },
        "content": "            .append(friday.toString()).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 15,
      "Whleee": 3,
      "kerkpy": 15,
      "yejiadong": 14,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 4,
      "yejiadong": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TrainingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TrainingBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final Set\u003cStudent\u003e DEFAULT_STUDENTS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private static DateTimeFormatter formatDateTime \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static final LocalDateTime DEFAULT_DATETIME \u003d LocalDateTime.parse(\"2020-10-10 2000\", formatDateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    private Set\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a {@code TrainingBuilder} with the default details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        dateTime \u003d DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        students \u003d DEFAULT_STUDENTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initializes the TrainingBuilder with the data of {@code trainingToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingBuilder(Training trainingToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        dateTime \u003d trainingToCopy.getDateTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        students \u003d trainingToCopy.getStudents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public DateTimeFormatter getFormatter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return formatDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Training} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingBuilder withDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Sets the {@code students} of the {@code Training} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public TrainingBuilder withStudents(Set\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * Builds a Training Session"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     * @return Training"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public Training build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return new Training(dateTime, students);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "Whleee": 57,
      "yejiadong": 2
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_FIRST_TRAINING \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_SECOND_TRAINING \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Index INDEX_THIRD_TRAINING \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 2,
      "yejiadong": 7,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ACADEMICYEAR_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_ACADEMICYEAR_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withThursdayDismissal(\"1700\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"2\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withMondayDismissal(\"1621\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withWednesdayDismissal(\"1800\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"3\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"3\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withTuesdayDismissal(\"1400\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"4\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"4\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withWednesdayDismissal(\"1745\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"5\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"5\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withWednesdayDismissal(\"1230\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withFridayDismissal(\"1542\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"6\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"1\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withTuesdayDismissal(\"1623\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"2\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "            .withFridayDismissal(\"1712\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"7\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"1\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"8\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(\"2\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"9\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(VALID_ACADEMICYEAR_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sudogene"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sudogene"
        },
        "content": "            .withId(\"10\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withAcademicYear(VALID_ACADEMICYEAR_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns an {@code CanoeCoach} with all the typical students."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static CanoeCoach getTypicalAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach ab \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 25,
      "sudogene": 30,
      "Whleee": 15,
      "yejiadong": 17,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TypicalStudentsInTypicalTrainings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_6;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in {@code Training} tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TypicalStudentsInTypicalTrainings {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //DO NOT REUSE STATIC VARIABLES HERE AS THEIR PROPERTIES WOULD BE MODIFIED BY THE TESTS"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING_4 \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME_5).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING_5 \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME_6).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //Has no training, thursday dismissal 1700"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Student JONAS \u003d new StudentBuilder().withName(\"Jonas\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withId(\"1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"jonas@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withPhone(\"92848294\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withAcademicYear(\"2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withThursdayDismissal(\"1700\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //Has no training, monday dismissal 1200, wednesday dismissal 1500"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Student QINDA \u003d new StudentBuilder().withName(\"Qinda Meh\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withId(\"2\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"qd@example.com\").withPhone(\"96204948\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withAcademicYear(\"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withMondayDismissal(\"1200\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withWednesdayDismissal(\"1500\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    //Has no trainings scheduled, tuesday dismissal 1400"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Student YANKEE \u003d new StudentBuilder().withName(\"Yankee Lim\").withPhone(\"85352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withId(\"3\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withAcademicYear(\"3\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withTuesdayDismissal(\"1400\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            .withEmail(\"yank@example.com\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private TypicalStudentsInTypicalTrainings() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns an {@code CanoeCoach} with all the typical students and trainings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static CanoeCoach getTypicalAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach ab2 \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            ab2.addStudent(student);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Training training : getTypicalTraining()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            ab2.addTraining(training);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ab2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JONAS, QINDA, YANKEE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static List\u003cTraining\u003e getTypicalTraining() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(VALID_TRAINING_4, VALID_TRAINING_5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 9,
      "yejiadong": 59
    }
  },
  {
    "path": "src/test/java/seedu/canoe/testutil/TypicalTraining.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.LocalDateTimeUtil.VALID_LOCAL_DATE_TIME_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Whleee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.CanoeCoach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.model.student.Training;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Whleee"
        },
        "content": "public class TypicalTraining {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME_1).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING1 \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING2 \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME_4).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static final Training VALID_TRAINING3 \u003d new TrainingBuilder().withDateTime(VALID_LOCAL_DATE_TIME_3).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "     * Returns an {@code CanoeCoach} with all the typical trainings."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Whleee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "    public static CanoeCoach getTypicalAddressBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "        CanoeCoach ab \u003d new CanoeCoach();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        for (Training training : getTypicalTrainings()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Whleee"
        },
        "content": "            ab.addTraining(training);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Whleee"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Whleee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    public static List\u003cTraining\u003e getTypicalTrainings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(VALID_TRAINING, VALID_TRAINING1, VALID_TRAINING2, VALID_TRAINING3));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Whleee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Whleee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 10,
      "Whleee": 22,
      "yejiadong": 7
    }
  },
  {
    "path": "src/test/java/seedu/canoe/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/canoe/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "package seedu.canoe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import static seedu.canoe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "import seedu.canoe.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003c?import seedu.canoe.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abdurrahmanfaqihiskandar"
        },
        "content": "\u003cfx:root type\u003d\"seedu.canoe.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "abdurrahmanfaqihiskandar": 1,
      "-": 5
    }
  }
]
