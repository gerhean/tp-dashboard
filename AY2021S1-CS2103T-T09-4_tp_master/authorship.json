[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "# Green Tea"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## The Revolutionary Language Learning Application"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-4/tp/actions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* The project is a platform for users to record words of various languages with their translations"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  * It is designed for use with a **CLI** (Command Line Interface)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "geoboom": 3,
      "IlyaRin": 5,
      "-": 4
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geoboom"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geoboom"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geoboom"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 60
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "geoboom": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geoboom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geoboom"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geoboom"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geoboom": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.10\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Vignesh Bhuvan"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/vigneshbhuvan-nus.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/vigneshbhuvan-nus)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Gabriel Sim"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/gabrielsimbingyang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/GabrielSimbingyang)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Melanie Ng"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/ilyarin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/IlyaRin)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "### Georgie Lee"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "\u003cimg src\u003d\"images/geoboom.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[GitHub](http://github.com/geoboom)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "[[Portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 17,
      "-": 27,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "MainWindow.fxml - Houses the rest of the fxml (commandBox,HelpWindow, etc) in the VBox"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                - also contains the code for the actual menu bar"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "CommandBox.fxml - Stackpane where the user writes input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryListPanel.fxml -  Houses a ListView\u003cEntry\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "EntryListCard.fxml- (not housed by Mainwindow.fxml) contains the data from each entry"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "HelpWindow.fxml - Only displays label and copy url button"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "ResultDisplay.fxml - Prints results to user "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "StatusBarFooter - returns the path of the file retrieved"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### \\[Proposed\\] Deck System"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "This feature would allow the user to create multiple lists of entries rather than having "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "all translations together in the same list. This means that the user could have different decks"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "for different languages or even multiple decks for the same languages. "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "e.g. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1. Deck 1: Japanese"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2. Deck 2: Spanish Food"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "3. Deck 3: Spanish Animals"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "_{Feature will be added in v1.3}_"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### \\[Proposed\\] Flashcard System"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The flashcard system would allow the user to choose to practice in whichever deck"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "he wishes."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The methodology behind GreenTea\u0027s flashcard system will be based on the Leitner System (https://en.wikipedia.org/wiki/Leitner_system)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "The Letiner system is a proven quizzing system that increases the user\u0027s rate of learning by "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "using spaced repetition. In the Leitner system, flashcards are sorted based on the user\u0027s ability to answer them. Correctly "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "answered flashcards are put at the end of the question queue and incorrectly answered "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "flashcards are placed at the front. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "_{Feature will be added in v1.3}_"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "### \\[Proposed\\] Data Analysis"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Some of the proposed parameters tracked by GreenTea include:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1. Number of correctly answered flashcards"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2. Previous scores"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "3. Average time taken in total"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "4. Time of quiz"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "From these data, GreenTea would be able to derive some meaningful analytics to "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "display to the user. These include:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1. Progression since last attempt"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2. Length of time between quizzes"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "3. Most forgotten phrase/translation "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "4. Language mastery "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "5. Progress in each deck"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "_{Feature will be added in v1.3}_"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "* has a need to learn and practice a language"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "* wants to remember the meaning and spelling of words in a new language"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "* prefers question based testing to learn a language"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Value proposition**: helps to learn a language better through better modes of practice"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                | So that I can…​                                                        |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions                      | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | add a Word-Meaning pair                     | populate the list with words and their meanings                        |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | delete a Word-Meaning pair                  | delete an unwanted entry                                               |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | edit a Word-Meaning pair                    | edit an entry                                                          |"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | assign a Difficulty Ranking to words        | determine which words are more difficult for me                        |"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | access a Dictionary of Word-Meaning pairs   | refresh my understanding of the words                                  |"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | search the dictionary with a word           | find out its meaning                                                   |"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | search the dictionary with a meaning        | find out the word                                                      |"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | sort the Dictionary by difficulty           | view the more difficult words in the dictionary                        |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | create a question                           | test my understanding of a word                                        |"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | create a multiple choice question           | choose the correct answer                                              |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | create an open-ended question               | test my spelling and understanding of the word                         |"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | delete a question                           | delete an unwanted entry                                               |"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | edit a question                             | delete an unwanted entry                                               |"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | access the list of questions                | view all the questions                                                 |"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user                                       | tag a question with a difficulty rating     | create a quiz based on difficulty rating                               |"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | create a quiz from the pool of questions    | attempt the questions                                                  |"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* * *`  | user                                       | submit the quiz                             | see my results                                                         |"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | have a timer                                | find out how long I took to complete the quiz                          |"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | view statistics of the quiz                 | gauge my strengths and weaknesses                                      |"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | have a Rating System based on quiz results  | know my progress so far in learning the language                       |"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | view all the quiz scores                    | know how I performed for each quiz                                     |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | go back one question in the quiz            | review the question                                                    |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | skip a question in the quiz                 | skip a question and come back later                                    |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `* *`    | user                                       | have a reminder of any incomplete questions | know if my quiz is complete                                            |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user                                       | view hints for the quiz                     | have help when I am stuck on a difficult question                      |"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user                                       | test my spelling                            | learn how to spell the words correctly                                 |"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user                                       | test a sentence structure                   | learn the grammar of the language                                      |"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| `*`      | user                                       | have a reminder to practice everyday        | continue my progress consistently                                      |"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "(For all use cases below, the **System** is `GreenTea` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: View help**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests help"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea returns a message explaining how to access the help page"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: Add a new entry**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to add a new entry"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea add the new entry"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* 1a. The entry is invalid"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * 1a1. GreenTea shows an error message"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* 1b. The entry is valid."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: List all entries**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to see the list of entries"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea shows a list of entries"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: Edit an entry**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to edit an entry with updated fields via the given index"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea updates entry with new fields"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "* 1a. User fed an invalid index"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * 1a1. GreenTea returns an error message"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: Delete an entry**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to list entries"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea shows a list of entries"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "3.  User requests to delete a specific entry in the list via the given index"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "4.  GreenTea deletes the person"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    * 3a1. GreenTea shows an error message."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: Clear a person**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to clear entries"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea clears all entries"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**Use case: Exit **"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "1.  User requests to exit program"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "2.  GreenTea exits"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "4.  Should be easy for new users to understand, use and navigate the UI"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "5.  Any interface between a user and the system should have a maximum response time of 2 seconds"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "6.  Any reused code should be acknowledged in the README"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 33,
      "IlyaRin": 4,
      "-": 338,
      "gabrielsimbingyang": 140
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Team Name: AY2021S1-CS2103T-T09-4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "GreenTea is a **desktop app for learning a new language, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you like to use a FlashCard system to learn new languages, this app would be perfect for you. In this User Guide (UG), you will learn about the various commands and actions that would allow you to use GreenTea seamlessly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geoboom"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Viewing Help: help](#viewing-help-help)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Adding a New Entry: add](#adding-a-new-entry-add)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Listing All Entries: list](#listing-all-entries-list)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Editing an Entry: edit](#editing-an-entry-edit)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Deleting an Entry: delete](#deleting-an-entry-delete)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Clearing All Entries: clear](#clearing-all-entries-clear)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "  - [Exiting the Program: exit](#exiting-the-program-exit)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [FAQ (WIP)](#faq-wip)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geoboom"
        },
        "content": "  - [Command summary](#command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Shows a cheat-sheet of commands in addition to a link of this UG."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Adding a new entry: `add`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Adds a new entry to the word bank."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `add w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `add w/Fruits t/果物`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `add w/Why aren’t they here yet? t/どうして彼らはまだここにいないの`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Listing all entries: `list`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Lists all entries in the word bank with their respective index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Editing an entry: `edit`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Edits an entry whose index is `\u003cINDEX\u003e`, replacing the original word with `\u003cWORD\u003e` and its translation with `\u003cTRANSLATION\u003e`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "You may provide either `\u003cWORD\u003e` or `\u003cTRANSLATION\u003e`, or both and only the one(s) provided will replace the original(s)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `edit \u003cINDEX\u003e w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e` OR `edit \u003cINDEX\u003e w/\u003cWORD\u003e` OR `edit \u003cINDEX\u003e t/\u003cTRANSLATION\u003e`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Note:** to get the index of an entry, you may run `list` - the index would be shown beside its respective entry"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `edit 1 w/hello` edits the word in  `entry#1` to `hello`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `edit 1 t/こんにちは` edits the translation in  `entry#1` to `こんにちは`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "- `edit 1 w/hello t/こんにちは` edits the word and translation in  `entry#1` to `hello` and `こんにちは` respectively."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Deleting an entry: `delete`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geoboom"
        },
        "content": "Delete the entry whose index is `INDEX`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Format: `delete \u003cINDEX\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "**Note:** to get the index of an entry, you may run `list` - the index would be shown beside its respective entry"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "Clears all entries from the word bank."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geoboom"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "Entries ares saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geoboom"
        },
        "content": "## FAQ (WIP)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous GreenTea home folder."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geoboom"
        },
        "content": "---"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| Action     | Format, Examples                                                                                                      |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| ---------- | --------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geoboom"
        },
        "content": "| **Help**   | `help`                                                                                                                |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Add**    | `add w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e` e.g. `add w/Hello t/hola`                                                              |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **List**   | `list`                                                                                                                |"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Edit**   | `edit \u003cINDEX\u003e w/\u003cWORD\u003e t/\u003cTRANSLATION\u003e` OR `edit \u003cINDEX\u003e w/\u003cWORD\u003e` OR `edit \u003cINDEX\u003e t/\u003cTRANSLATION\u003e`                  |"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "|            |   e.g. `edit 1 w/hello t/こんにちは` OR `edit 1 w/hello` OR `edit 1 t/こんにちは`                                       |"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Delete** | `delete \u003cINDEX\u003e` e.g. `delete 3`                                                                                      |"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Clear**  | `clear`                                                                                                               |"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "| **Exit**   | `exit`                                                                                                                |"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geoboom": 17,
      "vigneshbhuvan-nus": 34,
      "IlyaRin": 1,
      "gabrielsimbingyang": 4,
      "-": 51
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Create a new `Remark` in `seedu.address.model.entry`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "Simply add the following to [`seedu.address.ui.EntryCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 2,
      "-": 392
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.entry.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/Leitner.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.security.KeyStore.Entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Leitner {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Leitner() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Initialises 3 ArrayList\u003cEntry\u003e containing the current bucket, correctAnswers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * and Wrong Answers For each entry in the bucket, extract the question and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * answer then prompt the question to the user. Obtain the userInput and check"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * for correctness before adding to either to correctAnswer or wrongAnswer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * bucket After all entries are completed, shuffle both the answer lists and add"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * them back to the bucket Repeat the test twice"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return the score of the flashcard game using the Leitner system"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public int flashCard(ArrayList\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        int scoreAfterTestOne \u003d test(entries, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        int scoreAfterTestTwo \u003d test(entries, scoreAfterTestOne);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return scoreAfterTestTwo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public int test(ArrayList\u003cEntry\u003e bucket, int score) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ArrayList\u003cEntry\u003e correctAnswer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ArrayList\u003cEntry\u003e wrongAnswer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : bucket) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String question \u003d entry.getTranslation();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String answer \u003d entry.getEnglish();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            entry.promptUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (ans.equals(question.getTranslation())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                wrongAnswer.add(question);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                score++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                correctAnswer.add(question);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            bucket.remove(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Collections.shuffle(wrongAnswer, new Random());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Collections.shuffle(correctAnswer, new Random());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : wrongAnswer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            bucket.add(entry);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (Entry entry : correctAnswer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            bucket.add(entry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static void main(String[] args) { // test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "gabrielsimbingyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_NO_DECK_SELECTED \u003d \"Please select a deck first. Select \u003cindex\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_ENTRIES_LISTED_OVERVIEW \u003d \"%1$d entries listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of entries */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of entries */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 3,
      "-": 48,
      "gabrielsimbingyang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return model.getFilteredEntryList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 3,
      "-": 78,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": " * Clears GreenTea."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Green Tea has been cleared! You may continue to add new decks\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 1,
      "IlyaRin": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Word Bank as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/NewDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create an empty deck of flashcards. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"DECK_NAME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Japanese \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the word bank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a NewDeckCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public NewDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof NewDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((NewDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/RemoveDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Removes a deck identified using it\u0027s displayed index from the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \": Removes the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_REMOVE_DECK_SUCCESS \u003d \"Removed Deck: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public RemoveDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deckToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.removeDeck(deckToRemove);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_DECK_SUCCESS, deckToRemove));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof RemoveDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deck/SelectDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class SelectDeckCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \": Selects the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SELECT_DECK_SUCCESS \u003d \"Selected Deck: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public SelectDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck selectedDeck \u003d model.getCurrentDeck();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_DECK_SUCCESS, selectedDeck));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Adds an entry to the word bank."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a entry to the word bank. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"WORD \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"TRANSLATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"Fruits \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"果物\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entry added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the word bank\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.hasEntry(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addEntry(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Deletes an entry identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \": Deletes the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 17,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Edits the details of an existing entry in the word bank."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"by the index number used in the displayed entry list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"[\" + PREFIX_WORD + \"Entry] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"[\" + PREFIX_TRANSLATION + \"Translation]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"hello \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"こんにちは\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"OR \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_WORD + \"hello\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + \"OR \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            + PREFIX_TRANSLATION + \"こんにちは\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param index of the entry in the filtered entry list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param editEntryDescriptor details to edit the entry with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates and returns a {@code Entry} with the details of {@code entryToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * edited with {@code editEntryDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word updatedWord \u003d editEntryDescriptor.getWord().orElse(entryToEdit.getWord());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation updatedTranslation \u003d editEntryDescriptor.getTranslation().orElse(entryToEdit.getTranslation());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(updatedWord, updatedTranslation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Stores the details to edit the entry with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * corresponding field value of the entry."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private Word word;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private Translation translation;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            setWord(toCopy.word);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            setTranslation(toCopy.translation);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(word, translation);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setWord(Word word) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.word \u003d word;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Optional\u003cWord\u003e getWord() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return Optional.ofNullable(word);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setTranslation(Translation translation) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.translation \u003d translation;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Optional\u003cTranslation\u003e getTranslation() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return Optional.ofNullable(translation);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return getWord().equals(e.getWord())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    \u0026\u0026 getTranslation().equals(e.getTranslation());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 72,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Finds and lists all entries in word bank whose word contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries whose words contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final WordContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public FindCommand(WordContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW, model.getFilteredEntryList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 15,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/entry/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Lists all entries in the word bank to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (model.getCurrentDeck() \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_DECK_SELECTED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 13,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.SelectDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.NewDeckCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.RemoveDeckCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.deck.SelectDeckCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.AddCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.DeleteCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.EditCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.FindCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case NewDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new NewDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case RemoveDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new RemoveDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        case SelectDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new SelectDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 24,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Prefix PREFIX_WORD \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Prefix PREFIX_TRANSLATION \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String word} into a {@code Word}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Word parseWord(String word) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedWord \u003d word.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Word.isValidWord(trimmedWord)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Word(trimmedWord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String translation} into an {@code Translation}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code translation} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Translation parseTranslation(String translation) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(translation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedTranslation \u003d translation.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Translation.isValidTranslation(trimmedTranslation)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Translation(trimmedTranslation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses a {@code String name} into an {@code DeckName}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static DeckName parseDeckName(String name) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!DeckName.isValidDeckName(trimmedName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException(DeckName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new DeckName(trimmedName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 27,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/NewDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Parses input arguments and creates a NewDeckCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandParser implements Parser\u003cNewDeckCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewDeckCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a NewDeckCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public NewDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            DeckName name \u003d ParserUtil.parseDeckName(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new NewDeckCommand(deck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/RemoveDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Parses input arguments and creates a RemoveDeckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandParser implements Parser\u003cRemoveDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a RemoveDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public RemoveDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new RemoveDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deck/SelectDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.SelectDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * and returns a SelectDeckCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public SelectDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new SelectDeckCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_TRANSLATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_TRANSLATION)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation translation \u003d ParserUtil.parseTranslation(argMultimap.getValue(PREFIX_TRANSLATION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new Entry(word, translation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 18,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_TRANSLATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WORD).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            editEntryDescriptor.setWord(ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSLATION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            editEntryDescriptor.setTranslation(ParserUtil.parseTranslation("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    argMultimap.getValue(PREFIX_TRANSLATION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/entry/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String[] wordKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(wordKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Duplicates are not allowed (by .isSameEntry comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueEntryList entries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates an AddressBook using the Entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entries.setEntries(entries);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //// entry-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if an entry with the same identity as {@code entry} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds an entry to the word bank."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry must not already exist in the word bank."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.add(entry);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the given entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeEntry(Entry key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the word bank."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck(Deck key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        decks.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds a deck to the word bank."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck must not already exist in the word bank."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        decks.add(deck);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" entries\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 entries.equals(((AddressBook) other).entries));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 69,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if an entry with the same identity as {@code entry} exists in the word bank."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Deletes the given entry."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry must exist in the word bank."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void deleteEntry(Entry target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds the given entry."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code entry} must not already exist in the word bank."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the word bank."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void setEntry(Entry target, Entry editedEntry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered entry list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the word bank."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Removes the given deck."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck must exist in the word bank."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void removeDeck(Deck target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code deck} must not already exist in the word bank."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Selects the deck at the specified index"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param index of the selected deck"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void selectDeck (Index index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Retrieves the deck last selected by the user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deck list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 52,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Optional\u003cIndex\u003e currentDeckIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredEntries \u003d new FilteredList\u003c\u003e(this.addressBook.getEntryList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.addressBook.getDeckList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Word Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return currentDeck.hasEntry(entry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.removeEntry(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.addEntry(entry);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return addressBook.hasDeck(deck);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.removeDeck(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addDeck(deck);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void selectDeck (Index index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeckIndex \u003d Optional.of(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (currentDeckIndex.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredDecks.get(currentDeckIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck(); //keeps returning null causing null error"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Deck deck \u003d new Deck(new DeckName(\"Deck 1\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"StubEntry\"), new Translation(\"Stub o Entry o\")));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"ScrollBarTestEntry\"), new Translation(\"Scroll o Bar o\")));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"Vignesh Hurry up\"), new Translation(\"Vigneshu hurry uppo\")));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deck.addEntry(new Entry(new Word(\"ModelManager.java\"), new Translation(\"Line 173\")));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return deck.getFilteredEntryList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck currentDeck \u003d getCurrentDeck();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        currentDeck.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 filteredDecks.equals(other.filteredDecks);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 69,
      "-": 138,
      "gabrielsimbingyang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Unmodifiable view of a word bank"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the entries list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cEntry\u003e getEntryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an unmodifiable view of the deck list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a deck of flashcards"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final DeckName deckName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private UniqueEntryList entries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Name must be present and not null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param deckName name of the deck of cards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck(DeckName deckName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.filteredEntries \u003d new FilteredList\u003c\u003e(getEntryList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckName getDeckName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.deckName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public UniqueEntryList getEntries() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this.entries;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.add(entry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void removeEntry(Entry target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.remove(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Two decks are considered to be the same if they have the same name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between the two decks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param otherDeck to be compared with the current deck"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @return true if both decks have the same name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 otherDeck.getDeckName().equals(getDeckName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if both decks have the same name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between two deck objects"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof Deck // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 getDeckName().equals(((Deck) other).getDeckName())); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Objects.hash(deckName, entries);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        builder.append(getDeckName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(\" Cards: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            builder.append (entry.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/DeckName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deck name cannot be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final String deckName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs an {@code DeckName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param deckName A valid deck name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckName(String deckName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidDeckName(deckName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidDeckName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof DeckName // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 deckName.equals(((DeckName) other).deckName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return deckName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the deckList contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds an deck to the deckList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the deck {@code target} in the deckList with {@code editedDeck}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Removes the equivalent deck from the deckList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Word word;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Translation translation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry(Word word, Translation translation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(word, translation);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Word getWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Translation getTranslation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if both entries of the same word have the same translation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between the two entries"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean isSameEntry(Entry otherEntry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (otherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherEntry !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 otherEntry.getWord().equals(getWord())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 (otherEntry.getTranslation().equals(getTranslation()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if both entries have the same translation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * This defines a notion of equality between two entry objects"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry otherEntry \u003d (Entry) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return otherEntry.getWord().equals(getWord())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 otherEntry.getTranslation().equals(getTranslation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Objects.hash(word, translation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        builder.append(getWord())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(\" Translation: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(getTranslation());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 30,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Translation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry\u0027s translation in the word bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTranslation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Translation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Translation cannot be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public final String translation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs an {@code Translation}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param translation A valid translation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Translation(String translation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(translation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidTranslation(translation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns if a given string is a valid translation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidTranslation(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof Translation // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 translation.equals(((Translation) other).translation)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return translation.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 21,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/UniqueEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A list of entries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * An entry is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * entries uses Entry#isSameEntry(Entry) for equality so as to ensure that the entry being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of an entry uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * @see Entry#isSameEntry(Entry)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds an entry to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Replaces the contents of this list with {@code entries}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!entriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if {@code entries} contains only unique entries."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private boolean entriesAreUnique(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                if (entries.get(i).isSameEntry(entries.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/Word.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Represents a Entry\u0027s word in the word bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class Word {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Words cannot be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Word cannot be null or a blank space"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public final String word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a {@code Word}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @param word A valid word."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Word(String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        checkArgument(isValidWord(word), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns true if a given string is a valid word."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static boolean isValidWord(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof Word // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 word.equals(((Word) other).word)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return word.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 21,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/entry/WordContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Tests that a {@code Entry}\u0027s {@code Word} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public WordContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getWord().word, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                || (other instanceof WordContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 keywords.equals(((WordContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation is unable to find the specified deck"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation will result in duplicate decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(\"Operation would result in duplicate entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Signals that the operation is unable to find the specified entry"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Entry[] getSampleEntries() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Alex Yeoh\"), new Translation(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Bernice Yu\"), new Translation(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Charlotte Oliveiro\"), new Translation(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"David Li\"), new Translation(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Irfan Ibrahim\"), new Translation(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            new Entry(new Word(\"Roy Balakrishnan\"), new Translation(\"royb@example.com\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry sampleEntry : getSampleEntries()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            sampleAb.addEntry(sampleEntry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 13,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final String word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final String translation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"word\") String word,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                            @JsonProperty(\"translation\") String translation) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d translation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        word \u003d source.getWord().word;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        translation \u003d source.getTranslation().translation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted entry."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (word \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Word.isValidWord(word)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final Word modelWord \u003d new Word(word);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (translation \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                    Translation.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!Translation.isValidTranslation(translation)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new IllegalValueException(Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final Translation modelTranslation \u003d new Translation(translation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(modelWord, modelTranslation);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 32,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Entries list contains duplicate entry(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given entries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entries.addAll(entries);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entries.addAll(source.getEntryList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (JsonAdaptedEntry jsonAdaptedEntry : entries) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            Entry entry \u003d jsonAdaptedEntry.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (addressBook.hasEntry(entry)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            addressBook.addEntry(entry);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a {@code EntryCode} with the given {@code Entry} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        name.setText(deck.getDeckName().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        email.setText(\"Entries:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a {@code EntryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new deckListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code EntryCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    class deckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryCode} with the given {@code Entry} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        name.setText(entry.getWord().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        email.setText(entry.getTranslation().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 8,
      "-": 50,
      "gabrielsimbingyang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String FXML \u003d \"EntryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public EntryListPanel(ObservableList\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListView.setItems(entryList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code EntryCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    class EntryListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 44,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"github.com/AY2021S1-CS2103T-T09-4/tp/blob/master/docs/UserGuide.md\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String ADD_COMMAND \u003d \"Adding a new entry: add\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: add \u003cSTRING IN ENGLISH\u003e | \u003cSTRING IN JAPANESE\u003e\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"Listing all entries: list\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: list\\n\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String EDIT_COMMAND \u003d \"Editing an entry: edit\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: edit \u003cINDEX\u003e e/\u003cSTRING IN ENGLISH\u003e f/\u003cSTRING IN JAPANESE\u003e\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"Deleting an entry: delete\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: edit \u003cINDEX\u003e\\n\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"Clearing all entries: clear\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: clear\\n\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String EXIT_COMMAND \u003d \"Exiting the program: exit\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + \"Format: exit\\n\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String COMMAND_LIST \u003d ADD_COMMAND + LIST_COMMAND + EDIT_COMMAND"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + DELETE_COMMAND + CLEAR_COMMAND + EXIT_COMMAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Please refer to the user guide for more information: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "                                            + USERGUIDE_URL + COMMAND_LIST;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vigneshbhuvan-nus"
        },
        "content": "        helpMessage.setFont(new Font(\"Arial\", 16));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vigneshbhuvan-nus": 28,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private EntryListPanel entryListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private StackPane entryListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private MenuItem Deck1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private MenuItem Deck2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        entryListPanel \u003d new EntryListPanel(logic.getFilteredEntryList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryListPanel getEntryListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return entryListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void handleDeck() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 192,
      "gabrielsimbingyang": 26
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 8
    }
  },
  {
    "path": "src/main/resources/view/EntryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Word Bank\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      \u003cVBox prefHeight\u003d\"163.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "               \u003cMenu  mnemonicParsing\u003d\"false\" text\u003d\"Deck\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                 \u003citems\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                   \u003cMenuItem fx:id\u003d\"Deck1\" mnemonicParsing\u003d\"false\" text\u003d\"Deck 1\" onAction\u003d\"#handleDeck\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                     \u003cMenuItem fx:id\u003d\"Deck2\" mnemonicParsing\u003d\"false\" text\u003d\"Deck 2\" onAction\u003d\"#handleDeck\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                 \u003c/items\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003cVBox fx:id\u003d\"deckList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003cVBox fx:id\u003d\"entryList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "          \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 48,
      "gabrielsimbingyang": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Deck deck \u003d new Deck (new DeckName(\"test\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(deck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 10,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_WORD_JAPANESE \u003d \"Earth\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_WORD_SPANISH \u003d \"Please\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_TRANSLATION_JAPANESE \u003d \"地球\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_TRANSLATION_SPANISH \u003d \"Por favor\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_DECK_NAME_JAPANESE \u003d \"Japanese\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String VALID_DECK_NAME_SPANISH \u003d \"Spanish\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String WORD_DESC_JAPANESE \u003d \" \" + PREFIX_WORD + VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String WORD_DESC_SPANISH \u003d \" \" + PREFIX_WORD + VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String TRANSLATION_DESC_JAPANESE \u003d \" \" + PREFIX_TRANSLATION + VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String TRANSLATION_DESC_SPANISH \u003d \" \" + PREFIX_TRANSLATION + VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_DECK_NAME \u003d \"\"; // blank deck name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_WORD_DESC \u003d \" \" + PREFIX_WORD + \" \"; // blank word"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String INVALID_TRANSLATION_DESC \u003d \" \" + PREFIX_TRANSLATION + \"  \"; // blank translation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_JAPANESE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_SPANISH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DESC_JAPANESE \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DESC_SPANISH \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_SPANISH)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * - the address book, filtered entry list and selected entry in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the entry at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static void showEntryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d model.getFilteredEntryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final String[] splitWord \u003d entry.getWord().word.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(new WordContainsKeywordsPredicate(Arrays.asList(splitWord[0])));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(1, model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 36,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEntryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EditEntryDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptorWithSameValues \u003d new EditEntryDescriptor(DESC_JAPANESE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DESC_JAPANESE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DESC_JAPANESE.equals(DESC_JAPANESE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(DESC_SPANISH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor editedAmy \u003d new EditEntryDescriptorBuilder(DESC_JAPANESE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different translation -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_JAPANESE).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DESC_JAPANESE.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 20,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/NewDeckCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Deck) for {@code NewDeckCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_newDeck_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedModel.addDeck(validDeck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandSuccess(new NewDeckCommand(validDeck), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.addDeck(validDeck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck deckInList \u003d model.getAddressBook().getDeckList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(new NewDeckCommand(deckInList), model, NewDeckCommand.MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/NewDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NewDeckCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_deckAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommandTest.ModelStubAcceptingDeckAdded modelStub \u003d new NewDeckCommandTest.ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        CommandResult commandResult \u003d new NewDeckCommand(validDeck).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.decksAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand newDeckCommand \u003d new NewDeckCommand(validDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommandTest.ModelStub modelStub \u003d new NewDeckCommandTest.ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(CommandException.class, NewDeckCommand.MESSAGE_DUPLICATE_DECK, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                newDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck japanese \u003d new DeckBuilder().withDeckName(\"Japanese\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck spanish \u003d new DeckBuilder().withDeckName(\"Spanish\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addJapaneseCommand \u003d new NewDeckCommand(japanese);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addSpanishCommand \u003d new NewDeckCommand(spanish);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addJapaneseCommand.equals(addJapaneseCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        NewDeckCommand addJapaneseCommandCopy \u003d new NewDeckCommand(japanese);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addJapaneseCommand.equals(addJapaneseCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addJapaneseCommand.equals(addSpanishCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void selectDeck (Index index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that contains a single Deck."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubWithDeck extends NewDeckCommandTest.ModelStub {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that always accept the deck being added."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends NewDeckCommandTest.ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 92,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/RemoveDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * {@code RemoveDeckCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_invalidRemoveIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        RemoveDeckCommand removeDeckCommand \u003d new RemoveDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertCommandFailure(removeDeckCommand, model, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_entryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStubAcceptingEntryAdded modelStub \u003d new ModelStubAcceptingEntryAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEntry).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEntry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(Arrays.asList(validEntry), modelStub.entriesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void execute_duplicateEntry_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEntry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEntry(validEntry);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENTRY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry alice \u003d new EntryBuilder().withWord(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry bob \u003d new EntryBuilder().withWord(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void removeDeck(Deck target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void selectDeck (Index index) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Deck stub which accepts all entries"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class DeckStub extends Deck {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private ArrayList\u003cEntry\u003e entries;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeckStub (String deckName) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            super(new DeckName(deckName));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void add (Entry entry) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            entries.add(entry);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that contains a single entry."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubWithEntry extends ModelStub {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final Entry entry;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        ModelStubWithEntry(Entry entry) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.entry \u003d entry;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return this.entry.isSameEntry(entry);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new DeckStub(\"stub\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A Model stub that always accept the entry being added."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private class ModelStubAcceptingEntryAdded extends ModelStub {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final ArrayList\u003cEntry\u003e entriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return entriesAdded.stream().anyMatch(entry::isSameEntry);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            entriesAdded.add(entry);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return new DeckStub(\"stub\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 107,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * Contains integration tests (interaction with the Model and Deck) and unit tests for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private void showNoEntry(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.updateFilteredEntryList(p -\u003e false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(model.getFilteredEntryList().isEmpty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 12,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_JAPANESE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor copyDescriptor \u003d new EditEntryDescriptor(DESC_JAPANESE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_JAPANESE)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_SPANISH)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 13,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 8,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deck/entry/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.commands.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedModel.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(entry));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new AddCommand(entry), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + EntryUtil.getEditEntryDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(new FindCommand(new WordContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 22,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_WORD \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_TRANSLATION \u003d \"      \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_WORD \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_TRANSLATION \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWord((String) null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWord(INVALID_WORD));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_validValueWithoutWhitespace_returnsWord() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(VALID_WORD));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseWord_validValueWithWhitespace_returnsTrimmedWord() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String wordWithWhitespace \u003d WHITESPACE + VALID_WORD + WHITESPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(wordWithWhitespace));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTranslation((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTranslation(INVALID_TRANSLATION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_validValueWithoutWhitespace_returnsTranslation() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation expectedTranslation \u003d new Translation(VALID_TRANSLATION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedTranslation, ParserUtil.parseTranslation(VALID_TRANSLATION));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parseTranslation_validValueWithWhitespace_returnsTrimmedTranslation() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String translationWithWhitespace \u003d WHITESPACE + VALID_TRANSLATION + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Translation expectedTranslation \u003d new Translation(VALID_TRANSLATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedTranslation, ParserUtil.parseTranslation(translationWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 31,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/NewDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_JAPANESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.NewDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class NewDeckCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private NewDeckCommandParser parser \u003d new NewDeckCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_fieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_SPANISH,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_JAPANESE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_DECK_NAME, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                NewDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/RemoveDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.deck.RemoveDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class RemoveDeckCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private RemoveDeckCommandParser parser \u003d new RemoveDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemoveDeckCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSLATION_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_SPANISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.AddCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(SPANISH).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // multiple words - last word accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_JAPANESE + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // multiple translations - last translation accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_SPANISH + TRANSLATION_DESC_JAPANESE + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(JAPANESE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_JAPANESE + TRANSLATION_DESC_JAPANESE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // missing word prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_SPANISH + TRANSLATION_DESC_SPANISH, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // missing translation prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_SPANISH + VALID_TRANSLATION_SPANISH, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_SPANISH + VALID_TRANSLATION_SPANISH,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + TRANSLATION_DESC_SPANISH, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid translation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_SPANISH + INVALID_TRANSLATION_DESC, Translation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + TRANSLATION_DESC_SPANISH, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + WORD_DESC_SPANISH + TRANSLATION_DESC_SPANISH,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 40,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSLATION_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.EditCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"-5\" + WORD_DESC_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"0\" + WORD_DESC_JAPANESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC, Word.MESSAGE_CONSTRAINTS); // invalid word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSLATION_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                Translation.MESSAGE_CONSTRAINTS); // invalid translation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + INVALID_TRANSLATION_DESC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE + WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + WORD_DESC_JAPANESE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withWord(VALID_WORD_JAPANESE).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // translation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TRANSLATION_DESC_JAPANESE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                + TRANSLATION_DESC_JAPANESE + TRANSLATION_DESC_SPANISH;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 46,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deck/entry/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.logic.parser.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.parser.entry.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getEntryList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void resetData_withDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // Two decks with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(JAPANESE_DECK, editedJapaneseDeck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newDecks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasEntry(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_entryNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addressBook.hasEntry(JAPANESE_1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_entryInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addEntry(JAPANESE_1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addressBook.hasEntry(JAPANESE_1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_entryWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addEntry(JAPANESE_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addressBook.hasEntry(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasDeck(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(addressBook.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addressBook.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(addressBook.hasDeck(editedJapaneseDeck));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getEntryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getEntryList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getDeckList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * A stub ReadOnlyAddressBook whose entries list can violate interface constraints."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final ObservableList\u003cEntry\u003e entries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBookStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return entries;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 52,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasEntry_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEntry(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDeck(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void hasDeck_deckInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        modelManager.addDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withDeck(JAPANESE_DECK).withDeck(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        modelManager.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 18,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeckName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidDeckName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidDeck \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeckName(invalidDeck));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidDeckName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null deck name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DeckName.isValidDeckName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid deck name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DeckName.isValidDeckName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(DeckName.isValidDeckName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid deck name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"French\")); // allows alphabets"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Español\")); // allows special characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"日本語\")); // allows special characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Korean 1\")); // allows numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(DeckName.isValidDeckName(\"Japanese Intermediate 2 Lesson 5\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.isSameDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).withDeckName(VALID_WORD_JAPANESE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(editedJapaneseDeck));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same deck name -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedSpanishDeck \u003d new DeckBuilder(SPANISH_DECK).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(SPANISH_DECK.isSameDeck(editedSpanishDeck));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck japaneseCopy \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(japaneseCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(JAPANESE_DECK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(SPANISH_DECK));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different deck name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapanese \u003d new DeckBuilder(JAPANESE_DECK).withDeckName(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(editedJapanese));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.JAPANESE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.SPANISH_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.deck.DeckBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapaneseDeck \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueDeckList.contains(editedJapaneseDeck));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.add(JAPANESE_DECK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(null, JAPANESE_DECK));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, JAPANESE_DECK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, JAPANESE_DECK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Deck editedJapanese \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, editedJapanese);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(editedJapanese);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, SPANISH_DECK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueIdentity_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDeck(JAPANESE_DECK, SPANISH_DECK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.remove(JAPANESE_DECK));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.remove(JAPANESE_DECK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(SPANISH_DECK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueDeckList.add(SPANISH_DECK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(JAPANESE_DECK, JAPANESE_DECK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDecks(listWithDuplicateDecks));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueDeckList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/EntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isSameEntry() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.isSameEntry(JAPANESE_1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.isSameEntry(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different phone and translation -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same word, same translation, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.isSameEntry(editedJapanese));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry japaneseCopy \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.equals(japaneseCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(JAPANESE_1.equals(JAPANESE_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(SPANISH));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).withWord(VALID_WORD_SPANISH).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(editedJapanese));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different translation -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        editedJapanese \u003d new EntryBuilder(JAPANESE_1).withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(JAPANESE_1.equals(editedJapanese));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/TranslationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TranslationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Translation(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidTranslation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidTranslation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Translation(invalidTranslation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidTranslation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null translation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Translation.isValidTranslation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // blank translation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Translation.isValidTranslation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Translation.isValidTranslation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid translation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // special characters local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"a1+be!@example1.com\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Translation.isValidTranslation(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/UniqueEntryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.SPANISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private final UniqueEntryList uniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(uniqueEntryList.contains(JAPANESE_1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueEntryList.contains(JAPANESE_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void contains_entryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(uniqueEntryList.contains(editedJapanese));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void add_duplicateEntry_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.add(JAPANESE_1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_nullTargetEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(null, JAPANESE_1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_nullEditedEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_targetEntryNotInList_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, JAPANESE_1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryIsSameEntry_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, JAPANESE_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        Entry editedJapanese \u003d new EntryBuilder(JAPANESE_1).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, editedJapanese);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(editedJapanese);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntry(JAPANESE_1, SPANISH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntry_editedEntryHasNonUniqueIdentity_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntry(JAPANESE_1, SPANISH));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_entryDoesNotExist_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.remove(JAPANESE_1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void remove_existingEntry_removesEntry() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.remove(JAPANESE_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_nullUniqueEntryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntries((UniqueEntryList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_uniqueEntryList_replacesOwnListWithProvidedUniqueEntryList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntries(expectedUniqueEntryList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntries((List\u003cEntry\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.add(JAPANESE_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e entryList \u003d Collections.singletonList(SPANISH);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        uniqueEntryList.setEntries(entryList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        expectedUniqueEntryList.add(SPANISH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void setEntries_listWithDuplicateEntries_throwsDuplicateEntryException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        List\u003cEntry\u003e listWithDuplicateEntries \u003d Arrays.asList(JAPANESE_1, JAPANESE_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntries(listWithDuplicateEntries));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            -\u003e uniqueEntryList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/WordContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d new WordContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicateCopy \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void test_wordContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void test_wordDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // Keywords match phone, translation and address, but does not match word"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withWord(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .withTranslation(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 25,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/entry/WordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.model.deck.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class WordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Word(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void constructor_invalidWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String invalidWord \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Word(invalidWord));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void isValidWord() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // null word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Word.isValidWord(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Word.isValidWord(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertFalse(Word.isValidWord(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        // valid word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertTrue(Word.isValidWord(\"David Roger Jackson Ray Jr 2nd\")); // long words"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.entry.TypicalEntries.JAPANESE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_WORD \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String INVALID_TRANSLATION \u003d \"      \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_WORD \u003d JAPANESE_2.getWord().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final String VALID_TRANSLATION \u003d JAPANESE_2.getTranslation().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_validEntryDetails_returnsEntry() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(JAPANESE_2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(JAPANESE_2, entry.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_invalidWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new JsonAdaptedEntry(INVALID_WORD, VALID_TRANSLATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d Word.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_nullWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(null, VALID_TRANSLATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_invalidTranslation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                new JsonAdaptedEntry(VALID_WORD, INVALID_TRANSLATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d Translation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_WORD, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Translation.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 29,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.FRENCH_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.GERMAN_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void readAddressBook_invalidEntryAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidEntryAddressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        original.addDeck(FRENCH_DECK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        original.addDeck(GERMAN_DECK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 7,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.testutil.entry.TypicalEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final Path TYPICAL_ENTRIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEntriesAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final Path INVALID_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEntryAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private static final Path DUPLICATE_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEntryAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_typicalEntriesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ENTRIES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBook typicalEntriesAddressBook \u003d TypicalEntries.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertEquals(addressBookFromFile, typicalEntriesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_invalidEntryFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ENTRY_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public void toModelType_duplicateEntries_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ENTRY_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_ENTRY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.testutil.deck.TypicalDecks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withEntry(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Adds a new {@code Deck} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public AddressBookBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        addressBook.addDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the middle index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the last index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the entry in the {@code model}\u0027s entry list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static Entry getEntry(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return model.getFilteredEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/deck/DeckBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.DeckName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_DECK_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private DeckName deckName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code DeckBuilder} with the default details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckName \u003d new DeckName(DEFAULT_DECK_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code deckToCopy}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        deckName \u003d deckToCopy.getDeckName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code DeckName} of the {@code DeckName} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public DeckBuilder withDeckName(String deckName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.deckName \u003d new DeckName(deckName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Deck(deckName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/deck/TypicalDecks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck JAPANESE_DECK \u003d new DeckBuilder().withDeckName(\"Japanese\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck SPANISH_DECK \u003d new DeckBuilder().withDeckName(\"Spanish\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck KOREAN_DECK \u003d new DeckBuilder().withDeckName(\"Korean\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck FRENCH_DECK \u003d new DeckBuilder().withDeckName(\"French\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Deck GERMAN_DECK \u003d new DeckBuilder().withDeckName(\"German\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private TypicalDecks() {} // prevents instantiation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical decks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            ab.addDeck(deck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAPANESE_DECK, SPANISH_DECK, KOREAN_DECK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EditEntryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class to help with building EditEntryDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EditEntryDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private EditEntryDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.descriptor \u003d new EditEntryDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an {@code EditEntryDescriptor} with fields containing {@code entry}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder(Entry entry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setWord(entry.getWord());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setTranslation(entry.getTranslation());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Word} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder withWord(String word) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setWord(new Word(word));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Translation} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptorBuilder withTranslation(String translation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.setTranslation(new Translation(translation));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EditEntryDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EntryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Translation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Word;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_WORD \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final String DEFAULT_TRANSLATION \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Word word;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private Translation translation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Creates a {@code EntryBuilder} with the default details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        word \u003d new Word(DEFAULT_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        translation \u003d new Translation(DEFAULT_TRANSLATION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Initializes the EntryBuilder with the data of {@code entryToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        word \u003d entryToCopy.getWord();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        translation \u003d entryToCopy.getTranslation();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Word} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder withWord(String word) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.word \u003d new Word(word);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Sets the {@code Translation} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public EntryBuilder withTranslation(String translation) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        this.translation \u003d new Translation(translation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new Entry(word, translation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/EntryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSLATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.logic.commands.entry.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class for Entry."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class EntryUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an add command string for adding the {@code entry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getAddCommand(Entry entry) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the part of command string for the given {@code entry}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getEntryDetails(Entry entry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sb.append(PREFIX_WORD + entry.getWord().word + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        sb.append(PREFIX_TRANSLATION + entry.getTranslation().translation + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns the part of command string for the given {@code EditEntryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static String getEditEntryDescriptorDetails(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.getWord().ifPresent(word -\u003e sb.append(PREFIX_WORD).append(word.word).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        descriptor.getTranslation().ifPresent(translation -\u003e sb.append(PREFIX_TRANSLATION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                .append(translation.translation).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/entry/TypicalEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "package seedu.address.testutil.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_JAPANESE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSLATION_SPANISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_JAPANESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_SPANISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "import seedu.address.model.deck.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_1 \u003d new EntryBuilder().withWord(\"Apple\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"りんご\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_2 \u003d new EntryBuilder().withWord(\"Bridge\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"橋\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_3 \u003d new EntryBuilder().withWord(\"Cat\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"猫\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE_4 \u003d new EntryBuilder().withWord(\"Deadline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"締め切り\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_1 \u003d new EntryBuilder().withWord(\"Summer\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"verano\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_2 \u003d new EntryBuilder().withWord(\"Winter\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"invierno\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH_3 \u003d new EntryBuilder().withWord(\"Spring\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"primavera\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry HOON \u003d new EntryBuilder().withWord(\"Hoon Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry IDA \u003d new EntryBuilder().withWord(\"Ida Mueller\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    // Manually added - Entry\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry JAPANESE \u003d new EntryBuilder().withWord(VALID_WORD_JAPANESE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(VALID_TRANSLATION_JAPANESE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static final Entry SPANISH \u003d new EntryBuilder().withWord(VALID_WORD_SPANISH)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            .withTranslation(VALID_TRANSLATION_SPANISH).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    private TypicalEntries() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical entries."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "            ab.addEntry(entry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    public static List\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAPANESE_1, JAPANESE_2, JAPANESE_3, JAPANESE_4,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "                SPANISH_1, SPANISH_2, SPANISH_3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IlyaRin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IlyaRin": 63
    }
  }
]
