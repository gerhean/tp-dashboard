[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "# McScheduler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-4/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "McScheduler is a **one-stop solution for McDonald\u0027s Shift Managers to manage shift scheduling and worker"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "contact/compensation, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "With the McScheduler, McDonald\u0027s Shift Managers can easily access all information needed for shift-work assignment."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "This is a team brownfield project, developed during a Software Engineering introductory module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "For the detailed documentation of this project, see the **[McScheduler Product Website](https://ay2021s1-cs2103-f10-4.github.io/tp/)**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "This project is based on the *AddressBook-Level3* project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13,
      "WangZijun97": 2,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "mainClassName \u003d \u0027mcscheduler.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//compileJava {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//    options.compilerArgs \u003c\u003c \"-Xlint:unchecked\" \u003c\u003c \"-Xlint:deprecation\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "plosslaw": 5,
      "sigmund-c": 4,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Foo Kai En"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cimg src\u003d\"images/wakululuu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[[github](https://github.com/wakululuu)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[[portfolio](team/wakululuu.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Responsibilities: Code quality, testing (secondary)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Guo Bohao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003cimg src\u003d\"images/plosslaw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[[github](http://github.com/plosslaw)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[[portfolio](team/plosslaw.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Sigmund Chianasta"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cimg src\u003d\"images/sigmund-c.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "[[github](http://github.com/sigmund-c)] [[portfolio](team/sigmund-c.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Role: Developer, Coordinator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Tan Su Yin"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u003cimg src\u003d\"images/tnsyn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[[github](http://github.com/tnsyn)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[[portfolio](team/tnsyn.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* Responsibilities: Integration"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Wang Zijun"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cimg src\u003d\"images/wangzijun97.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[[github](http://github.com/WangZijun97)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[[portfolio](team/WangZijun97.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "plosslaw": 5,
      "tnsyn": 4,
      "sigmund-c": 8,
      "WangZijun97": 4,
      "-": 33
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `WorkerListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. `Logic` uses the `McSchedulerParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a worker)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cWorker\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `McScheduler`, which `Worker` references. This allows `McScheduler` to only require one `Tag` object per unique `Tag`, instead of each `Worker` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Classes used by multiple components are in the `mcscheduler.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "### Adding of a Worker feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The adding of workers is core to the functionality of the system. Users are able to add important information to each"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "worker, which will help them assign workers to shifts they are most suited for."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The mechanism for adding a worker is facilitated by a `Worker` class. A `Worker` has a `Name`, a"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`Phone`, a `Pay`, an optional `Role` set and an optional `Unavailability` set."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "![Worker Class Diagram](images/WorkerClassDiagram.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "A user can add a `Worker` to the `McScheduler` by running a `worker-add` command. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#### Example usage scenario"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Given below is an example usage scenario and how the add worker feature behaves at each step after the user has"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "launched the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 1. The user executes the command `worker-add n/John hp/98765432 p/9.0 a/400 Scheduler Lane`. `McSchedulerParser`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "creates a `WorkerAddCommandParser` and calls the `WorkerAddCommandParser#parse()` method."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Step 2. The fields `n/`, `hp/`, `p/`, and `a/` are parsed within `WorkerAddCommandParser#parse()` and an instance of"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`Name`, `Phone`, `Pay` and `Address` are created respectively. These objects are passed as parameters to the `Worker`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "constructor and a new `Worker` object is created."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Step 3. A `WorkerAddCommand` with the newly created `Worker` object is returned and executed. The `Worker` object is"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "added to and stored inside the `Model`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The following sequence diagram shows how `Worker` is added."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "![Add Worker Sequence Diagram](images/AddWorkerSequenceDiagram.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Shift feature"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Similar to workers, adding and manipulating shifts is a key functionality of the McScheduler. Managers will be able to make use of "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "shifts to set role requirements, add or remove workers and assign leave. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Shifts are represented by a `Shift` class. It contains important detail related to shifts such as the day (through `ShiftDay`),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the time (through `ShiftTime`) and role requirements (through `RoleRequirement`) that details how many workers are needed"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "at which positions in a given shift."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The following diagram details `Shift` and how it is represented in the App model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![Shift Class Diagram](images/ShiftClassDiagram.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Commands"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The following commands have been implemented to work with `Shift`:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `ShiftAddCommand` to add new shifts"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `ShiftEditCommand` to edit existing shifts"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `ShiftDeleteCommand` to delete existing shifts"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "These commands work similarly to the `Worker` based commands."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Example Usage Scenario"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Given below is an example usage scenario and how the edit shift feature works at each step."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 1. User enters the command `shift-edit 2 d/FRI`. `McSchedulerParser` creates a `ShiftEditCommandParser` and calls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the `ShiftEditCommandParser#parser()` method."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Step 2. The preamble index and field `d/` are parsed within `ShiftEditCommandParser#parser()` and creates an instance of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`ShiftEditCommandParser` then creates a `ShiftEditDescriptor` with a new `ShiftDay`. Should there be other optional fields"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "such as `ShiftTime` or `RoleRequirement` as requested by the uder in their command, similar instances will be created and added"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "to the `ShiftEditDescriptor`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Step 3. A `ShiftEditCommand` with the `ShiftEditDescriptor` and the index of the `Shift` of interest is returned and executed,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "setting the edited shift within the model. This results in the replacement of the `Shift` object within the model with a newly"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "created `Shift` object based on the new attributes."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The following sequence diagram demonstrates this editing process (as per the example)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![Edit Shift Sequence Diagram](images/EditShiftSequenceDiagram.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Should there be other information to be edited"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "as requested by the user, there will be other objects created besides `ShiftDay`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "### Unavailability feature"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The unavailability feature allows users to add unavailable timings to a `Worker`, which comprise a day and a time."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The setting prevents workers from being assigned to shift slots that they are unavailable for."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The proposed mechanism is facilitated by `ParserUtil` and the existing system for adding and editing workers."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#### Unavailability"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Unavailability is represented by an `Unavailability` class. Since a worker\u0027s unavailable timings are only relevant"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "in the context of existing shift slots, `Unavailability` contains a `ShiftDay` and a `ShiftTime`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "![Unavailability Class Diagram](images/UnavailabilityClassDiagram.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Instances of `Unavailability` can be created on 2 occasions:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "1. During a `worker-add` command, prefixed with `u/`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "2. During a `worker-edit` command, prefixed with `u/`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "To increase the efficiency of adding a worker\u0027s unavailable timings, users may type `u/[DAY] FULL` instead of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`u/[DAY] AM` and `u/[DAY] PM` separately. However, since a `ShiftTime` only accepts the values `AM` and `PM`,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "functionality has been added to support the creation of an AM `Unavailability` and a PM `Unavailability` when"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`u/[DAY] FULL` is entered. The `ParserUtil` class supports this during parsing through:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "- `ParserUtil#parseUnavailability()` — Parses a String and creates an `Unavailability` object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "- `ParserUtil#createMorningUnavailability()` — Generates a String of the format `[DAY] AM`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "- `ParserUtil#createAfternoonUnavailability()` — Generates a String of the format `[DAY] PM`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "- `ParserUtil#parseUnavailabilities()` — Iterates through a collection of Strings and creates an `Unavailability`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "object for each"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#### Example usage scenario"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Given below is an example usage scenario and how the unavailability feature behaves at each step after the user has"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "launched the application."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 1. The user executes a `worker-add` command `worker-add ... u/MON FULL`. `McSchedulerParser` creates a"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`WorkerAddCommandParser` and calls the `WorkerAddCommandParser#parse()` method."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Step 2. Within `WorkerAddCommandParser#parse()`, `ParserUtil#parseUnavailabilities()` is called to generate an"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "`Unavailability` set from the given `u/MON FULL` field. `ParserUtil#parseUnavailabilities()` checks whether"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "the keyword `FULL` (case-insensitive) is present in the input. In this case, since it is present, `ParserUtil#createMorningUnavailabilityString()`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "is called to generate a `MON AM` String and `ParserUtil#createAfternoonUnavailabilityString()` is called to generate a `MON PM`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "String. Inside `ParserUtil#parseUnavailabilities()`, `ParserUtil#parseUnavailability()` is called on both Strings"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "and 2 valid `Unavailability` objects are created, before being added to the returnable `Unavailability` set."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Step 3. The `Unavailability` set is passed into the constructor of the `Worker` class to instantiate a `Worker` object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "with the unavailable timings `MON AM` and `MON PM`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The following sequence diagram shows how unavailable timings are added to a `Worker`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "![Unavailability Sequence Diagram](images/AddUnavailabilitySequenceDiagram.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Assign/unassign feature"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The assign/unassign feature allows the user to assign/unassign a worker to/from a role in a shift."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "This mechanism is facilitated by adding/deleting `Assignment` objects in the `McScheduler`. Each `Assignment` object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "stores a `Shift`, `Worker` and `Role` object. The `McScheduler` maintains a `UniqueAssignmentList`, which enforces"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "uniqueness between `Assignment` objects by comparing them using `Assignment#isSameAssignment(Assignment)`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![AssignmentClassDiagram](images/AssignmentClassDiagram.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The operations supporting the adding/deleting of `Assignment` objects are exposed in the `Model` interface as"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`Model#addAssignment(Assignment)` and `Model#deleteAssignment(Assignment)`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Example usage scenario"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Step 1. The user executes `assign s/1 w/1 r/Cashier` to assign the 1st worker the role of a cashier in the 1st shift in"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the McScheduler. The `assign` command creates an `Assignment` object, storing the 1st `Shift`, 1st `Worker` and cashier"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`Role` objects. The command then checks if there already exists an `assignment` with the same `shift` and `worker` in"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the model, as well as the `unavailability` of the `worker` to be assigned. If the `assignment` is unique and the"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`worker` is available, the `assignment` is added to the list of `assignments` in the `model`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![AssignSequenceDiagram](images/AssignSequenceDiagram.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AssignCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Step 2. The user realises the previous command was a mistake and executes `unassign s/1 w/1` to unassign the 1st worker"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "from the 1st shift in the McScheduler. The `unassign` command creates a dummy `Assignment` object, storing the 1st"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`Shift` and 1st `Worker` objects. The command then uses the dummy `assignment` as an identifier to identify the"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`assignment` to be deleted from the list of `assignments` in the `model`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Role feature"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "The role feature allows users to add roles to a `Worker` and add `RoleRequirement` to a `Shift`. When assigning a `Worker` to a `Shift` under a particular `Role`,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "we check that the `Worker` has the corresponding `Role` tagged to the `Worker` as the `Role` in the `RoleRequirement` of the particular `Shift`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "The `Role` constructor takes in a `String` and creates a `Role` object with the according `roleName`. When tagging a `Worker` with a `Role`, we check that the `Role` is an allowed `Role` by checking if it exists in the "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "`UniqueRoleList` of the McScheduler."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "![RoleClassDiagram](images/RoleClassDiagram.png)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "#### Commands"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "The following commands have been implemented to work with `Role`:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "- `RoleAddCommand` to add new roles to `UniqueRoleList`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "- `RoleDeleteCommand` to delete existing roles in `UniqueRoleList`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "- `RoleListCommand` to list existing roles in `UniqueRoleList`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "#### Example usage scenario"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Step 1. The user executes `role-add cashier` to add the cashier role to the `UniqueRoleList` in the McScheduler `ModelManager`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "If the role being added already exists in the `UniqueRoleList`, `DuplicateRoleException` is thrown."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "![AddRoleSequenceDiagram](images/AddRoleSequenceDiagram.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `RoleAddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Step 2. The user realises the previous command was a mistake and executes `role-list` to get the index of the cashier role in the `UniqueRoleList`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Using the role index in the `UniqueRoleList`, the user executes `role-delete ROLE_INDEX` to remove the cashier role from the `UniqueRoleList`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Take/cancel leave feature"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The take/cancel leave feature allows users to set workers status to leave given a day and time. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The setting prevents workers from being allocated to a work shift for which they are taking leave."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The proposed mechanism to indicate that individuals are on leave makes use of the existing system for assigning workers"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "to shifts with a particular role. By making use of the existing assignment system, certain conflicts can be avoided:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- Assignment of a worker to a shift when they took leave for that shift will not result in two assignments to the same shift."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "##### Leave"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Leave is represented as an extension of `Role`. To prevent conflicts between `new Leave()` and `new Role(\"Leave\")`,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "these two objects are deemed equivalent through `Leave#equals()` and `Role#equals()`. This implementation should"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "be reconsidered if there should be a significant difference between these two objects."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![Leave Class Diagram](images/LeaveClassDiagram.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Due to their similarity, `Leave` objects are initiated using a common factory method as `Role` objects "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "through `Role#createRole()`, which will parse the given input as a `Role` or a `Leave` respectively. "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "This implementation prevents the creation of a role that has the same name as a leave."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "##### Leave Assignment"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Assignment makes use of the `Assignment` class features using `Leave` as the role."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "##### Commands"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Since `Leave` is essentially an extension of the assignment system, commands related to leave are very similar"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "to commands related to assignments."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `TakeLeaveCommand` is a wrapper for `AssignCommand` and sets a worker to leave for specific shift. The following"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "diagram demonstrates how this works."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![TakeLeaveCommand Sequence Diagram](images/LeaveCommandsSequenceDiagram.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `CancelLeaveCommand` is very similar to `UnassignCommand`. However, there is a need to check if the assignment being"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "removed represents a leave taken and not a normal role assignment. Hence, `CancelLeaveCommand` is implemented"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "separately and not as a wrapper. However, its implementation details is almost identical to `UnassignCommand`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "For more information, see [Implementation for Assign/Unassign Feature](#assignunassign-feature)."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "##### Mass Operation Commands"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "To increase the convenience of use for our expected typist user, we introduced a few mass operations related to leave:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `TakeLeaveCommand` and `CancelLeaveCommand` both allow for many worker to one shift leave assignment similar to "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`AssignCommand` and `UnassignCommand`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- `MassTakeLeaveCommand` and `MassCancelLeaveCommand` allow for one worker to many shift leave assignment."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  - These two mass commands allow for taking leave over a range of dates - similar to how leave is often planned "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  by workers."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  - These two commands do not require `Shift`s representing the datetime range to take leave to be present. A bare-bones "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  `Shift` with only `ShiftDate` and `ShiftTime` will be initialised for each `Shift` that has no identity equivalent "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  (via `Shift#isSameShift()`) `Shift` present in the McScheduler."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  - The two commands handle other `Assignment`s differently:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    - `MassTakeLeaveCommand` raises an error if the worker is already scheduled for a shift "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  (i.e. a non-leave `Assignment`)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    - `MassCancelLeaveCommand` searches for leaves in the datetime range and ignores non-leaves."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The following activity diagram describes the process behind `MassTakeLeaveCommand`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "![MassTakeLeaveCommand Activity Diagram](images/MassTakeLeaveActivityDiagram.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "##### Future Extensions - Leave Quota"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "The following leave quotas could be implemented, possibly using the existing `RoleRequirement` class:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- Quota of leave per worker"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "- Quota of leave per shift"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### MassOps Feature"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "For certain commands that will be frequently used (`assign`, `unassign`, `take-leave`, `cancel-leave`), mass"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "operations are supported to reduce the required number of command calls."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "These operations consist of their own `*Command` class and `*CommandParser` class. In each of the supported "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "`*CommandParser class`, mass operations uses the `ArgumentMultimap#getAllValues(Prefix)` method, which parses the "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "user input and returns all values that start with the specific prefix. In this case, the prefix is \u0027w/\u0027, "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "signifying a `Worker`-`Role` relation."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Once the Command object has its `shiftIndex` and Set of `WorkerRole`, it creates individual `Assignment`s and adds"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "them to the Model."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "![Class Diagram of AssignCommand, highlighting its MassOps](images/MassAssignClassDiagram.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#### Example Usage Scenario"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Let\u0027s say that the manager has a new Shift, and requires 3 of their existing staff members to work on "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "that shift immediately."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 1. The manager creates a new Shift through the `shift-add` command if it was not already done."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 2. The manager calls `assign` to assign the 3 existing Workers to the Shift. "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "eg. `assign s/8 w/2 Cashier w/3 Fry Cook w/7 Janitor` to assign Workers 2, 3, and 7 to the Role of Cashier, Fry Cook, "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "and Janitor respectively to Shift number 8."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Step 3. McScheduler parses the input and creates 3 Assignments: "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "shift8-worker2-Cashier, shift8-worker3-Fry Cook, shift8-worker7-Janitor and adds them to the Model"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "![Object Diagram of one AssignCommand used to assign 3 workers into a shift](images/MassAssignObjectDiagram.png)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* is a McDonald\u0027s shift manager"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* manages a significant number of worker contacts"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* manages a large number of work shifts"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "**Value proposition**: McScheduler provides a one-stop solution for McDonald\u0027s shift managers\u0027 needs for shift scheduling and worker contact/compensation. All relevant information is easily available to help streamline the management process. It is also easy for the manager to contact workers and manage their hours and pay. McScheduler aims to be faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                                         | So that I can…​                                                        |"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | add a new worker                                                                     | track the worker\u0027s data and schedule their work                        |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | view a list of all workers                                                           | know who are the workers I can assign shifts to                        |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | view the contact details of workers                                                  | contact them easily                                                    |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | edit the details of a worker                                                         | have the most up-to-date information if I need to contact them         |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | assign roles to a worker                                                             | put them in shifts based on the work that they are trained to do       |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | delete a worker                                                                      | remove a worker who has left McDonald\u0027s                                |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | add a new shift                                                                      | assign workers to shifts                                               |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | view a list of all shifts                                                            | know which shifts need a worker                                        |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | add roles that need to be filled in a shift                                          | assign workers into those roles based on what is needed                |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | set the number of workers needed for each role in a shift                            | schedule workers based on what is needed                               |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | assign a worker to a shift                                                           | fill shift positions                                                   |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | edit the details of a shift                                                          | reflect any changes in the number of workers needed for the shift      |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | unassign a worker from a shift                                                       | find a replacement if the worker is no longer available for that shift |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* * *`  | user                                       | delete a shift                                                                       | remove an unwanted shift                                               |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* *`    | new user                                   | see a guide on how to use the key functions                                          | learn how to use the app                                               |"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* *`    | user                                       | see a summary of the various commands                                                | easily refer to it when I forget the exact format for the commands     |"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `* *`    | user                                       | generate a weekly shift schedule                                                     | see at a glance the workers assigned to every shift in the week        |"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `*`      | user                                       | login                                                                                |                                                                        |"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "| `*`      | user                                       | see a worker\u0027s service rating                                                        | decide who to give more work opportunities to                          |"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "(For all use cases below, the **System** is the `McScheduler` and the **Actor** is the `user`, unless specified otherwise)."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Add a worker (UC-001)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to add worker."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler adds worker."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 1a. The given worker information has missing or wrong data."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 1a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Delete a worker (UC-002)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list workers."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to delete a specific worker in the list."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler deletes the worker."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Edit a worker\u0027s information (UC-003)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list workers."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to edit a specific worker in the list."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler edits the worker."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3b. No information is given or the information is invalid."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Add a shift (UC-004)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to add a shift."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler adds the shift."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 1a. The shift information is missing or invalid (wrong values)."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 1a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Delete a shift (UC-005)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to delete a specific shift on the list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler deletes the shift."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Edit a shift\u0027s information (UC-006)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to edit a specific shift in the list."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler edits the shift."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3b. No information is given or the information is invalid."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "#### Use case: Assign a worker to a shift (UC-007)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to list workers."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "5. User requests to assign worker at a specific position on the workers\u0027 list to a shift at a specific position on the shifts\u0027 list."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "6. McScheduler assigns specified worker to specified shift."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list of shifts is empty."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 4a. The list of workers is empty."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5a. At least one of the given indexes are invalid."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5b. The worker is unable to fulfil any role required for given shift."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "#### Use case: Unassign a worker from a shift (UC-008)"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to list workers."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "5. User requests to unassign worker at a specific position on the workers\u0027 list to a shift at a specific position on the shifts\u0027 list."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "6. McScheduler unassigns specified worker from specified shift."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list of shifts is empty."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 4a. The list of workers is empty."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5a. At least one of the given indexes are invalid."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5b. The worker is not assigned to the given shift."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "#### Use Case: Hire a new worker for shifts (UC-009)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. User \u003cu\u003eadds a worker (UC-001)\u003c/u\u003e."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "2. User \u003cu\u003eassigns worker to a shift (UC-007)\u003c/u\u003e."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   Step 2 is repeated for all shifts the worker is hired for."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2.  Should be able to hold up to 1000 workers and 1000 shifts without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3.  Should be able to save up to 1000 workers and 1000 shifts worth of data that persists over sessions."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4.  Data should be saved after every change."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "5.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "6.  A fresh new user should be able to figure out how to use the app easily."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Role**: A position that a worker is able to fill based on their skill set (e.g Cashier, Cleaner, Burger Flipper)"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Service Rating**: A rating given based on how well the worker performs at their work"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Deleting a worker"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. Deleting a worker while all workers are being shown"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   1. Prerequisites: List all workers using the `worker-list` command. Multiple workers in the list."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   1. Test case: `worker-delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   1. Test case: `worker-delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      Expected: No worker is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   1. Other incorrect delete commands to try: `worker-delete`, `worker-delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 33,
      "plosslaw": 28,
      "tnsyn": 65,
      "sigmund-c": 48,
      "WangZijun97": 320,
      "-": 298
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   1. Run the `mcscheduler.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   e.g. `mcscheduler.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   e.g. `mcscheduler.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   e.g. `mcscheduler.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "McScheduler is a **one-stop solution for McDonald\u0027s Shift Managers** to manage shift scheduling, as well as worker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "contacts and compensation, optimized for use via a **Command Line Interface** (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "**Graphical User Interface** (GUI). With the McScheduler, all information needed for shift-work assignment is made"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "easily available to streamline the work of McDonald\u0027s Shift Managers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. Ensure you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. Download the latest `mcscheduler.jar` [here](https://github.com/AY2021S1-CS2103-F10-4/tp/releases)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. Copy the file to the folder you wish to use as the _home folder_ for the McScheduler."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. Double-click the file to start the app. The GUI (similar to the image below) should appear in a few seconds. The app"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "1. Type a command in the command box and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   e.g. Typing **`help`** and pressing `Enter` will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`worker-list`** : Lists all workers in the McScheduler."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   * **`worker-add`**` n/John hp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7` : Adds a cashier"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   named John whose pay is $7/hr. His phone number is 98765432 and he lives at 21 Lower Kent Ridge Rd, Singapore 119077."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`worker-delete`**` 3` : Deletes the 3rd worker shown in the worker list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   * **`shift-add`**` d/Wed t/AM r/Cashier 2 r/Janitor 3` : Adds a Wednesday AM shift, which requires 2 workers to fill"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   the cashier role and 3 workers to fill the janitor role."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "   * **`assign`**` s/3 w/2 r/Cashier` : Assigns the 2nd worker on the list to the 3rd shift on the list as a cashier."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  e.g. in the command `worker-delete WORKER_INDEX`, `WORKER_INDEX` is a parameter for the index of the worker (in the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  worker list) you wish to delete from the application. The command can be used as `worker-delete 4`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Parameters in `[square brackets]` are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  e.g. `n/NAME [r/ROLE]` can be used as `n/John Doe r/Cashier` or as `n/John Doe`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Parameters with `…`​ after them can be used multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  e.g. `w/WORKER_INDEX` can be used as `w/1`, `w/1 w/2`, `w/1 w/2 w/3` etc."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* When `[square brackets]` are used with `…`​, parameters can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  e.g. `[r/ROLE NUMBER_NEEDED]…​` can be used as ` ` (i.e. 0 times), `r/Cashier 3`, `r/Cashier 1 r/Janitor 2` etc."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Parameters in `{curly brackets}` are a set and should be used together."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  e.g. `{w/WORKER_INDEX ROLE}…​` should be used as `w/1 Cashier`, `w/1 Cashier w/2 Janitor w/3 Chef` etc."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Parameters can be provided in any order, unless otherwise specified.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Adding a worker: `worker-add`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Adds a new worker to the McScheduler."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Format: `worker-add n/NAME hp/PHONE_NUMBER a/ADDRESS p/HOURLY_PAY [r/ROLE]... [u/UNAVAILABLE_DAY UNAVAILABLE_TIME]...`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* Adds a worker with the specified `NAME`, `PHONE_NUMBER`, `ADDRESS`, `HOURLY_PAY` and `ROLE`(s). The worker will be unavailable"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "on the specified `UNAVAILABLE_DAY`(s) at the corresponding `UNAVAILABLE_TIME`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `HOURLY_PAY` can have a maximum of 2 decimal places only."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The worker will be fit to take on the specified `ROLE`(s) in a shift. The specified `ROLE`(s) must be an existing role"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  in the McScheduler. A role can be added to the McScheduler using the [role-add](#adding-a-role-role-add) command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `UNAVAILABLE_DAY` should take one of these values: **Mon, Tue, Wed, Thu,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Fri, Sat, Sun**. These values are case-insensitive (i.e. `Mon`, `MON`, `mon` etc. are all accepted)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `UNAVAILABLE_TIME` should take one of these values: **AM, PM, FULL**. These values are case-insensitive (i.e. `aM`, `fUll`, `pm`, etc. are all"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "accepted)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "A worker can be fit for any number of roles (including zero) that can be added by multiple `r/` parameters."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "A worker can have any number of unavailable timings (including zero) that can be added by multiple `u/` parameters."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `worker-add n/John hp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7` Adds a cashier named John"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  whose pay is $7/hr. His phone number is 98765432 and he lives at 21 Lower Kent Ridge Rd, Singapore 119077."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `worker-add n/Tom hp/87654321 a/22 Bong Keng Road, #01–01 r/Burger Flipper r/Janitor p/7.50 u/Mon AM` Adds a worker named Tom"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  who is fit to be a burger flipper or a janitor, and whose pay is $7.50/hr. His phone number is 87654321 and he lives"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  at Bong Keng Road, #01–01. He is unavailable for work on Monday mornings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Listing all workers: `worker-list`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shows a list of all workers in the McScheduler, including their contacts, hourly pay, assigned shifts and unavailable"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "timings."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker-list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Editing a worker: `worker-edit`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Edits an existing worker in the McScheduler."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Format: `worker-edit WORKER_INDEX [n/NAME] [hp/PHONE_NUMBER] [a/ADDRESS] [p/HOURLY_PAY] [r/ROLE]... [u/UNAVAILABLE_DAY UNAVAILABLE_TIME]...`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Edits the worker at the specified `WORKER_INDEX`. The worker index refers to the index number shown in the displayed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  worker list. The worker index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* When editing roles, the existing roles of the worker will be removed i.e adding of roles is not cumulative."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The specified `ROLE`(s) must be an existing role in the McScheduler. A role can be added to the McScheduler using the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  [role-add](#adding-a-role-role-add) command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* When editing unavailabilities, the existing unavailabilities of the worker will be removed i.e. adding of unavailabilities is not cumulative."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `UNAVAILABLE_DAY` should take one of these values: **Mon, Tue, Wed, Thu,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  Fri, Sat, Sun**. These values are case-insensitive (i.e. `Mon`, `MON`, `mon` etc. are all accepted)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `UNAVAILABLE_TIME` should take one of these values: **AM, PM, FULL**. These values are case-insensitive (i.e. `aM`, `fUll`, `pm`, etc. are all"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "accepted)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "You can remove all of a worker’s roles by typing `r/` without specifying any roles after it."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `worker-edit 1 n/John r/Janitor` Edits the name and role of the 1st worker to be John and janitor respectively."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `worker-edit 2 n/Betsy Crower p/7 u/Mon full` Edits the name, pay and unavailable timings of the 2nd worker to be Betsy Crower, $7/hr and Mondays respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003c!-- ### Locating workers by name: `worker find`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Finds workers whose names contain any of the given keywords."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The search is case-insensitive. e.g. `hans` will match `Hans`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Workers matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  ![result for \u0027worker find alex david\u0027](images/findAlexDavidResult.png) --\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Deleting a worker: `worker-delete`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Deletes a worker from the McScheduler."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker-delete WORKER_INDEX`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Deletes the worker at the specified `WORKER_INDEX`. The index refers to the index number shown in the displayed worker"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  list. The worker index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker-delete 4` Deletes the 4th worker shown in the worker list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Calculate a worker\u0027s pay for the week: `worker-pay`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Calculate a worker\u0027s pay for the week."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker-pay WORKER_INDEX`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Calculate the total pay for the week for the worker at the specified `WORKER_INDEX`. The index refers to the index number shown in the displayed worker"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  list. The worker index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker-pay 4` Calculate the total pay for the week for the 4th worker shown in the worker list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Adding a shift: `shift-add`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Adds a new shift to the McScheduler."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift-add d/DAY t/TIME [r/ROLE NUMBER_NEEDED]...`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Adds a shift on the specified `DAY` at the specified `TIME`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The day specified should take one of these values: **Mon, Tue, Wed, Thu, Fri, Sat, Sun**. These values are case-"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  insensitive i.e. `Mon`, `MON`, `mon` etc. are all accepted."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The time specified should take one of these values: **AM, PM**. These values are case-insensitive i.e. `am`, `AM`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  `aM` and `Am` are all accepted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The shift will require the specified `ROLE`(s). The specified `ROLE`(s) must be an existing role in the McScheduler. A"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  role can be added to the McScheduler using the [role-add](#adding-a-role-role-add) command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Each role should be accompanied by the `NUMBER_NEEDED` to fill that role. This number **must be a positive integer**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-add d/Wed t/AM r/Cashier 2 r/Janitor 3` Adds a Wednesday AM shift, which requires 2 workers to fill the cashier"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  role and 3 workers to fill the janitor role."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-add d/MOM t/pM` Adds a Monday PM shift with no required role yet."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Listing all shifts: `shift-list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shows a list of all shifts in the McScheduler, including the roles needed and workers assigned to each shift."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift-list`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Editing a shift: `shift-edit`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Edits the details of an existing shift in the McScheduler."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift-edit SHIFT_INDEX [d/DAY] [t/TIME] [r/ROLE NUMBER_NEEDED]...`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Edits the shift at the specified `SHIFT_INDEX`. The shift index refers to the index number shown in the displayed"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  shift list. The shift index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The day specified should take one of these values: **Mon, Tue, Wed, Thu, Fri, Sat, Sun**. These values are case-"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  insensitive i.e. `Mon`, `MON`, `mon`, `mOn` etc. are all accepted."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The time specified should take one of these values: **AM, PM**. These values are case-insensitive i.e. `am`, `AM`,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  `aM` and `Am` are all accepted."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* The specified `ROLE`(s) must be an existing role in the McScheduler. A role can be added to the McScheduler using the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  [role-add](#adding-a-role-role-add) command."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Each role should be accompanied by the `NUMBER_NEEDED` to fill that role. This number **must be a positive integer**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-edit 3 r/Cashier 3 r/Janitor 2` Edits the 3rd shift on the list such that it now requires 3 cashiers and 2"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  janitors."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-edit 1 d/Mon t/PM r/Janitor 1` Edits the 1st shift such that it is now a Monday PM shift, requiring 1 janitor."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-edit 2 r/` Edits the 2nd shift such that it now has no required roles."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Deleting a shift: `shift-delete`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Deletes a shift from the McScheduler."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift-delete SHIFT_INDEX`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Deletes the shift at the specified `SHIFT_INDEX`. The index refers to the index number shown in the displayed shift"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  list. The shift index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `shift-delete 2` Deletes the 2nd shift on the list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "### Adding a role: `role-add`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Adds a new role to the McScheduler."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Format: `role-add ROLE`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Adds the specified `ROLE` to the McScheduler. The specified `ROLE` should be alphanumeric and can contain whitespaces."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `role-add cashier` Adds a cashier role."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `role-add Storey 2 server` Adds a storey 2 server role."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "### Listing all roles: `role-list`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shows a list of all roles in the McScheduler."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Format: `role-list`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "### Deleting a role: `role-delete`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Deletes a role from the McScheduler."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Format: `role-delete ROLE_INDEX`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Deletes the role at the specified `ROLE_INDEX`. The index refers to the index number shown in the role list displayed"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  using the [role-list](#listing-all-roles-role-list) command. The role index **must be a positive integer** i.e. 1, 2,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  3, …​"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* `role-delete 3` Deletes the 3rd role shown in the role list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Show the list of available workers for a particular shift and role: `worker-avail`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Show the list of workers who are available for a particular shift under a particular role."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker-avail SHIFT_INDEX r/ROLE`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Show a list of available workers who can work as the specified `ROLE` for the shift at the specified `SHIFT_INDEX`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  The index refers to the index number shown in the displayed shift"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  list. The shift index **must be a positive integer** i.e. 1, 2, 3, …​"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `ROLE` must be a valid role that has already been added to the list of approved roles. See `role-add`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker-avail 4 r/Chef` Show a list of available workers who can work as chefs for the 4th shift shown in the shift list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "### Assigning a worker to a role in a shift: `assign`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Assigns an existing worker to take on an existing role in an existing shift."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Format: `assign s/SHIFT_INDEX [w/WORKER_INDEX ROLE]...`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Assigns the worker(s) at the specified `WORKER_INDEX` to the shift at the specified `SHIFT_INDEX`. The indexes refer to"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  the index numbers shown in the displayed worker and shift lists. The indexes **must be positive integers** i.e. 1, 2,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  3, …​"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* The assigned worker(s) will fill up the specified `ROLE` in the shift. The worker(s) must be fit for the specified `ROLE`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  and the shift must require the `ROLE`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* `assign s/3 w/2 Cashier` Assigns the 2nd worker on the worker list to the 3rd shift on the shift list as a cashier."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* `assign s/3 w/2 Cashier w/3 Chef` Assigns the 2nd worker as a cashier and the 3rd worker as a chef to the 3rd shift."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "### Removing a worker from a shift: `unassign`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Removes a worker from a particular shift."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Format: `unassign s/SHIFT_INDEX [w/WORKER_INDEX]...`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Unassigns the worker(s) at the specified `WORKER_INDEX` from the shift at the specified `SHIFT_ INDEX`. The indexes refer"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  to the index numbers shown in the displayed worker and shift lists. The indexes **must be positive integers** i.e. 1,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  2, 3, …​"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "### Reassigning an existing assignment: `reassign`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Reassigns an existing assignment in the McScheduler, similar to an assignment edit."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Format: `reassign so/OLD_SHIFT_INDEX wo/OLD_WORKER_INDEX sn/NEW_SHIFT_INDEX wn/NEW_WORKER_INDEX r/ROLE`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* Reassigns an existing assignment using the indexes provided such that the worker at `NEW_WORKER_INDEX` will be assigned to the"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "shift at `NEW_SHIFT_INDEX` for the specified `ROLE`. The indexes **must be positive integers** i.e. 1,2, 3, …​"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* The old assignment involving the worker at the specified `OLD_WORKER_INDEX` and the shift at `OLD_SHIFT_INDEX` must exist."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "The old assignment will be edited during a successful `reassign` call."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* The `OLD_WORKER_INDEX` can be the same as the `NEW_WORKER_INDEX`. The `OLD_SHIFT_INDEX` can be the same as the `NEW_SHIFT_INDEX`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "This allows workers to be reassigned to the same shift but under a different `ROLE`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* No reassignment will be made if there already exists a duplicate assignment in the McScheduler."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `reassign so/4 wo/1 sn/4 wn/2 r/Chef` Reassigns the 2nd worker on the worker list to the 4th shift on the shift list as a Chef."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* `reassign so/1 wo/2 sn/3 wn/2 r/Cashier` Reassigns the 2nd worker on the worker list to the 3rd shift on the shift list as a Cashier."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Assign worker to take leave during shift: `take-leave`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Assigns a worker to take leave at a particular day and time, as indicated by a shift."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Format: `take-leave s/SHIFT_INDEX [w/WORKER_INDEX]...`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Assigns worker(s) to take leave on the shift at the specified `SHIFT_INDEX` in the shift list. The worker(s) taking leave"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "will be the worker(s) at the specified `WORKER_INDEX` in the worker list."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The order of specifying does not matter, as long as \u0027s/\u0027 is attached to the `SHIFT_INDEX` and \u0027w/\u0027 is attached to the"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`WORKER_INDEX`. \u003cbr\u003e e.g. `take-leave s/4 w/1` is equivalent to `take-leave w/1 s/4`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* An error message will be shown in the following situations:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Any of the worker is unavailable for that shift, since there is no reason to take leave then."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Any of the worker is already assigned to a role for that shift."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `take-leave s/4 w/1` Assigns the 1st worker to take leave during the 4th shift."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* `take-leave s/4 w/1 w/3` Assigns the 1st and 4rd worker to take leave during the 4th shift."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Assign a worker\u0027s leave over a range of days and times: `mass-take-leave`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Assigns a worker to take leave over a range of days and times given a start and end day/time."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Format: `mass-take-leave w/WORKER_INDEX d/START_DAY t/START_TIME d/END_DAY t/END_TIME`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* Assigns a worker to take leave on all shifts between the specified `START_DAY` and `START_TIME` to `END_DAY` and"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`END_TIME`. The worker taking leave will be the worker at the specified `WORKER_INDEX` in the worker list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The order of specifying **does matter** between the two sets of days and times (i.e. `START_DAY` must come before `END_DAY`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "and similarly for time). Specifying in the wrong order is likely to result in leave taken in the wrong shifts."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* However, the order does not matter for all other arguments. \u003cbr\u003e e.g. `mass-take-leave w/2 d/MON t/AM d/FRI t/PM` is"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the same as `mass-take-leave t/AM t/PM d/MON d/FRI w/2`, though the latter syntax is not recommended."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The day/time range will loop properly between Sunday and Monday. Hence `mass-take-leave w/2 d/SUN t/AM d/MON t/AM` will"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "work as intended - leave taken on Sunday morning to Monday morning."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* Shifts will be created for all day and time combinations within the specified range that does not have a shift already"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "present within the McScheduler. These shifts will have no role requirements."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* An error message will be shown in the following situations:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * The worker has an assigned role in any one of the shifts within the day/time range."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `mass-take-leave w/2 d/MON t/PM d/THU t/PM` Assigns the 2nd worker to take leave from MON PM shift to THU PM shift (inclusive)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `mass-take-leave w/1 d/THU t/PM d/MON t/PM` Assigns the 1st worker to take leave from THU PM shift to MON PM shift (inclusive)."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Cancel a worker\u0027s leave during a shift: `cancel-leave`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Cancels a worker\u0027s leave at a particular day and time, as indicated by a shift."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Format `cancel-leave s/SHIFT_INDEX [w/WORKER_INDEX]...`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Cancel\u0027s worker(s)\u0027 leave on the shift at the specified `SHIFT_INDEX` in the shift list. The worker whose leave is"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "cancelled will be the worker(s) at the specified `WORKER_INDEX` in the worker list."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The order of specifying does not matter, as long as \u0027s/\u0027 is attached to the `SHIFT_INDEX` and \u0027w/\u0027 is attached to the"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`WORKER_INDEX`. \u003cbr\u003e e.g. `cancel-leave s/4 w/1` is equivalent to `cancel-leave w/1 s/4`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* An error message will be shown in the following situations:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * No leave found for the worker(s) at the specified shift."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * An assignment other than leave is found for the worker(s) at the specified shift."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `cancel-leave s/4 w/1` Cancels the leave of the 1st worker for the 4th shift."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* `cancel-leave s/4 w/1 w/3` Cancels the leave of the 1st and the 3rd worker for the 4th shift."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "### Cancel a worker\u0027s leave over a range of days and times: `mass-cancel-leave`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Cancels a worker\u0027s leave over a range of days and times given a start and end day/time."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Format: `mass-cancel-leave w/WORKER_INDEX d/START_DAY t/START_TIME d/END_DAY t/END_TIME`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* Cancel\u0027s a worker\u0027s leave on all shifts between the specified `START_DAY` and `START_TIME` to `END_DAY` and"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "`END_TIME`. The worker cancelling leave will be the worker at the specified `WORKER_INDEX` in the worker list."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The order of specifying **does matter** between the two sets of days and times (i.e. `START_DAY` must come before `END_DAY`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "and similarly for time). Specifying in the wrong order is likely to result in leave cancelled in the wrong shifts."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* However, the order does not matter for all other arguments. \u003cbr\u003e e.g. `mass-cancel-leave w/2 d/MON t/AM d/FRI t/PM` is"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "the same as `mass-cancel-leave t/AM t/PM d/MON d/FRI w/2`, though the latter syntax is not recommended."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* The day/time range will loop properly between Sunday and Monday. Hence `mass-cancel-leave w/2 d/SUN t/AM d/MON t/AM` will"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "work as intended - leave cancelled from Sunday morning to Monday morning."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* An error message will be shown in the following situations:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * The worker has no leave in the given day/time range."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `mass-cancel-leave w/2 d/MON t/PM d/THU t/PM` Cancels the 2nd worker\u0027s leave between MON PM shift to THU PM shift (inclusive)."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* `mass-cancel-leave w/1 d/THU t/PM d/MON t/PM` Cancels the 1st worker leave between THU PM shift to MON PM shift (inclusive)."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "McScheduler data are saved in the hard disk automatically after any command that changes the data. There is no need to"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "save manually."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "the data of your previous McScheduler home folder."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Data | Action | Format, Example"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "-----|--------|------------------"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker | **Add** | `worker-add n/NAME hp/PHONE_NUMBER a/ADDRESS p/HOURLY_PAY [r/ROLE]... [u/UNAVAILABILITY]...`\u003cbr\u003ee.g. `worker-add n/Johnhp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7 u/Mon Full`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Worker | **Delete** | `worker-delete WORKER_INDEX`\u003cbr\u003ee.g. `worker-delete 4`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Worker | **Edit** | `worker-edit WORKER_INDEX [n/NAME] [hp/PHONE_NUMBER] [a/ADDRESS] [p/HOURLY_PAY] [r/ROLE]...`\u003cbr\u003ee.g. `worker-edit 2 n/Betsy Crower p/7`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **List** | `worker-list`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **Pay** | `worker-pay WORKER_INDEX`\u003cbr\u003ee.g. `worker-pay 1`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shift | **Add** | `shift-add d/DAY t/TIME [r/ROLE NUMBER_NEEDED]...`\u003cbr\u003ee.g. `shift-add d/Wed t/AM r/Cashier 2 r/Janitor 3`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shift | **Delete** | `shift-delete SHIFT_INDEX`\u003cbr\u003ee.g. `shift-delete 2`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Shift | **Edit** | `shift-edit SHIFT_INDEX [d/DAY] [t/TIME] [r/ROLE NUMBER_NEEDED]...`\u003cbr\u003ee.g. `shift-edit 1 d/Mon t/PM r/Janitor 1`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shift | **List** | `shift-list`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Role | **Add** | `role-add ROLE`\u003cbr\u003ee.g. `role-add Storey 2 server`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Role | **Delete** | `role-delete ROLE_INDEX`\u003cbr\u003ee.g. `role-delete 3`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Role | **List** | `role-list`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Assignment | **Show Available Workers** | `worker-avail SHIFT_INDEX r/ROLE`\u003cbr\u003ee.g. `worker-avail 1 r/Chef`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Assignment | **Assign** | `assign s/SHIFT_INDEX [w/WORKER_INDEX ROLE]...`\u003cbr\u003ee.g. `assign s/3 w/2 Cashier w/3 Chef`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Assignment | **Unassign** | `unassign s/SHIFT_INDEX [w/WORKER_INDEX]...`\u003cbr\u003ee.g. `unassign s/4 w/1 w/5`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Assignment | **Reassign** | `reassign so/OLD_SHIFT_INDEX wo/OLD_WORKER_INDEX sn/NEW_SHIFT_INDEX wn/NEW_WORKER_INDEX`\u003cbr\u003ee.g. `reassign so/4 wo/1 sn/1 wn/1 r/Chef`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "General | **Help** | `help`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "General | **Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 139,
      "plosslaw": 97,
      "tnsyn": 41,
      "sigmund-c": 22,
      "WangZijun97": 59,
      "-": 122
    }
  },
  {
    "path": "docs/diagrams/AddRoleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":McSchedulerParser\" as McSchedulerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":RoleAddCommandParser\" as RoleAddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:Role\" as Role_CLASS LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":Role\" as Role LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":RoleAddCommand\" as RoleAddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":McScheduler\" as McScheduler MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "participant \":UniqueRoleList\" as UniqueRoleList MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[-\u003e LogicManager : execute(command)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "LogicManager -\u003e McSchedulerParser : parseCommand(command)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate McSchedulerParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "create RoleAddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McSchedulerParser -\u003e RoleAddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate RoleAddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommandParser --\u003e McSchedulerParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate RoleAddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McSchedulerParser -\u003e RoleAddCommandParser : parse(args)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate RoleAddCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommandParser -\u003e ParserUtil : parseRole(args)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "ParserUtil -\u003e Role_CLASS : createRole(role)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate Role_CLASS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "create Role"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Role_CLASS -\u003e Role"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate Role"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "return role"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate Role"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Role_CLASS -\u003e ParserUtil : role:Role"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate Role_CLASS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "ParserUtil -\u003e RoleAddCommandParser : role:Role"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "create RoleAddCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommandParser -\u003e RoleAddCommand : RoleAddCommand(role:Role)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate RoleAddCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommand --\u003e RoleAddCommandParser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate RoleAddCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommandParser --\u003e McSchedulerParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate RoleAddCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommandParser -[hidden]-\u003e McSchedulerParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "destroy RoleAddCommandParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McSchedulerParser --\u003e LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate McSchedulerParser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "LogicManager -\u003e RoleAddCommand : execute(model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate RoleAddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommand -\u003e ModelManager : addRole(role)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "ModelManager -\u003e McScheduler : addRole(role)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate McScheduler"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McScheduler -\u003e UniqueRoleList : add(role)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate UniqueRoleList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "UniqueRoleList -\u003e McScheduler"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate UniqueRoleList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McScheduler -\u003e ModelManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate McScheduler"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "ModelManager --\u003e RoleAddCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "CommandResult --\u003e RoleAddCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleAddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate RoleAddCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 106
    }
  },
  {
    "path": "docs/diagrams/AddUnavailabilitySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":WorkerAddCommandParser\" as WorkerAddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \"d:WorkerAddCommand\" as WorkerAddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[-\u003e LogicManager : execute(command)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(command)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create WorkerAddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser -\u003e WorkerAddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser -\u003e WorkerAddCommandParser : parse(command)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser -\u003e ParserUtil : parseUnavailabilities(string)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "ParserUtil -\u003e ParserUtil : createMorningUnavailabilityString(day)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "ParserUtil -\u003e ParserUtil : createAfternoonUnavailabilityString(day)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create WorkerAddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser -\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand --\u003e WorkerAddCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "destroy WorkerAddCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "LogicManager -\u003e WorkerAddCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand -\u003e Model : addWorker(worker)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Model --\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "CommandResult --\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 78
    }
  },
  {
    "path": "docs/diagrams/AddWorkerSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":WorkerAddCommandParser\" as WorkerAddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \"d:WorkerAddCommand\" as WorkerAddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \"d:Worker\" as Worker LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[-\u003e LogicManager : execute(command)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(command)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create WorkerAddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser -\u003e WorkerAddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser -\u003e WorkerAddCommandParser : parse(command)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create WorkerAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser -\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create Worker"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand -\u003e Worker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate Worker"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "return newWorker"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate Worker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand --\u003e WorkerAddCommandParser : d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "destroy WorkerAddCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "LogicManager -\u003e WorkerAddCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate WorkerAddCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand -\u003e Model : addWorker(newWorker)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Model --\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "CommandResult --\u003e WorkerAddCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "WorkerAddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate WorkerAddCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 76
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteWorker(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/AssignSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "skinparam backgroundColor transparent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":AssignCommandParser\" as AssignCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \"a:AssignCommand\" as AssignCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "participant \":Assignment\" as Assignment MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[-\u003e LogicManager : execute(\"assign s/1 w/1 r/Cashier\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"assign s/1 w/1 r/Cashier\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "create AssignCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AddressBookParser -\u003e AssignCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate AssignCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate AssignCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AddressBookParser -\u003e AssignCommandParser : parse(\"s/1 w/1 r/Cashier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate AssignCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "create AssignCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommandParser -\u003e AssignCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate AssignCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommand --\u003e AssignCommandParser : a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate AssignCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate AssignCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "destroy AssignCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "LogicManager -\u003e AssignCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate AssignCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "create Assignment"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommand -\u003e Assignment"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate Assignment"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Assignment -\u003e AssignCommand : assignment"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate Assignment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommand -\u003e Model : addAssignment(assignment)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Model --\u003e AssignCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "CommandResult --\u003e AssignCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "AssignCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate AssignCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 78
    }
  },
  {
    "path": "docs/diagrams/AssignmentClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "title Assignment - Class Diagram"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "skinparam backgroundColor transparent"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Assignment --\u003e\"1\" Shift"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Assignment --\u003e \"1\" Worker"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Assignment --\u003e \"1\" Role"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 8,
      "sigmund-c": 4
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueWorkerList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "UniqueTagList -[hidden]down- UniqueWorkerList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "UniqueTagList -[hidden]down- UniqueWorkerList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "UniqueWorkerList o-right-\u003e Worker"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 9,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "DeleteCommand -\u003e Model : deleteWorker(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/EditShiftSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":ShiftEditCommandParser\" as ShiftEditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \"sd:ShiftDay\" as ShiftDay LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \"d:EditShiftDescriptor\" as EditShiftDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":ShiftEditCommand\" as ShiftEditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[-\u003e LogicManager : execute(userInput)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(userInput)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "create ShiftEditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AddressBookParser -\u003e ShiftEditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate ShiftEditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate ShiftEditCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AddressBookParser -\u003e ShiftEditCommandParser: parse(userInput)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate ShiftEditCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "create EditShiftDescriptor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser -\u003e EditShiftDescriptor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate EditShiftDescriptor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "EditShiftDescriptor --\u003e ShiftEditCommandParser : d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate EditShiftDescriptor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "create ShiftDay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser -\u003e ShiftDay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate ShiftDay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftDay --\u003e ShiftEditCommandParser : sd"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate ShiftDay"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser -\u003e EditShiftDescriptor : setShiftDay(sd)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate EditShiftDescriptor"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "EditShiftDescriptor --\u003e ShiftEditCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate EditShiftDescriptor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "create ShiftEditCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser -\u003e ShiftEditCommand : new ShiftEditCommand(index, d)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate ShiftEditCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommand --\u003e ShiftEditCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate ShiftEditCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate ShiftEditCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "LogicManager -\u003e ShiftEditCommand : execute()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate ShiftEditCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommand -\u003e Model : setShift()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Model --\u003e ShiftEditCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ShiftEditCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate ShiftEditCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "LogicManager --\u003e["
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 74
    }
  },
  {
    "path": "docs/diagrams/LeaveClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam ClassAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "tagName: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class Role {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "tagName: String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "{static} createRole(String)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class Leave {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "{static} ROLE_NAME: String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Tag \u003c|- Role"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Role \u003c|- Leave"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Role ..\u003e Leave"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 27
    }
  },
  {
    "path": "docs/diagrams/LeaveCommandsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":TakeLeaveCommand\" as TakeLeaveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":AssignCommand\" as AssignCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[-\u003e LogicManager : execute(userInput)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "ref over LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    Parsing user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    Refer to Assignment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "LogicManager -\u003e TakeLeaveCommand : execute()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate TakeLeaveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "create AssignCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "TakeLeaveCommand -\u003e AssignCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate AssignCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AssignCommand --\u003e TakeLeaveCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate AssignCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "TakeLeaveCommand -\u003e AssignCommand : execute()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate AssignCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AssignCommand -\u003e Model : assign leave"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Model --\u003e AssignCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "AssignCommand --\u003e TakeLeaveCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate AssignCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "TakeLeaveCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate TakeLeaveCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "LogicManager --\u003e["
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 52
    }
  },
  {
    "path": "docs/diagrams/MassTakeLeaveActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam conditionStyle diamond"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ":parse given datetime range\\ninto list of shifts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "If (do some shifts have non-leave assignment?) then ([yes])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    :notify user of error;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "else ([no])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    :remove shifts which user\\nhas already taken leave;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    :add leave to all shifts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 17
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Package Worker {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Class Worker"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Class UniqueWorkerList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "AddressBook *--\u003e \"1\" UniqueWorkerList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "UniqueWorkerList o--\u003e \"*\" Worker"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Worker *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "ModelManager --\u003e\"1\" Worker : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 11,
      "-": 45
    }
  },
  {
    "path": "docs/diagrams/RoleClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McScheduler *-right-\u003e \"1\" UniqueRoleList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "UniqueRoleList o-right-\u003e Role"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "RoleRequirement *--\u003e \"1\" Role"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 12
    }
  },
  {
    "path": "docs/diagrams/ShiftClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "skinparam ClassAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "interface Model"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class UniqueShiftList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class Shift"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class ShiftDay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class ShiftTime"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class RoleRequirement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class Role"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Model -\u003e UniqueShiftList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "UniqueShiftList -\u003e \"0..*\" Shift : contains \u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Shift *--\u003e \"1\" ShiftDay"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Shift *--\u003e \"1\" ShiftTime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Shift *--\u003e \"0..*\" RoleRequirement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "RoleRequirement -\u003e Role"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 25
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonSerializableWorker"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "JsonSerializableWorker .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 22
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Class WorkerListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Class WorkerCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "MainWindow *-down-\u003e WorkerListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "WorkerListPanel -down-\u003e WorkerCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "WorkerListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "WorkerCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "WorkerCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "WorkerListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UnavailabilityClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Class Unavailability"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Class ShiftTime"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Class ShiftDay"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Unavailability -down-\u003e \"1\" ShiftTime"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Unavailability -down-\u003e \"1\" ShiftDay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tnsyn": 14
    }
  },
  {
    "path": "docs/diagrams/WorkerClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueWorkerList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "UniqueWorkerList o-right-\u003e Worker"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"1\" Pay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"1\" Address"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"*\" Role"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Worker *--\u003e \"*\" Unavailability"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 17
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    AttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    AttributeFontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 74
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "ecp -\u003e ec ++: index, editWorkerDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "title: McScheduler"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "**McScheduler is a desktop application for McDonald\u0027s Shift Managers to managing shift scheduling.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* If you are interested in using McScheduler, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* If you are interested about developing McScheduler, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 4,
      "-": 15
    }
  },
  {
    "path": "docs/team/WangZijun97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "title: Zijun\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "## Project: McScheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "McScheduler is a one-stop solution for McDonald\u0027s Shift Managers  to manage shift scheduling and worker contact/compensation. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**The following text contains placeholders for reference**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 48
    }
  },
  {
    "path": "docs/team/plosslaw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "docs/team/sigmund-c.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 46
    }
  },
  {
    "path": "docs/team/tnsyn.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "## Project: McScheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 46
    }
  },
  {
    "path": "docs/team/wakululuu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Changes the remark of an existing worker in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the worker identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"by the index number used in the last worker listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param index of the worker in the filtered worker list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param remark of the worker to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of worker data. We achieve that by working with the `Worker` model. Each field in a Worker is implemented as a separate class (e.g. a `Name` object represents the worker’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a worker."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Create a new `Remark` in `seedu.address.model.worker`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each worker."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Simply add the following to [`WorkerCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`WorkerCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Then insert the following into [`main/resources/view/WorkerListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`WorkerListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "## Modify `Worker` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Since `WorkerCard` displays data from a `Worker`, we need to update `Worker` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Modify `Worker`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "We change the constructor of `Worker` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Update other usages of `Worker`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Unfortunately, a change to `Worker` will cause other commands to break, you will have to modify these commands to use the updated `Worker`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Worker` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedWorker` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedWorker` to work with our new `Worker`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Now that we have finalized the `Worker` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`WorkerCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public WorkerCard(Worker worker, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    remark.setText(worker.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Worker`. Since all fields in a `Worker` are immutable, we create a new instance of a `Worker` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "save it with `Model#setWorker()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Worker: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Worker: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d new Worker(workerToEdit.getName(), workerToEdit.getPhone(), workerToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                workerToEdit.getAddress(), remark, workerToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.setWorker(workerToEdit, editedWorker);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedWorker));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code workerToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String generateSuccessMessage(Worker workerToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return String.format(message, workerToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 41,
      "-": 353
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Worker` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Worker`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "The `address` field in `Worker` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditWorkerDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Let’s try removing references to `Address` in `EditWorkerDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. Safe delete the field `address` in `EditWorkerDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Worker` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `WorkerCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "A quick look at the `WorkerCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`WorkerCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`WorkerCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "**`invalidWorkerAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    \"name\": \"Worker with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 14,
      "-": 89
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditWorkerDescriptor`. Recall that we can verify the contents of `editWorkerDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       Worker workerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       Worker editedWorker \u003d createEditedWorker(workerToEdit, editWorkerDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       if (!workerToEdit.isSameWorker(editedWorker) \u0026\u0026 model.hasWorker(editedWorker)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       model.setWorker(workerToEdit, editedWorker);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_WORKER_SUCCESS, editedWorker));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "       workers.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "           source.getWorkerList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                 .map(JsonAdaptedWorker::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "1. It appears that a `JsonAdaptedWorker` is created for each `Worker` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    5.  Add a new field to `Worker`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 14,
      "-": 236
    }
  },
  {
    "path": "src/main/java/mcscheduler/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/mcscheduler/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/mcscheduler/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.JsonMcSchedulerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.McSchedulerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing McScheduler ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McSchedulerStorage mcSchedulerStorage \u003d new JsonMcSchedulerStorage(userPrefs.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        storage \u003d new StorageManager(mcSchedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Optional\u003cReadOnlyMcScheduler\u003e mcSchedulerOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReadOnlyMcScheduler initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            mcSchedulerOptional \u003d storage.readMcScheduler();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (!mcSchedulerOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample McScheduler\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            initialData \u003d mcSchedulerOptional.orElseGet(SampleDataUtil::getSampleMcScheduler);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty McScheduler\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            initialData \u003d new McScheduler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McScheduler\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            initialData \u003d new McScheduler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McScheduler\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logger.info(\"Starting McScheduler \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 39,
      "-": 144
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String LOG_FILE \u003d \"mcscheduler.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_INVALID_WORKER_DISPLAYED_INDEX \u003d \"The worker index provided is invalid: [%1$d]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_WORKERS_LISTED_OVERVIEW \u003d \"%1$d workers listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX \u003d \"The shift index provided is invalid: [%1$d]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_INVALID_ROLE_DISPLAYED_INDEX \u003d \"The role index provided is invalid: [%1$d]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_ROLE_NOT_FOUND \u003d \"This role does not exist in the McScheduler: [%1$s]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_UNAVAILABLE \u003d \"[%1$s] is not available for [%2$s]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_WORKER_ROLE \u003d \"[%1$s] is not fit for the role [%2$s]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT \u003d \"The worker is not available for this shift\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_NO_ASSIGNMENT_FOUND \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"No assignment found between worker: %1$s and shift: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_NO_LEAVE_FOUND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"No leave found between worker: %1$s and shift: %2$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_NOT_REQUIRED \u003d \"The role is not required for this shift\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "tnsyn": 1,
      "sigmund-c": 9,
      "WangZijun97": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(zeroBasedIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/mcscheduler/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the McScheduler."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see Model#getMcScheduler()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    ReadOnlyMcScheduler getMcScheduler();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of workers */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    ObservableList\u003cWorker\u003e getFilteredWorkerList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of shifts */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    ObservableList\u003cShift\u003e getFilteredShiftList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /** Returns an unmodifiable view of the full list of assigments */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFullAssignmentList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Path getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 16,
      "WangZijun97": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.McSchedulerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final McSchedulerParser mcSchedulerParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcSchedulerParser \u003d new McSchedulerParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Command command \u003d mcSchedulerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            storage.saveMcScheduler(model.getMcScheduler());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return model.getMcScheduler();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return model.getFilteredShiftList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFullAssignmentList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return model.getFullAssignmentList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return model.getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 24,
      "WangZijun97": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/AssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_SHIFTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_WORKERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a shift, worker and shift assignment to the McScheduler."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds shift, worker(s) and role(s) assignment(s) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"to the McScheduler by the index numbers used in the last worker and shift listings. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PREFIX_SHIFT + \"SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"{\" + PREFIX_WORKER_ROLE + \"WORKER_INDEX (must be a positive integer) ROLE}...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" s/4 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/1 Cashier \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/3 Janitor\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_ASSIGN_SUCCESS \u003d \"%1$d new assignment(s) added:\\n%2$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the McScheduler: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Index shiftIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Set\u003cWorkerRolePair\u003e workerRolePairs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an AssignCommand to add an assignment of the specified {@code Shift}, {@code Worker} and {@code Role}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param shiftIndex  of the shift in the filtered shift list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param workerRolePairs a set of worker-roles to be assined to the shift"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public AssignCommand(Index shiftIndex, Set\u003cWorkerRolePair\u003e workerRolePairs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shiftIndex, workerRolePairs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shiftIndex \u003d shiftIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerRolePairs \u003d workerRolePairs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cShift\u003e lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (shiftIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Check for: worker existence, model hasRole, worker is fit, worker is available, role required in shift"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (WorkerRolePair workerRolePair : workerRolePairs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (workerRolePair.getWorkerIndex().getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                            workerRolePair.getWorkerIndex().getOneBased()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Worker workerToAssign \u003d lastShownWorkerList.get(workerRolePair.getWorkerIndex().getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Shift shiftToAssign \u003d lastShownShiftList.get(shiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role role \u003d workerRolePair.getRole();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (!model.hasRole(role)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, workerRolePair.getRole()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!workerToAssign.isFitForRole(role)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_ASSIGNMENT_WORKER_ROLE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                            workerToAssign.getName(), role));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (workerToAssign.isUnavailable(shiftToAssign)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                        Messages.MESSAGE_INVALID_ASSIGNMENT_UNAVAILABLE, workerToAssign.getName(), shiftToAssign));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!shiftToAssign.isRoleRequired(role)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_NOT_REQUIRED);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Assignment assignmentToAdd \u003d new Assignment(shiftToAssign, workerToAssign, role);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (model.hasAssignment(assignmentToAdd)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_ASSIGNMENT, assignmentToAdd));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            assignmentsToAdd.add(assignmentToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Add assignments"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StringBuilder assignStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Assignment assignment : assignmentsToAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.addAssignment(assignment);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            assignStringBuilder.append(assignment);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            assignStringBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Shift.updateRoleRequirements(model, assignment.getShift(), assignment.getRole());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(MESSAGE_ASSIGN_SUCCESS, workerRolePairs.size(), assignStringBuilder.toString()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!(other instanceof AssignCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        AssignCommand e \u003d (AssignCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return shiftIndex.equals(e.shiftIndex)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 workerRolePairs.equals(e.workerRolePairs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 71,
      "tnsyn": 4,
      "sigmund-c": 64
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/CancelLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Cancel a worker\u0027s leave for a particular shift."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class CancelLeaveCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel-leave\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels the specified worker(s)\u0027s leave from the \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"specified shift by the index numbers used in the last worker and shift listings. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT + \"SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"[\" + PREFIX_WORKER + \"WORKER_INDEX (must be a positive integer)]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \" s/1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/4 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CANCEL_LEAVE_SUCCESS_PREFIX \u003d \"[Leave Cancelled] \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CANCEL_LEAVE_SUCCESS \u003d MESSAGE_CANCEL_LEAVE_SUCCESS_PREFIX"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + UnassignCommand.MESSAGE_UNASSIGN_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index shiftIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a CancelLeaveCommand to cancel the leave of the specified {@code Worker}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * from the specified {@code Shift}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param shiftIndex of the shift in the filtered shift list to cancel the worker\u0027s leave from."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param workerIndexes of the worker(s) in the filtered worker list whose leave is to be cancelled."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public CancelLeaveCommand(Index shiftIndex, Set\u003cIndex\u003e workerIndexes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftIndex \u003d shiftIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndexes \u003d workerIndexes;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (shiftIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StringBuilder assignStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Index workerIndex: workerIndexes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (workerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Worker workerToCancelLeave \u003d lastShownWorkerList.get(workerIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Shift shiftToCancelLeaveFrom \u003d lastShownShiftList.get(shiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Assignment assignmentToCancelLeave \u003d new Assignment(shiftToCancelLeaveFrom, workerToCancelLeave);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Optional\u003cAssignment\u003e assignmentInModelOptional \u003d model.getAssignment(assignmentToCancelLeave);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (assignmentInModelOptional.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_NO_ASSIGNMENT_FOUND,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        workerToCancelLeave, shiftToCancelLeaveFrom));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Assignment assignmentInModel \u003d assignmentInModelOptional.get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (!(assignmentInModel.getRole().equals(new Leave()))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_NO_LEAVE_FOUND,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        workerToCancelLeave, shiftToCancelLeaveFrom));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                model.deleteAssignment(assignmentInModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            } catch (AssignmentNotFoundException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_ASSIGNMENT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            assignStringBuilder.append(assignmentInModel + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                MESSAGE_CANCEL_LEAVE_SUCCESS, workerIndexes.size(), assignStringBuilder.toString()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof CancelLeaveCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        CancelLeaveCommand e \u003d (CancelLeaveCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftIndex.equals(e.shiftIndex)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 workerIndexes.toString().equals(e.workerIndexes.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 37,
      "WangZijun97": 83
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.setMcScheduler(new McScheduler());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/CommandUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Contains utility methods for Commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class CommandUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Checks if a worker is unavailable at a given shift."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isWorkerUnavailable(Worker workerToAssign, Shift shiftToAssign) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Set\u003cUnavailability\u003e workerUnavailableTimings \u003d workerToAssign.getUnavailableTimings();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (Unavailability unavailability : workerUnavailableTimings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            boolean hasSameDay \u003d unavailability.getDay().equals(shiftToAssign.getShiftDay());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            boolean hasSameTime \u003d unavailability.getTime().equals(shiftToAssign.getShiftTime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (hasSameDay \u0026\u0026 hasSameTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Checks if model contains an assignment with same identity as {@code toCheck} that is not a leave."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean hasNonLeaveAssignment(Model model, Assignment toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return model.hasAssignment(toCheck)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 !(model.getAssignment(toCheck).get().getRole().equals(new Leave()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Check if model contains a leave with same identity as {@code toCheck}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean hasLeaveAssignment(Model model, Assignment toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return model.hasAssignment(toCheck)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 model.getAssignment(toCheck).get().getRole().equals(new Leave());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Create a list of shifts between the given dates and times (inclusive)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The list generated will loop properly between the last {@code ShiftDay} back to the first."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static List\u003cShift\u003e generateShiftsInDayTimeRange(ShiftDay startDay, ShiftTime startTime,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                                                           ShiftDay endDay, ShiftTime endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cShift\u003e shiftsToTakeLeaveFrom \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cShiftDay\u003e days \u003d ShiftDay.getAllDays();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cShiftTime\u003e times \u003d ShiftTime.getAllTimes();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index \u003d days.indexOf(startDay) * 2 + times.indexOf(startTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        while (index \u003c days.size() * times.size() * 3) { // prevents infinite loop just in case"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ShiftDay day \u003d days.get((index / times.size()) % days.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ShiftTime time \u003d times.get(index % times.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            shiftsToTakeLeaveFrom.add(new Shift(day, time, Collections.emptySet()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (day.equals(endDay) \u0026\u0026 time.equals(endTime)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftsToTakeLeaveFrom;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 9,
      "WangZijun97": 68
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Finds and lists all workers in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all workers whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(Messages.MESSAGE_WORKERS_LISTED_OVERVIEW, model.getFilteredWorkerList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/MassCancelLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class MassCancelLeaveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mass-cancel-leave\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels leave for the specified worker during \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"all shifts between the two specified date times by the index number used in the last worker listings.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_WORKER + \"WORKER_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"START_DAY (must be Mon, Tue, Wed, Thu, Fri, Sat or Sun) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"START_TIME (must be AM or PM) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"END_DAY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"END_TIME\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \" w/2 d/Mon t/PM d/Wed t/AM \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_MASS_CANCEL_LEAVE_SUCCESS \u003d \"Leave cancelled from shift {%1$s} to shift {%2$s}.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_NO_LEAVE_FOUND \u003d \"No leave found between shift {%1$s} to {%2$s}.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index workerIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay startDay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay endDay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime endTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a MassCancelLeaveCommand to cancel all leaves of the specified {@code Worker} between the specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * dates and times."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param workerIndex of the worker in the filtered worker list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param startDay of the time period to search for leaves to cancel."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param startTime of the time period to search for leaves to cancel."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param endDay of the time period to search for leaves to cancel."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param endTime of the time period to search for leaves to cancel."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public MassCancelLeaveCommand(Index workerIndex, ShiftDay startDay, ShiftTime startTime,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                                  ShiftDay endDay, ShiftTime endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(workerIndex, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.workerIndex \u003d workerIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (workerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Worker worker \u003d lastShownWorkerList.get(workerIndex.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e shiftsInDayTimeRange \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                CommandUtil.generateShiftsInDayTimeRange(startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToRemove \u003d shiftsInDayTimeRange"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(shift -\u003e new Assignment(shift, worker))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .filter(assignment -\u003e CommandUtil.hasLeaveAssignment(model, assignment))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(assignment -\u003e model.getAssignment(assignment).get())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift startShift \u003d new Shift(startDay, startTime, Collections.emptySet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift endShift \u003d new Shift(endDay, endTime, Collections.emptySet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (assignmentsToRemove.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_LEAVE_FOUND, startShift, endShift));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assignmentsToRemove.forEach(model::deleteAssignment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MASS_CANCEL_LEAVE_SUCCESS, startShift, endShift));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof MassCancelLeaveCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        MassCancelLeaveCommand c \u003d (MassCancelLeaveCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.workerIndex.equals(c.workerIndex)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.startDay.equals(c.startDay)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.startTime.equals(c.startTime)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.endDay.equals(c.endDay)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.endTime.equals(c.endTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 15,
      "WangZijun97": 105
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/MassTakeLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandUtil.generateShiftsInDayTimeRange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandUtil.hasLeaveAssignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandUtil.hasNonLeaveAssignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandUtil.isWorkerUnavailable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Assign a worker to take leave from a given day/time to another day/time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class MassTakeLeaveCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mass-take-leave\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns the specified worker to take leave \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"during all shifts between the two specified date times by the index number used in the last \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"worker listings.\\nParameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_WORKER + \"WORKER_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"START_DAY (must be Mon, Tue, Wed, Thu, Fri, Sat or Sun) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"START_TIME (must be AM or PM) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"END_DAY \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"END_TIME\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \" w/2 d/Mon t/PM d/Wed t/AM \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_MASS_TAKE_LEAVE_SUCCESS \u003d \"Leave added from shift {%1$s} to shift {%2$s}.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d AssignCommand.MESSAGE_DUPLICATE_ASSIGNMENT + \" {%1$s}\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index workerIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay startDay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay endDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a MassTakeLeaveCommand to add leave for the specified {@code Worker} between the given dates and times."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param workerIndex of the worker in the filtered worker list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param startDay of the leave."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param startTime of the leave."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param endDay of the leave."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param endTime of the leave."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public MassTakeLeaveCommand(Index workerIndex, ShiftDay startDay, ShiftTime startTime,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                                ShiftDay endDay, ShiftTime endTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(workerIndex, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.workerIndex \u003d workerIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (workerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Worker worker \u003d lastShownWorkerList.get(workerIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e shiftsToTakeLeaveFrom \u003d generateShiftsInDayTimeRange(startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        StringBuilder errorMessageForShiftsWithOtherAssignments \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cShift\u003e shiftsAlreadyWithLeave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (Shift shift: shiftsToTakeLeaveFrom) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Assignment toCheck \u003d new Assignment(shift, worker);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (hasNonLeaveAssignment(model, toCheck)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                Assignment nonLeaveAssignmentInModel \u003d model.getAssignment(toCheck).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                errorMessageForShiftsWithOtherAssignments"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        .append(String.format(MESSAGE_DUPLICATE_ASSIGNMENT, nonLeaveAssignmentInModel));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } else if (hasLeaveAssignment(model, toCheck) || isWorkerUnavailable(worker, shift)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                shiftsAlreadyWithLeave.add(shift);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (errorMessageForShiftsWithOtherAssignments.length() \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(errorMessageForShiftsWithOtherAssignments.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftsToTakeLeaveFrom.removeAll(shiftsAlreadyWithLeave);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (Shift shift: shiftsToTakeLeaveFrom) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (!model.hasShift(shift)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                model.addShift(shift);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            model.addAssignment(new Assignment(shift, worker, new Leave()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MASS_TAKE_LEAVE_SUCCESS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                new Shift(startDay, startTime, Collections.emptySet()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                new Shift(endDay, endTime, Collections.emptySet())));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof MassTakeLeaveCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        MassTakeLeaveCommand c \u003d (MassTakeLeaveCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.workerIndex.equals(c.workerIndex)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.startDay.equals(c.startDay)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.startTime.equals(c.startTime)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.endDay.equals(c.endDay)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 this.endTime.equals(c.endTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 20,
      "WangZijun97": 118
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ReassignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_NEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_OLD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_NEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_OLD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class ReassignCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reassign\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an assignment in the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"McScheduler by the index numbers used in the last worker and shift listings. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_WORKER_OLD + \"OLD_WORKER_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_WORKER_NEW + \"NEW_WORKER_INDEX (must be a positive integer \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_SHIFT_OLD + \"OLD_SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_SHIFT_NEW + \"NEW_SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_ROLE + \"ROLE\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \" wo/1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"wn/2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"so/1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"sn/2 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"r/Cashier\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_REASSIGN_SUCCESS \u003d \"Reassignment made:\\n%1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the McScheduler\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_NOT_FOUND \u003d \"The assignment to be edited does not exist\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Index oldShiftIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Index newShiftIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Index oldWorkerIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Index newWorkerIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Role newRole;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Creates a ReassignCommand to edit an assignment of the specified {@code Shift}, {@code Worker} and {@code Role}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param oldWorkerIndex of the worker in the filtered worker list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param newWorkerIndex of the worker in the filtered worker list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param oldShiftIndex  of the old shift in the filtered shift list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param newShiftIndex  of the new shift to be assigned in the filtered shift list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param newRole        of the worker in the new shift."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public ReassignCommand(Index oldWorkerIndex, Index newWorkerIndex, Index oldShiftIndex,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                           Index newShiftIndex, Role newRole) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(oldWorkerIndex, newWorkerIndex, oldShiftIndex, newShiftIndex, newRole);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.oldWorkerIndex \u003d oldWorkerIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.newWorkerIndex \u003d newWorkerIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.oldShiftIndex \u003d oldShiftIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.newShiftIndex \u003d newShiftIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.newRole \u003d newRole;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        List\u003cShift\u003e lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (oldShiftIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                || newShiftIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (oldWorkerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                || newWorkerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!model.hasRole(newRole)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, newRole));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Worker oldWorker \u003d lastShownWorkerList.get(oldWorkerIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Shift oldShift \u003d lastShownShiftList.get(oldShiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Assignment assignmentToRemove \u003d new Assignment(oldShift, oldWorker);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!model.hasAssignment(assignmentToRemove)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(MESSAGE_ASSIGNMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (Assignment a : assignmentList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (a.equals(assignmentToRemove)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                assignmentToRemove \u003d a;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assert assignmentToRemove.getRole() !\u003d null; // dummy assignment has been replaced with actual assignment"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Worker newWorker \u003d lastShownWorkerList.get(newWorkerIndex.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Shift newShift \u003d lastShownShiftList.get(newShiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Assignment assignmentToAdd \u003d new Assignment(newShift, newWorker, newRole);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (model.hasAssignment(assignmentToAdd)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 assignmentToAdd.getRole().equals(assignmentToRemove.getRole())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!newWorker.isFitForRole(newRole)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_WORKER_ROLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (newWorker.isUnavailable(newShift)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_UNAVAILABLE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!newShift.isRoleRequired(newRole)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_NOT_REQUIRED);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        model.setAssignment(assignmentToRemove, assignmentToAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Shift.updateRoleRequirements(model, oldShift, assignmentToRemove.getRole());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Shift.updateRoleRequirements(model, newShift, newRole);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REASSIGN_SUCCESS, assignmentToAdd));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!(other instanceof ReassignCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        ReassignCommand e \u003d (ReassignCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return oldShiftIndex.equals(e.oldShiftIndex)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 oldWorkerIndex.equals(e.oldWorkerIndex)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 newWorkerIndex.equals(e.newWorkerIndex)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 newShiftIndex.equals(e.newShiftIndex)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 newRole.equals(e.newRole);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 2,
      "tnsyn": 133,
      "sigmund-c": 16
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/RoleAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a role to the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleAddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"role-add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a role to the address book. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Parameters: ROLE\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cashier\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New role added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROLE \u003d \"This role already exists in the address book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Role toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a RoleAddCommand to add the specified {@code Role}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleAddCommand(Role role) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        toAdd \u003d role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (model.hasRole(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.addRole(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (other instanceof RoleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RoleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 47,
      "sigmund-c": 4
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/RoleDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Deletes a role identified using its displayed index from the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleDeleteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"role-delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \": Deletes the role identified by the index number used in the displayed role list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_DELETE_ROLE_SUCCESS \u003d \"Deleted role: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cRole\u003e roleList \u003d model.getFilteredRoleList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d roleList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Role roleToDelete \u003d roleList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        deleteRoleFromShifts(model, roleToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        deleteRoleFromWorkers(model, roleToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        deleteRoleFromAssignments(model, roleToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.deleteRole(roleToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ROLE_SUCCESS, roleToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void deleteRoleFromShifts(Model model, Role roleToDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, roleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cShift\u003e fullShiftList \u003d model.getFullShiftList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Shift shift : fullShiftList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Set\u003cRoleRequirement\u003e updatedRoleRequirements \u003d new HashSet\u003c\u003e(shift.getRoleRequirements());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            updatedRoleRequirements.removeIf(roleRequirement -\u003e roleRequirement.getRole().equals(roleToDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Shift updatedShift \u003d new Shift(shift.getShiftDay(), shift.getShiftTime(), updatedRoleRequirements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            model.setShift(shift, updatedShift);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void deleteRoleFromWorkers(Model model, Role roleToDelete) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, roleToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cWorker\u003e fullWorkerList \u003d model.getFullWorkerList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Worker worker : fullWorkerList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Set\u003cRole\u003e updatedRoles \u003d new HashSet\u003c\u003e(worker.getRoles());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            updatedRoles.removeIf(role -\u003e role.equals(roleToDelete));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Worker updatedWorker \u003d new Worker(worker.getName(), worker.getPhone(), worker.getPay(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    worker.getAddress(), updatedRoles, worker.getUnavailableTimings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            model.setWorker(worker, updatedWorker);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void deleteRoleFromAssignments(Model model, Role roleToDelete) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, roleToDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (roleToDelete.equals(assignment.getRole())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                assignmentsToDelete.add(assignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentsToDelete.forEach(model::deleteAssignment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (other instanceof RoleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RoleDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 92,
      "sigmund-c": 14
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/RoleListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_ROLES_WITHOUT_LEAVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Lists all roles in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"role-list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All valid roles:\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.updateFilteredRoleList(PREDICATE_SHOW_ALL_ROLES_WITHOUT_LEAVE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ObservableList\u003cRole\u003e roleList \u003d model.getFilteredRoleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String printableRoleList \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d roleList.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            printableRoleList +\u003d i + \". \" + roleList.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, printableRoleList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 29,
      "sigmund-c": 4
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ShiftAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Adds a shift to the McScheduler."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shift-add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a shift to the McScheduler. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"DAY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"[\" + PREFIX_ROLE_REQUIREMENT + \"ROLE NUMBER_NEEDED]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"MON \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_SHIFT_TIME + \"AM \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_ROLE_REQUIREMENT + \"Cleaner 2 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_ROLE_REQUIREMENT + \"Cashier 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New shift added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHIFT \u003d \"This shift already exists in the McScheduler\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Shift shiftToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Creates a ShiftAddCommand to add the specified {@code Shift}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public ShiftAddCommand(Shift shift) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(shift);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        shiftToAdd \u003d shift;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (model.hasShift(shiftToAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRoleRequirement\u003e roleRequirementSet \u003d shiftToAdd.getRoleRequirements();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (RoleRequirement requirement : roleRequirementSet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!model.hasRole(requirement.getRole())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, requirement.getRole()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        model.addShift(shiftToAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, shiftToAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                || (other instanceof ShiftAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \u0026\u0026 shiftToAdd.equals(((ShiftAddCommand) other).shiftToAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "plosslaw": 52,
      "sigmund-c": 9
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ShiftDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Deletes a shift identified using its displayed index from the McScheduler."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shift-delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \": Deletes the shift identified by the index number used in the displayed shift list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_DELETE_SHIFT_SUCCESS \u003d \"Deleted Shift: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public ShiftDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cShift\u003e lastShownList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift shiftToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        deleteShiftFromAssignments(model, shiftToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        model.deleteShift(shiftToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SHIFT_SUCCESS, shiftToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void deleteShiftFromAssignments(Model model, Shift shiftToDelete) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, shiftToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (shiftToDelete.isSameShift(assignment.getShift())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                assignmentsToDelete.add(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentsToDelete.forEach(model::deleteAssignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                || (other instanceof ShiftDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ShiftDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 16,
      "plosslaw": 47,
      "sigmund-c": 9
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ShiftEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_SHIFTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Edits the details of an existing shift in the App."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftEditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shift-edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the shift identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"by the index number used in the displayed worker list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"[\" + PREFIX_SHIFT_DAY + \"DAY] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"[\" + PREFIX_SHIFT_TIME + \"TIME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"[\" + PREFIX_ROLE_REQUIREMENT + \"ROLE QUANTITY_NEEDED]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"Wed \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_ROLE_REQUIREMENT + \"Cashier 5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_EDIT_SHIFT_SUCCESS \u003d \"Edited Shift: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHIFT \u003d \"This shift already exists in the App\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_UNASSIGN_WORKERS \u003d \"Some workers must be unassigned from their roles\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"to make this edit\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final EditShiftDescriptor editShiftDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a ShiftEditCommand from the given required information."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param index of the shift in the filtered shift list to edit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param editShiftDescriptor detaiils to edit the shift with."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftEditCommand(Index index, EditShiftDescriptor editShiftDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, editShiftDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.editShiftDescriptor \u003d new EditShiftDescriptor(editShiftDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e lastShownList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift shiftToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift editedShift \u003d createEditedShift(shiftToEdit, editShiftDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!shiftToEdit.isSameShift(editedShift) \u0026\u0026 model.hasShift(editedShift)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRoleRequirement\u003e roleRequirementSet \u003d editedShift.getRoleRequirements();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (RoleRequirement requirement : roleRequirementSet) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!model.hasRole(requirement.getRole())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, requirement.getRole()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        editShiftInAssignments(model, shiftToEdit, editedShift);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        model.setShift(shiftToEdit, editedShift);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        model.updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SHIFT_SUCCESS, editedShift));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static Shift createEditedShift(Shift shiftToEdit, EditShiftDescriptor editShiftDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert shiftToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay updatedDay \u003d editShiftDescriptor.getShiftDay().orElse(shiftToEdit.getShiftDay());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime updatedTime \u003d editShiftDescriptor.getShiftTime().orElse(shiftToEdit.getShiftTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Set\u003cRoleRequirement\u003e updatedRoleRequirements \u003d editShiftDescriptor.getRoleRequirements()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .orElse(shiftToEdit.getRoleRequirements());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Shift(updatedDay, updatedTime, updatedRoleRequirements);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private void editShiftInAssignments(Model model, Shift shiftToEdit, Shift editedShift) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, shiftToEdit, editedShift);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cRole\u003e newRoles \u003d editedShift.getRoles();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (shiftToEdit.isSameShift(assignment.getShift())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                Role assignmentRole \u003d assignment.getRole();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                if (!newRoles.contains(assignmentRole) || assignment.getWorker().isUnavailable(editedShift)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    // This accounts for the case where the shift no longer has the role specified in the assignment"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    assignmentsToDelete.add(assignment);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                } else if (Shift.countRoleQuantityFilled(model, shiftToEdit, assignmentRole)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                        \u003e getQuantityRequiredForRole(editedShift, assignmentRole)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    // This accounts for the case where the quantity needed for a particular role is less than the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    // current quantity filled"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    throw new CommandException(MESSAGE_UNASSIGN_WORKERS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    assignmentsToEdit.add(assignment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (Assignment assignment : assignmentsToDelete) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            model.deleteAssignment(assignment);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : assignmentsToEdit) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Assignment updatedAssignment \u003d createEditedAssignment(assignment, editedShift);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            model.setAssignment(assignment, updatedAssignment);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static int getQuantityRequiredForRole(Shift shift, Role role) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cRoleRequirement\u003e roleRequirements \u003d shift.getRoleRequirements();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        int quantityRequiredForRole \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (RoleRequirement roleRequirement : roleRequirements) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (roleRequirement.getRole().equals(role)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                quantityRequiredForRole \u003d roleRequirement.getQuantityRequired();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assert quantityRequiredForRole !\u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return quantityRequiredForRole;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit, Shift editedShift) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(assignmentToEdit, editedShift);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment(editedShift, assignmentToEdit.getWorker(), assignmentToEdit.getRole());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof ShiftEditCommand)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftEditCommand s \u003d (ShiftEditCommand) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return index.equals(s.index)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 editShiftDescriptor.equals(s.editShiftDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static class EditShiftDescriptor {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private ShiftDay day;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private ShiftTime time;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private Set\u003cRoleRequirement\u003e roleRequirements;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public EditShiftDescriptor() {}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * A new {@code Set} is created for {@code roleRequirements} internally in"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * {@link EditShiftDescriptor#setRoleRequirements(Set)}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public EditShiftDescriptor(EditShiftDescriptor toCopy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setShiftDay(toCopy.day);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setShiftTime(toCopy.time);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setRoleRequirements(toCopy.roleRequirements);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(day, time, roleRequirements);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShiftDay(ShiftDay day) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cShiftDay\u003e getShiftDay() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.ofNullable(day);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShiftTime(ShiftTime time) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cShiftTime\u003e getShiftTime() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Sets {@code roleRequirements} to this object\u0027s {@code roleRequirements}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * A defensive copy of {@code roleRequirements} is used internally."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setRoleRequirements(Set\u003cRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.roleRequirements \u003d (roleRequirements !\u003d null) ? new HashSet\u003c\u003e(roleRequirements) : null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Returns an unmodifiable role requirements set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code roleRequirements} is null."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cSet\u003cRoleRequirement\u003e\u003e getRoleRequirements() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return (roleRequirements !\u003d null)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(roleRequirements))"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (!(other instanceof EditShiftDescriptor)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            EditShiftDescriptor e \u003d (EditShiftDescriptor) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return getShiftDay().equals(e.getShiftDay())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u0026\u0026 getShiftTime().equals(e.getShiftTime())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u0026\u0026 getRoleRequirements().equals(e.getRoleRequirements());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 31,
      "plosslaw": 2,
      "tnsyn": 31,
      "sigmund-c": 20,
      "WangZijun97": 166
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/ShiftListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Lists all shifts in the App to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shift-list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all shifts\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "WangZijun97": 20
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/TakeLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Assign a worker to take leave for a particular shift."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TakeLeaveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"take-leave\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns the specified worker(s) to take leave \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"during the specified shift by the index numbers used in the last worker and shift listings. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT + \"SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"[\" + PREFIX_WORKER + \"WORKER_INDEX (must be a positive integer)]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \" s/4 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_TAKE_LEAVE_SUCCESS_PREFIX \u003d \"[Leave taken] \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index shiftIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a TakeLeaveCommand to assign"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param shiftIndex of the shift in the filtered shift list to assign the leave to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param workerIndexes of the worker(s) in the filtered worker list who are taking leave."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public TakeLeaveCommand(Index shiftIndex, Set\u003cIndex\u003e workerIndexes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftIndex \u003d shiftIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndexes \u003d workerIndexes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e workerLeaves \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Index i: workerIndexes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerLeaves.add(new WorkerRolePair(i, new Leave()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult \u003d new AssignCommand(shiftIndex, workerLeaves).execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(MESSAGE_TAKE_LEAVE_SUCCESS_PREFIX + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different type including null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof TakeLeaveCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        TakeLeaveCommand c \u003d (TakeLeaveCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftIndex.equals(c.shiftIndex)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 workerIndexes.equals(c.workerIndexes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 27,
      "WangZijun97": 51
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/UnassignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Deletes a shift, worker and shift assignment from the McScheduler."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class UnassignCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unassign\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes shift, worker(s) and role(s) assignment(s) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"from the McScheduler by the index numbers used in the last worker and shift listings. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + PREFIX_SHIFT + \"SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"[\" + PREFIX_WORKER + \"WORKER_INDEX (must be a positive integer)]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" s/1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/4 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"w/2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_UNASSIGN_SUCCESS \u003d \"%1$d shift assignment(s) removed:\\n%2$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \"This assignment does not exist in the McScheduler: [%1$s]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Index shiftIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an UnassignCommand to delete the assignment of the specified {@code Shift}, {@code Worker} and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code Role}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param shiftIndex of the shift in the filtered shift list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param workerIndexes of the worker(s) in the filtered worker list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public UnassignCommand(Index shiftIndex, Set\u003cIndex\u003e workerIndexes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(workerIndexes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shiftIndex \u003d shiftIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndexes \u003d workerIndexes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cShift\u003e lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (shiftIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Check if any is not found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Index workerIndex : workerIndexes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (workerIndex.getZeroBased() \u003e\u003d lastShownWorkerList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Worker workerToUnassign \u003d lastShownWorkerList.get(workerIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Shift shiftToUnassign \u003d lastShownShiftList.get(shiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Assignment assignmentToDelete \u003d new Assignment(shiftToUnassign, workerToUnassign);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!model.hasAssignment(assignmentToDelete)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_ASSIGNMENT_NOT_FOUND, assignmentToDelete));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StringBuilder unassignStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Remove assignments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Index workerIndex : workerIndexes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Worker workerToUnassign \u003d lastShownWorkerList.get(workerIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Shift shiftToUnassign \u003d lastShownShiftList.get(shiftIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Assignment assignmentToDelete \u003d new Assignment(shiftToUnassign, workerToUnassign);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Role roleToUnassign \u003d getRoleToUnassign(model, shiftToUnassign, workerToUnassign);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Assignment assignmentWithRole \u003d new Assignment(shiftToUnassign, workerToUnassign, roleToUnassign);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            unassignStringBuilder.append(assignmentWithRole);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            unassignStringBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                model.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } catch (AssignmentNotFoundException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(MESSAGE_ASSIGNMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Shift.updateRoleRequirements(model, shiftToUnassign, roleToUnassign);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(MESSAGE_UNASSIGN_SUCCESS, workerIndexes.size(), unassignStringBuilder.toString()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static Role getRoleToUnassign(Model model, Shift shiftToUnassign, Worker workerToUnassign) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : assignmentList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (assignment.getShift().isSameShift(shiftToUnassign)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    \u0026\u0026 assignment.getWorker().isSameWorker(workerToUnassign)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return assignment.getRole();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert false : \"Role returned is null\"; // a non-null role should have been returned within the for loop"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!(other instanceof UnassignCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        UnassignCommand e \u003d (UnassignCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return shiftIndex.equals(e.shiftIndex)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 workerIndexes.equals(e.workerIndexes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 86,
      "sigmund-c": 54
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Adds a worker to the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerAddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a worker to the address book. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PREFIX_PAY + \"HOURLY_PAY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //+ PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"[\" + PREFIX_ROLE + \"ROLE]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"[\" + PREFIX_UNAVAILABILITY + \"UNAVAILABLE TIMINGS]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PREFIX_PAY + \"10.20 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //+ PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_ROLE + \"chef \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_ROLE + \"cashier \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + PREFIX_UNAVAILABILITY + \"MON PM\";;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New worker added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKER \u003d \"This worker already exists in the address book\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Worker toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates an WorkerAddCommand to add the specified {@code Worker}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerAddCommand(Worker worker) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(worker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        toAdd \u003d worker;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (model.hasWorker(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRole\u003e roleSet \u003d toAdd.getRoles();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Role role : roleSet) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!model.hasRole(role)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, role));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                || (other instanceof WorkerAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 toAdd.equals(((WorkerAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "tnsyn": 9,
      "sigmund-c": 31,
      "-": 37
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerAvailableCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Prints a list of workers who are available for the selected shift."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Excludes workers already assigned to the selected shift."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerAvailableCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-avail\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \": Lists all available workers for the selected shift and role.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Parameters: SHIFT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_ROLE + \"ROLE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + PREFIX_ROLE + \"Cashier\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_HAS_AVAIL_WORKERS_SUCCESS \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            \"List of available workers for shift %1$s (Role: %2$s) \\n%3$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_NO_AVAIL_WORKERS_SUCCESS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            \"Could not find any available workers for shift %1$s (Role: %2$s).\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_ROLE_FULL_OR_NOT_REQUIRED \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            \"The specified role is not required by the selected shift or has already been fully filled\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @param targetIndex of the shift in the filtered shift list to check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @param role of the shift to be filled by available workers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public WorkerAvailableCommand(Index targetIndex, Role role) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cShift\u003e lastShownShiftList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownShiftList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (!model.hasRole(this.role)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, role));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift selectedShift \u003d lastShownShiftList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (!selectedShift.isRoleRequired(this.role)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(MESSAGE_ROLE_FULL_OR_NOT_REQUIRED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cPair\u003cWorker, Index\u003e\u003e availableWorkers \u003d findAvailableWorkers(model, selectedShift);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (availableWorkers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    String.format(MESSAGE_NO_AVAIL_WORKERS_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            this.targetIndex.getOneBased(), this.role.getRole()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String printableListOfAvailableWorkers \u003d printListOfAvailableWorkers(availableWorkers);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String.format(MESSAGE_HAS_AVAIL_WORKERS_SUCCESS, this.targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        this.role.getRole(), printableListOfAvailableWorkers));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private List\u003cPair\u003cWorker, Index\u003e\u003e findAvailableWorkers(Model model, Shift selectedShift) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cPair\u003cWorker, Index\u003e\u003e availableWorkers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cWorker\u003e lastShownWorkerList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cAssignment\u003e assignmentsForSelectedShift \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (selectedShift.equals(assignment.getShift())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                assignmentsForSelectedShift.add(assignment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownWorkerList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Worker worker \u003d lastShownWorkerList.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (checkIfWorkerAlreadyAssigned(assignmentsForSelectedShift, worker) || !worker.isFitForRole(this.role)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (!worker.isUnavailable(selectedShift)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                Index currentIndex \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                availableWorkers.add(new Pair\u003c\u003e(worker, currentIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return availableWorkers;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private boolean checkIfWorkerAlreadyAssigned(List\u003cAssignment\u003e assignmentList, Worker worker) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Assignment assignment : assignmentList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (worker.equals(assignment.getWorker())) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private String printListOfAvailableWorkers(List\u003cPair\u003cWorker, Index\u003e\u003e availableWorkers) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Pair\u003cWorker, Index\u003e pair : availableWorkers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            output +\u003d String.format(\"%1$s    %2$s\\n\", pair.getValue().getOneBased(), pair.getKey().getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                || (other instanceof WorkerAvailableCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((WorkerAvailableCommand) other).targetIndex)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \u0026\u0026 role.equals(((WorkerAvailableCommand) other).role)); // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 131,
      "sigmund-c": 10
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Deletes a worker identified using its displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \": Deletes the worker identified by the index number used in the displayed worker list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DELETE_WORKER_SUCCESS \u003d \"Deleted worker: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public WorkerDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        deleteWorkerFromAssignments(model, workerToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.deleteWorker(workerToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_WORKER_SUCCESS, workerToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void deleteWorkerFromAssignments(Model model, Worker workerToDelete) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, workerToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (workerToDelete.isSameWorker(assignment.getWorker())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                assignmentsToDelete.add(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentsToDelete.forEach(model::deleteAssignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                || (other instanceof WorkerDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((WorkerDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 17,
      "tnsyn": 5,
      "sigmund-c": 16,
      "-": 34
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_WORKERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Edits the details of an existing worker in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerEditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the worker identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"by the index number used in the displayed worker list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"[\" + PREFIX_PAY + \"HOURLY PAY] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //+ \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            //+ \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"[\" + PREFIX_ROLE + \"ROLE]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + \"[\" + PREFIX_UNAVAILABILITY + \"UNAVAILABLE TIMINGS]...\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //+ PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PREFIX_PAY + \"10.20\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_EDIT_WORKER_SUCCESS \u003d \"Edited worker: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKER \u003d \"This worker already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final EditWorkerDescriptor editWorkerDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param index of the worker in the filtered worker list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param editWorkerDescriptor details to edit the worker with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerEditCommand(Index index, EditWorkerDescriptor editWorkerDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(editWorkerDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.editWorkerDescriptor \u003d new EditWorkerDescriptor(editWorkerDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d createEditedWorker(workerToEdit, editWorkerDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!workerToEdit.isSameWorker(editedWorker) \u0026\u0026 model.hasWorker(editedWorker)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRole\u003e roleSet \u003d editedWorker.getRoles();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Role role : roleSet) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!model.hasRole(role)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_ROLE_NOT_FOUND, role));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        editWorkerInAssignments(model, workerToEdit, editedWorker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.setWorker(workerToEdit, editedWorker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_WORKER_SUCCESS, editedWorker));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates and returns a {@code Worker} with the details of {@code workerToEdit}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * edited with {@code editWorkerDescriptor}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static Worker createEditedWorker(Worker workerToEdit, EditWorkerDescriptor editWorkerDescriptor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assert workerToEdit !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Name updatedName \u003d editWorkerDescriptor.getName().orElse(workerToEdit.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Phone updatedPhone \u003d editWorkerDescriptor.getPhone().orElse(workerToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Pay updatedPay \u003d editWorkerDescriptor.getPay().orElse(workerToEdit.getPay());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Address updatedAddress \u003d editWorkerDescriptor.getAddress().orElse(workerToEdit.getAddress());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cRole\u003e updatedRoles \u003d editWorkerDescriptor.getRoles().orElse(workerToEdit.getRoles());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cUnavailability\u003e updatedUnavailabilities \u003d editWorkerDescriptor.getUnavailableTimings()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .orElse(workerToEdit.getUnavailableTimings());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Worker(updatedName, updatedPhone, updatedPay, updatedAddress, updatedRoles, updatedUnavailabilities);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void editWorkerInAssignments(Model model, Worker workerToEdit, Worker editedWorker) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, workerToEdit, editedWorker);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e fullAssignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : fullAssignmentList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (workerToEdit.isSameWorker(assignment.getWorker())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                Role assignedRole \u003d assignment.getRole();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                if (!editedWorker.isFitForRole(assignedRole) || editedWorker.isUnavailable(assignment.getShift())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    assignmentsToDelete.add(assignment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    assignmentsToEdit.add(assignment);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (Assignment assignment : assignmentsToDelete) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            model.deleteAssignment(assignment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : assignmentsToEdit) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Assignment updatedAssignment \u003d createEditedAssignment(assignment, editedWorker);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            model.setAssignment(assignment, updatedAssignment);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit, Worker editedWorker) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(assignmentToEdit, editedWorker);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment(assignmentToEdit.getShift(), editedWorker, assignmentToEdit.getRole());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!(other instanceof WorkerEditCommand)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand e \u003d (WorkerEditCommand) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 editWorkerDescriptor.equals(e.editWorkerDescriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Stores the details to edit the worker with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * corresponding field value of the worker."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static class EditWorkerDescriptor {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private Pay pay;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //private Email email;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        private Set\u003cRole\u003e roles;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        private Set\u003cUnavailability\u003e unavailableTimings;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public EditWorkerDescriptor() {}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "         * A defensive copy of {@code roles} is used internally."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public EditWorkerDescriptor(EditWorkerDescriptor toCopy) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            setPay(toCopy.pay);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //setEmail(toCopy.email);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            setRoles(toCopy.roles);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            setUnavailableTimings(toCopy.unavailableTimings);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, pay, address, roles,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    unavailableTimings);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setPay(Pay pay) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.pay \u003d pay;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public Optional\u003cPay\u003e getPay() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return Optional.ofNullable(pay);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "         * Sets {@code roles} to this object\u0027s {@code roles}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        public void setRoles(Set\u003cRole\u003e roles) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            this.roles \u003d (roles !\u003d null) ? new HashSet\u003c\u003e(roles) : null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code roles} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        public Optional\u003cSet\u003cRole\u003e\u003e getRoles() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return (roles !\u003d null) ? Optional.of(Collections.unmodifiableSet(roles)) : Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        public void setUnavailableTimings(Set\u003cUnavailability\u003e unavailableTimings) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            this.unavailableTimings \u003d (unavailableTimings !\u003d null) ? new HashSet\u003c\u003e(unavailableTimings) : null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        public Optional\u003cSet\u003cUnavailability\u003e\u003e getUnavailableTimings() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return (unavailableTimings !\u003d null)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(unavailableTimings)) : Optional.empty();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (!(other instanceof EditWorkerDescriptor)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            EditWorkerDescriptor e \u003d (EditWorkerDescriptor) other;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    \u0026\u0026 getPay().equals(e.getPay())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    //\u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    \u0026\u0026 getRoles().equals(e.getRoles())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    \u0026\u0026 getUnavailableTimings().equals(e.getUnavailableTimings());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 33,
      "tnsyn": 41,
      "sigmund-c": 88,
      "-": 145
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_WORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Lists all workers in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all workers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 2,
      "sigmund-c": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/WorkerPayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Prints the pay earned by a worker identified using their displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerPayCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"worker-pay\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \": Calculates the weekly pay earned by a worker identified by the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"index number used in the displayed worker list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String MESSAGE_SHOW_PAY_SUCCESS \u003d \"Pay earned by worker (%1$s): $ %2$.2f\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public WorkerPayCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        List\u003cWorker\u003e lastShownList \u003d model.getFilteredWorkerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Worker selectedWorker \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        float calculatedPay \u003d model.calculateWorkerPay(selectedWorker);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SHOW_PAY_SUCCESS, selectedWorker.getName(), calculatedPay));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                || (other instanceof WorkerPayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((WorkerPayCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 53,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Parses input arguments and creates a new WorkerAddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class AddCommandParser implements Parser\u003cWorkerAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerAddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * and returns an WorkerAddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_PAY,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_ROLE, CliSyntax.PREFIX_UNAVAILABILITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_PAY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    WorkerAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Pay pay \u003d ParserUtil.parsePay(argMultimap.getValue(CliSyntax.PREFIX_PAY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cRole\u003e roleList \u003d ParserUtil.parseRoles(argMultimap.getAllValues(CliSyntax.PREFIX_ROLE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cUnavailability\u003e unavailableTimings \u003d ParserUtil.parseUnavailabilities(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .getAllValues(CliSyntax.PREFIX_UNAVAILABILITY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker worker \u003d new Worker(name, phone, pay, address, roleList, unavailableTimings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new WorkerAddCommand(worker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 62
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/AssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * and returns an AssignCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CliSyntax.PREFIX_SHIFT, CliSyntax.PREFIX_WORKER_ROLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_SHIFT, CliSyntax.PREFIX_WORKER_ROLE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Index shiftIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //Index workerIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e workerRolePairs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            shiftIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_SHIFT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            //workerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_WORKER).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerRolePairs \u003d ParserUtil.parseWorkerRoles(argMultimap.getAllValues(CliSyntax.PREFIX_WORKER_ROLE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    AssignCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new AssignCommand(shiftIndex, workerRolePairs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 39,
      "sigmund-c": 21
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/CancelLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CancelLeaveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Parses input arguments and creates a new CancelLeaveCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class CancelLeaveCommandParser implements Parser\u003cCancelLeaveCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CancelLeaveCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * and returns a CancelLeaveCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CancelLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SHIFT, PREFIX_WORKER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argumentMultimap, PREFIX_SHIFT, PREFIX_WORKER)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CancelLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index shiftIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            shiftIndex \u003d ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_SHIFT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerIndexes \u003d ParserUtil.parseIndexes(argumentMultimap.getAllValues(PREFIX_WORKER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    CancelLeaveCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CancelLeaveCommand(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 17,
      "WangZijun97": 31
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"hp/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Prefix PREFIX_PAY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    //public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    //public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Prefix PREFIX_ROLE_REQUIREMENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Prefix PREFIX_SHIFT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_NEW \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_OLD \u003d new Prefix(\"so/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_UNAVAILABILITY \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Prefix PREFIX_WORKER \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Prefix PREFIX_WORKER_ROLE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_WORKER_OLD \u003d new Prefix(\"wo/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Prefix PREFIX_WORKER_NEW \u003d new Prefix(\"wn/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "tnsyn": 8,
      "sigmund-c": 4,
      "WangZijun97": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/MassCancelLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassCancelLeaveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class MassCancelLeaveCommandParser implements Parser\u003cMassCancelLeaveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MassTakeLeaveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * and returns a MassCancelLeaveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public MassCancelLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                PREFIX_WORKER, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argumentMultimap, PREFIX_WORKER, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassCancelLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).size() !\u003d 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).size() !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassCancelLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index workerIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay startDay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay endDay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            workerIndex \u003d ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_WORKER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            startDay \u003d ParserUtil.parseShiftDay(argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            startTime \u003d ParserUtil.parseShiftTime(argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            endDay \u003d ParserUtil.parseShiftDay(argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).get(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            endTime \u003d ParserUtil.parseShiftTime(argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).get(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassCancelLeaveCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new MassCancelLeaveCommand(workerIndex, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 16,
      "WangZijun97": 42
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/MassTakeLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassTakeLeaveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class MassTakeLeaveCommandParser implements Parser\u003cMassTakeLeaveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MassTakeLeaveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * and returns a MassTakeLeaveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public MassTakeLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                PREFIX_WORKER, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argumentMultimap, PREFIX_WORKER, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassTakeLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).size() !\u003d 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            || argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).size() !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassTakeLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index workerIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay startDay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay endDay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            workerIndex \u003d ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_WORKER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            startDay \u003d ParserUtil.parseShiftDay(argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            startTime \u003d ParserUtil.parseShiftTime(argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            endDay \u003d ParserUtil.parseShiftDay(argumentMultimap.getAllValues(PREFIX_SHIFT_DAY).get(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            endTime \u003d ParserUtil.parseShiftTime(argumentMultimap.getAllValues(PREFIX_SHIFT_TIME).get(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    MassTakeLeaveCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new MassTakeLeaveCommand(workerIndex, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 16,
      "WangZijun97": 43
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/McSchedulerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CancelLeaveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassCancelLeaveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassTakeLeaveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ReassignCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.RoleAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.RoleDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.RoleListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftDeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.TakeLeaveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.UnassignCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAvailableCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerDeleteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerPayCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McSchedulerParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        case WorkerAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new WorkerAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        case WorkerEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new WorkerEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        case WorkerDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new WorkerDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        case WorkerAvailableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new WorkerAvailableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        case WorkerListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new WorkerListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case UnassignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new UnassignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        case ReassignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new ReassignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case TakeLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new TakeLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case MassTakeLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new MassTakeLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case CancelLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new CancelLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case MassCancelLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new MassCancelLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        case ShiftAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ShiftAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case ShiftEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ShiftEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        case ShiftDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new ShiftDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case ShiftListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new ShiftListCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case RoleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new RoleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case RoleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new RoleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case RoleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new RoleListCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        case WorkerPayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new WorkerPayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 17,
      "plosslaw": 12,
      "tnsyn": 11,
      "sigmund-c": 31,
      "WangZijun97": 17,
      "-": 50
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndexes(Collection\u003cString\u003e oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(oneBasedIndexes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (String oneBasedIndex : oneBasedIndexes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            indexSet.add(parseIndex(oneBasedIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses a {@code String pay} into an {@code Pay}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws ParseException if the given {@code pay} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static Pay parsePay(String pay) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(pay);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String trimmedPay \u003d pay.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!Pay.isValidPay(pay)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(Pay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new Pay(trimmedPay);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String day} into a {@code ShiftDay}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ShiftDay parseShiftDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedShiftDay \u003d day.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftDay.isValidDay(trimmedShiftDay)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftDay(day);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String time} into a {@code ShiftTime}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ShiftTime parseShiftTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedShiftTime \u003d time.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftTime.isValidTime(trimmedShiftTime)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftTime((time));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String role} into a {@code Role}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!Role.isValidTagName(trimmedRole)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Role.createRole(trimmedRole);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e roles} into a {@code Set\u003cRole\u003e}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static Set\u003cRole\u003e parseRoles(Collection\u003cString\u003e roles) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(roles);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        final Set\u003cRole\u003e roleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (String tagName : roles) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            roleSet.add(parseRole(tagName));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return roleSet;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses a {@code String unavailability} into an {@code Unavailability}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @throws ParseException if the given {@code unavailability} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static Unavailability parseUnavailability(String unavailability) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(unavailability);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String trimmedUnavailability \u003d unavailability.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!Unavailability.isValidUnavailability(trimmedUnavailability)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new ParseException(Unavailability.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return new Unavailability(trimmedUnavailability);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Generates an AM Unavailability using {@code String day}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static String createMorningUnavailabilityString(String day) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        sb.append(day);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(UnavailabilitySyntax.MORNING);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Generates a PM Unavailability using {@code String day}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static String createAfternoonUnavailabilityString(String day) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        sb.append(day);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(UnavailabilitySyntax.AFTERNOON);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e unavailabilities} into an {@code Set\u003cUnavailability\u003e}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static Set\u003cUnavailability\u003e parseUnavailabilities(Collection\u003cString\u003e unavailabilities) throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(unavailabilities);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        final Set\u003cUnavailability\u003e unavailabilitySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (String unavailability : unavailabilities) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (unavailability.toUpperCase().contains(UnavailabilitySyntax.WHOLE_DAY)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                String[] tempString \u003d unavailability.split(\" \");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                String day \u003d tempString[0];"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                String morningUnavailability \u003d createMorningUnavailabilityString(day);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                String afternoonUnavailability \u003d createAfternoonUnavailabilityString(day);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                unavailabilitySet.add(parseUnavailability(morningUnavailability));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                unavailabilitySet.add(parseUnavailability(afternoonUnavailability));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                unavailabilitySet.add(parseUnavailability(unavailability));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return unavailabilitySet;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String roleRequirement} into a {@code RoleRequirement}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code roleRequirement} is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static RoleRequirement parseRoleRequirement(String roleRequirement) throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirement);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedRoleRequirement \u003d roleRequirement.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!RoleRequirement.isValidRoleRequirement(trimmedRoleRequirement)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(RoleRequirement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d trimmedRoleRequirement.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Role role \u003d parseRole(trimmedRoleRequirement.substring(0, index));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int quantity \u003d Integer.parseInt(trimmedRoleRequirement.substring(index + 1));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new RoleRequirement(role, quantity);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e roleRequirements} into a {@code Set\u003cRoleRequirement\u003e}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Set\u003cRoleRequirement\u003e parseRoleRequirements(Collection\u003cString\u003e roleRequirements)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirements);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final Set\u003cRoleRequirement\u003e roleRequirementSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (String roleRequirementString : roleRequirements) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            roleRequirementSet.add(parseRoleRequirement(roleRequirementString));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return roleRequirementSet;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses a {@code String roleRequirement} into a {@code RoleRequirement}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws ParseException if the given {@code roleRequirement} is invalid."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static WorkerRolePair parseWorkerRole(String workerRole) throws ParseException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(workerRole);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String trimmedWorkerRole \u003d workerRole.trim();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!WorkerRolePair.isValidWorkerRolePair(trimmedWorkerRole)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(WorkerRolePair.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new WorkerRolePair(trimmedWorkerRole);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e workerRoles} into a {@code Set\u003cWorkerRolePair\u003e}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static Set\u003cWorkerRolePair\u003e parseWorkerRoles("
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Collection\u003cString\u003e workerRoles) throws ParseException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(workerRoles);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final Set\u003cWorkerRolePair\u003e workerRolePairSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (String workerRoleString : workerRoles) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerRolePairSet.add(parseWorkerRole(workerRoleString));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workerRolePairSet;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 8,
      "tnsyn": 65,
      "sigmund-c": 76,
      "WangZijun97": 79,
      "-": 115
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ReassignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_NEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_OLD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_NEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_OLD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ReassignCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class ReassignCommandParser implements Parser\u003cReassignCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReassignCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and returns an ReassignCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public ReassignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                PREFIX_WORKER_OLD, PREFIX_WORKER_NEW, PREFIX_SHIFT_OLD, PREFIX_SHIFT_NEW,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                PREFIX_ROLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORKER_OLD, PREFIX_WORKER_NEW, PREFIX_SHIFT_OLD,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                PREFIX_SHIFT_NEW, PREFIX_ROLE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ReassignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Index oldShiftIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Index newShiftIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Index oldWorkerIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Index newWorkerIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            oldShiftIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SHIFT_OLD).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            newShiftIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SHIFT_NEW).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            oldWorkerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_WORKER_OLD).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            newWorkerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_WORKER_NEW).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    ReassignCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Role newRole \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return new ReassignCommand(oldWorkerIndex, newWorkerIndex, oldShiftIndex, newShiftIndex, newRole);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 50,
      "sigmund-c": 15
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/RoleAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.RoleAddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Parses input arguments and creates a new RoleAddCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleAddCommandParser implements Parser\u003cRoleAddCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoleAddCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * and returns a RoleAddCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new RoleAddCommand(role);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 18,
      "sigmund-c": 4
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/RoleDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.RoleDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Parses input arguments and creates a new RoleDeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleDeleteCommandParser implements Parser\u003cRoleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoleDeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * and returns a RoleDeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new RoleDeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RoleDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 22,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ShiftAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Parses input arguments and creates a new ShiftAddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftAddCommandParser implements Parser\u003cShiftAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerAddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and returns an WorkerAddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public ShiftAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME, PREFIX_ROLE_REQUIREMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ShiftAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftDay shiftDay \u003d ParserUtil.parseShiftDay(argMultimap.getValue(PREFIX_SHIFT_DAY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftTime shiftTime \u003d ParserUtil.parseShiftTime(argMultimap.getValue(PREFIX_SHIFT_TIME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Set\u003cRoleRequirement\u003e roleReqList \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                ParserUtil.parseRoleRequirements(argMultimap.getAllValues(PREFIX_ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift shift \u003d new Shift(shiftDay, shiftTime, roleReqList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new ShiftAddCommand(shift);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 40,
      "tnsyn": 2,
      "sigmund-c": 13
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ShiftDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Parses input arguments and creates a new ShiftDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftDeleteCommandParser implements Parser\u003cShiftDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShiftDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * and returns a ShiftDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public ShiftDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new ShiftDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ShiftDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 22,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/ShiftEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Parses input arguments and creates a new ShiftEditCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftEditCommandParser implements Parser\u003cShiftEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShiftEditCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return ShiftEditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME, PREFIX_ROLE_REQUIREMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ShiftEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor editShiftDescriptor \u003d new ShiftEditCommand.EditShiftDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SHIFT_DAY).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            editShiftDescriptor.setShiftDay(ParserUtil.parseShiftDay(argMultimap.getValue(PREFIX_SHIFT_DAY).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SHIFT_TIME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            editShiftDescriptor.setShiftTime(ParserUtil.parseShiftTime(argMultimap.getValue(PREFIX_SHIFT_TIME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        parseRoleRequirementsForEdit(argMultimap.getAllValues(PREFIX_ROLE_REQUIREMENT))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .ifPresent(editShiftDescriptor::setRoleRequirements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!editShiftDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftEditCommand(index, editShiftDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses non-empty {@code Collection\u003cString\u003e roleRequirements} into a {@code Set\u003cRoleRequirement\u003e}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If {@code roleRequirements} only contains an empty string element,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * it will be parsed into an empty {@code Set\u003cRoleRequirement\u003e}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Optional\u003cSet\u003cRoleRequirement\u003e\u003e parseRoleRequirementsForEdit("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Collection\u003cString\u003e roleRequirements) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert roleRequirements !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (roleRequirements.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Collection\u003cString\u003e roleRequirementsSet \u003d roleRequirements.size() \u003d\u003d 1 \u0026\u0026 roleRequirements.contains(\"\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                : roleRequirements;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Optional.of(ParserUtil.parseRoleRequirements(roleRequirementsSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 12,
      "WangZijun97": 67
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/TakeLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.TakeLeaveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Parses input arguments and creates a new TakeLeaveCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TakeLeaveCommandParser implements Parser\u003cTakeLeaveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TakeLeaveCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * and returns an TakeLeaveCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TakeLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                PREFIX_SHIFT, PREFIX_WORKER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_SHIFT, PREFIX_WORKER)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    TakeLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index shiftIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            shiftIndex \u003d ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_SHIFT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerIndexes \u003d ParserUtil.parseIndexes(argumentMultimap.getAllValues(PREFIX_WORKER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    TakeLeaveCommand.MESSAGE_USAGE, ive));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new TakeLeaveCommand(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 16,
      "WangZijun97": 33
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/UnassignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.UnassignCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Parses input arguments and creates a new UnassignCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class UnassignCommandParser implements Parser\u003cUnassignCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnassignCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * and returns an UnassignCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public UnassignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SHIFT, PREFIX_WORKER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SHIFT, PREFIX_WORKER)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnassignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Index shiftIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndexes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            shiftIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_SHIFT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workerIndexes \u003d ParserUtil.parseIndexes(argMultimap.getAllValues(PREFIX_WORKER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    UnassignCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new UnassignCommand(shiftIndex, workerIndexes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 41,
      "sigmund-c": 15
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/UnavailabilitySyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class UnavailabilitySyntax {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String WHOLE_DAY \u003d \"FULL\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MORNING \u003d \" AM\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String AFTERNOON \u003d \" PM\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 6,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/WorkerAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import mcscheduler.model.worker.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import mcscheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Parses input arguments and creates a new WorkerAddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerAddCommandParser implements Parser\u003cWorkerAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and returns an WorkerAddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public WorkerAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_PAY, PREFIX_ADDRESS, PREFIX_ROLE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                        PREFIX_UNAVAILABILITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_PAY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Pay pay \u003d ParserUtil.parsePay(argMultimap.getValue(PREFIX_PAY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cRole\u003e roleList \u003d ParserUtil.parseRoles(argMultimap.getAllValues(PREFIX_ROLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cUnavailability\u003e unavailableTimings \u003d ParserUtil.parseUnavailabilities(argMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .getAllValues(PREFIX_UNAVAILABILITY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Worker worker \u003d new Worker(name, phone, pay, address, roleList, unavailableTimings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new WorkerAddCommand(worker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 14,
      "sigmund-c": 21,
      "-": 33
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/WorkerAvailableCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAvailableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Parses input arguments and creates a new AvailableWorkersCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerAvailableCommandParser implements Parser\u003cWorkerAvailableCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AvailableWorkersCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * and returns a AvailableWorkersCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public WorkerAvailableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WorkerAvailableCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ROLE).isPresent() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WorkerAvailableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new WorkerAvailableCommand(index, role);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 32,
      "sigmund-c": 9
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/WorkerDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Parses input arguments and creates a new WorkerDeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerDeleteCommandParser implements Parser\u003cWorkerDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerDeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and returns a WorkerDeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public WorkerDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return new WorkerDeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WorkerDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 6,
      "sigmund-c": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/WorkerEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Parses input arguments and creates a new WorkerEditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerEditCommandParser implements Parser\u003cWorkerEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and returns an WorkerEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public WorkerEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_PAY, PREFIX_ADDRESS, PREFIX_ROLE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                        PREFIX_UNAVAILABILITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    WorkerEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand.EditWorkerDescriptor editWorkerDescriptor \u003d new WorkerEditCommand.EditWorkerDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            editWorkerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            editWorkerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAY).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            editWorkerDescriptor.setPay(ParserUtil.parsePay(argMultimap.getValue(PREFIX_PAY).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            editWorkerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        parseRolesForEdit(argMultimap.getAllValues(PREFIX_ROLE)).ifPresent(editWorkerDescriptor::setRoles);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        parseUnavailabilitiesForEdit(argMultimap.getAllValues(PREFIX_UNAVAILABILITY))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .ifPresent(editWorkerDescriptor::setUnavailableTimings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!editWorkerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throw new ParseException(WorkerEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new WorkerEditCommand(index, editWorkerDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e roles} into a {@code Set\u003cRole\u003e} if {@code roles} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * {@code Set\u003cRole\u003e} containing zero roles."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private Optional\u003cSet\u003cRole\u003e\u003e parseRolesForEdit(Collection\u003cString\u003e roles) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assert roles !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (roles.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Collection\u003cString\u003e roleSet \u003d roles.size() \u003d\u003d 1 \u0026\u0026 roles.contains(\"\") ? Collections.emptySet() : roles;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Optional.of(ParserUtil.parseRoles(roleSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private Optional\u003cSet\u003cUnavailability\u003e\u003e parseUnavailabilitiesForEdit(Collection\u003cString\u003e unavailabilities)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assert unavailabilities !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (unavailabilities.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Collection\u003cString\u003e unavailabilitySet \u003d unavailabilities.size() \u003d\u003d 1 \u0026\u0026 unavailabilities.contains(\"\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                ? Collections.emptySet() : unavailabilities;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Optional.of(ParserUtil.parseUnavailabilities(unavailabilitySet));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 31,
      "sigmund-c": 24,
      "-": 46
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/WorkerPayCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerPayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Parses input arguments and creates a new WorkerPayCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerPayCommandParser implements Parser\u003cWorkerPayCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WorkerPayCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * and returns a WorkerPayCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public WorkerPayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return new WorkerPayCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WorkerPayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 21,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/McScheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.UniqueShiftList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.UniqueRoleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.UniqueWorkerList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Duplicates are not allowed (by .isSameWorker, .isSameShift and .isSameAssignment comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McScheduler implements ReadOnlyMcScheduler {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final UniqueWorkerList workers;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final UniqueShiftList shifts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final UniqueAssignmentList assignments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final UniqueRoleList validRoles;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workers \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validRoles \u003d new UniqueRoleList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McScheduler() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates an McScheduler using the Workers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McScheduler(ReadOnlyMcScheduler toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces the contents of the worker list with {@code workers}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code workers} must not contain duplicate workers."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers(List\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workers.setWorkers(workers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the contents of the shift list with {@code shifts}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code shifts} must not contain duplicate shifts."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shifts.setShifts(shifts);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the contents of the valid role list with {@code roles}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code roles} must not contain duplicate roles."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRoles(List\u003cRole\u003e roles) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.validRoles.setRoles(roles);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Resets the existing data of this {@code McScheduler} with {@code newData}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void resetData(ReadOnlyMcScheduler newData) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        setWorkers(newData.getWorkerList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        setShifts(newData.getShiftList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        setAssignments(newData.getAssignmentList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        setRoles(newData.getRoleList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // worker-level operations"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if a worker with the same identity as {@code worker} exists in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(worker);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workers.contains(worker);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Adds a worker to the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker must not already exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void addWorker(Worker p) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workers.add(p);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces the given worker {@code target} in the list with {@code editedWorker}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker identity of {@code editedWorker} must not be the same as another existing worker in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker(Worker target, Worker editedWorker) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(editedWorker);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workers.setWorker(target, editedWorker);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Removes {@code key} from this {@code McScheduler}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void removeWorker(Worker key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workers.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // shift-level methods"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a shift with the same identity as {@code shift} exists in the App."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(shift);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shifts.contains(shift);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds a shift to the App."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker must not already exist in the App."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.add(shift);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the given shift {@code target} in the list with {@code editedShift}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must exist in the App."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift identity of {@code editedShift} must not be the same as another existing shift in the App."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(editedShift);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.setShift(target, editedShift);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Removes given shift from the App."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param key Shift to be removed. Must exist in the App."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void removeShift(Shift key) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.remove(key);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // assignment-level operations"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds an assignment to the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment must not already exist in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void addAssignment(Assignment p) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignments.add(p);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the given assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(editedAssignment);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignments.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Removes {@code key} from this {@code McScheduler}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns {@code Optional} containing assignment in {@code McScheduler} that has same identity as query assignment."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If none found, returns and empty Optional."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Optional\u003cAssignment\u003e getAssignment(Assignment toGet) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return assignments.getAssignment(toGet);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // role-level operations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if an role with the same identity as {@code role} exists in the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return validRoles.contains(role);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds an role to the address book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role must not already exist in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void addRole(Role p) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validRoles.add(p);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the given role {@code target} in the list with {@code editedRole}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role identity of {@code editedRole} must not be the same as another existing role in the"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRole(Role target, Role editedRole) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(editedRole);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validRoles.setRole(target, editedRole);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Removes {@code key} from this {@code McScheduler}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void removeRole(Role key) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validRoles.remove(key);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workers.asUnmodifiableObservableList().size() + \" workers; \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + shifts.asUnmodifiableObservableList().size() + \" shifts;\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + assignments.asUnmodifiableObservableList().size() + \" assignments\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + validRoles.asUnmodifiableObservableList().size() + \" valid roles\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ObservableList\u003cWorker\u003e getWorkerList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getShiftList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shifts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cRole\u003e getRoleList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return validRoles.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof McScheduler)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler otherMcScheduler \u003d (McScheduler) other;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workers.equals(otherMcScheduler.workers)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 shifts.equals(otherMcScheduler.shifts)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 assignments.equals(otherMcScheduler.assignments)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 validRoles.equals(otherMcScheduler.validRoles);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workers.hashCode();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 116,
      "sigmund-c": 52,
      "WangZijun97": 64,
      "-": 79
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Predicate\u003cWorker\u003e PREDICATE_SHOW_ALL_WORKERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    Predicate\u003cShift\u003e PREDICATE_SHOW_ALL_SHIFTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    Predicate\u003cRole\u003e PREDICATE_SHOW_ALL_ROLES_WITHOUT_LEAVE \u003d role -\u003e !Leave.isLeave(role);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Path getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void setMcSchedulerFilePath(Path mcSchedulerFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces address book data with the data in {@code mcScheduler}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void setMcScheduler(ReadOnlyMcScheduler mcScheduler);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /** Returns the McScheduler */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    ReadOnlyMcScheduler getMcScheduler();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // worker-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if a worker with the same identity as {@code worker} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    boolean hasWorker(Worker worker);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Deletes the given worker."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void deleteWorker(Worker target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Adds the given worker."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code worker} must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void addWorker(Worker worker);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces the given worker {@code target} with {@code editedWorker}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker identity of {@code editedWorker} must not be the same as another existing worker in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void setWorker(Worker target, Worker editedWorker);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /** Returns the pay earned by a worker as float value */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    float calculateWorkerPay(Worker worker);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /** Returns an unmodifiable view of the full worker list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cWorker\u003e getFullWorkerList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /** Returns an unmodifiable view of the filtered worker list */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    ObservableList\u003cWorker\u003e getFilteredWorkerList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Updates the filter of the filtered worker list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // shift-level operations"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a shift with the same identity as {@code shift} exists in the App."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    boolean hasShift(Shift shift);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Deletes the given shift."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Shift must exist in the App."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void deleteShift(Shift target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds the given shift."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Shift must not already exist in the App."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void addShift(Shift shift);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the given shift {@code target} with {@code editedShift}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must already exist in the App."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * There must be no shift with the same identity as {@code editedShift} that exists in the App."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void setShift(Shift target, Shift editedShift);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Updates the filter of the filtered shift list to filter by the given {@code predicate}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void updateFilteredShiftList(Predicate\u003cShift\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the full shift list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cShift\u003e getFullShiftList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an unmodifiable view of the filtered shift list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    ObservableList\u003cShift\u003e getFilteredShiftList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // assignment-level operations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    boolean hasAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Deletes the given assignment."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment must exist in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void deleteAssignment(Assignment target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code assignment} must not already exist in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void addAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the given assignment {@code target} with {@code editedAssignment}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment in the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void setAssignment(Assignment target, Assignment editedAssignment);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an {@code Optional} containing assignment with same identity as query."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If no assignment matching query found, an empty Optional is returned."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    Optional\u003cAssignment\u003e getAssignment(Assignment toGet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /** Returns an unmodifiable view of the full assignment list */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFullAssignmentList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // role-level operations"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if a role with the same identity as {@code role} exists in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    boolean hasRole(Role role);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Deletes the given role."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role must exist in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void deleteRole(Role target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds the given role."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code role} must not already exist in the address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void addRole(Role role);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the given role {@code target} with {@code editedRole}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role identity of {@code editedRole} must not be the same as another existing role in the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void setRole(Role target, Role editedRole);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered role list */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cRole\u003e getFilteredRoleList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Updates the filter of the filtered role list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void updateFilteredRoleList(Predicate\u003cRole\u003e predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 79,
      "plosslaw": 3,
      "sigmund-c": 29,
      "WangZijun97": 44,
      "-": 62
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static final Integer HOURS_PER_SHIFT \u003d 8;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final McScheduler mcScheduler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final FilteredList\u003cWorker\u003e filteredWorkers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final FilteredList\u003cShift\u003e filteredShifts;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final FilteredList\u003cRole\u003e filteredRoles;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Initializes a ModelManager with the given mcScheduler and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ModelManager(ReadOnlyMcScheduler mcScheduler, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(mcScheduler, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + mcScheduler + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.mcScheduler \u003d new McScheduler(mcScheduler);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        filteredWorkers \u003d new FilteredList\u003c\u003e(this.mcScheduler.getWorkerList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        filteredShifts \u003d new FilteredList\u003c\u003e(this.mcScheduler.getShiftList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        filteredRoles \u003d new FilteredList\u003c\u003e(this.mcScheduler.getRoleList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return userPrefs.getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcSchedulerFilePath(Path mcSchedulerFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(mcSchedulerFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userPrefs.setMcSchedulerFilePath(mcSchedulerFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McScheduler \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcScheduler(ReadOnlyMcScheduler mcScheduler) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.mcScheduler.resetData(mcScheduler);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Worker related methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(worker);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.hasWorker(worker);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void deleteWorker(Worker target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.removeWorker(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void addWorker(Worker worker) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addWorker(worker);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker(Worker target, Worker editedWorker) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedWorker);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.setWorker(target, editedWorker);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public float calculateWorkerPay(Worker worker) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Integer numberOfShiftsAssigned \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ObservableList\u003cAssignment\u003e assignments \u003d getFullAssignmentList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Assignment assignment : assignments) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Worker assignedWorker \u003d assignment.getWorker();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (assignedWorker.equals(worker)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                numberOfShiftsAssigned++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assert numberOfShiftsAssigned \u003e\u003d 0 : \"Invalid number of shifts counted\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return worker.getPay().value * numberOfShiftsAssigned * HOURS_PER_SHIFT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cWorker\u003e getFullWorkerList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.getWorkerList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Shift related methods"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(shift);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.hasShift(shift);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void deleteShift(Shift target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.removeShift(target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addShift(shift);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShift);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.setShift(target, editedShift);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cShift\u003e getFullShiftList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.getShiftList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // Assignment related methods"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.hasAssignment(assignment);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.removeAssignment(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addAssignment(assignment);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Optional\u003cAssignment\u003e getAssignment(Assignment toGet) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.getAssignment(toGet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFullAssignmentList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.getAssignmentList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // Role related methods"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (role instanceof Leave) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.hasRole(role);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void deleteRole(Role target) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.removeRole(target);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void addRole(Role role) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addRole(role);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRole(Role target, Role editedRole) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedRole);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.setRole(target, editedRole);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Role} backed by the internal list of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code versionedMcScheduler}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cRole\u003e getFilteredRoleList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return filteredRoles;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void updateFilteredRoleList(Predicate\u003cRole\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        filteredRoles.setPredicate(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Worker List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Worker} backed by the internal list of"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code versionedMcScheduler}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return filteredWorkers;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        filteredWorkers.setPredicate(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Shift List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return filteredShifts;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        filteredShifts.setPredicate(predicate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler.equals(other.mcScheduler)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 filteredWorkers.equals(other.filteredWorkers)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 filteredShifts.equals(other.filteredShifts);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 65,
      "plosslaw": 15,
      "sigmund-c": 71,
      "WangZijun97": 43,
      "-": 107
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/ReadOnlyMcScheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public interface ReadOnlyMcScheduler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the worker list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * This list will not contain any duplicate workers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    ObservableList\u003cWorker\u003e getWorkerList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the shift list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * This list will not contain any duplicate shifts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    ObservableList\u003cShift\u003e getShiftList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the assignment list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * This list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns an unmodifiable view of the role list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * This list will not contain any duplicate roles."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    ObservableList\u003cRole\u003e getRoleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 17,
      "sigmund-c": 8,
      "WangZijun97": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Path getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Path mcSchedulerFilePath \u003d Paths.get(\"data\" , \"mcscheduler.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        setMcSchedulerFilePath(newUserPrefs.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcSchedulerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcSchedulerFilePath(Path mcSchedulerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(mcSchedulerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.mcSchedulerFilePath \u003d mcSchedulerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 mcSchedulerFilePath.equals(o.mcSchedulerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(guiSettings, mcSchedulerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mcSchedulerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/assignment/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a {@code Worker}, {@code Shift} and {@code Role} Assignment in the App."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Shift shift;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Worker worker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Standard constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Assignment(Shift shift, Worker worker, Role role) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shift, worker, role);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Constructor to create a dummy assignment used by an {@code UnassignCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Assignment(Shift shift, Worker worker) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shift, worker);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.role \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Shift getShift() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return shift;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Worker getWorker() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return worker;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if both assignments have the same identity fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherAssignment.getShift().isSameShift(getShift())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherAssignment.getWorker().isSameWorker(getWorker());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if both assignments have the same identity fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * This defines a stronger notion of equality between two assignments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!(other instanceof Assignment)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Assignment otherAssignment \u003d (Assignment) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return otherAssignment.getShift().equals(getShift())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 otherAssignment.getWorker().equals(getWorker());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Objects.hash(shift, worker, role);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        builder.append(\"Shift: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .append(getShift().toCondensedString())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                .append(\" - Worker: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .append(getWorker().getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (role !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            builder.append(\" (Role: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    .append(getRole().getRole())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    .append(\")\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 98,
      "plosslaw": 4,
      "sigmund-c": 7,
      "WangZijun97": 2
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/assignment/UniqueAssignmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSameAssignment(Assignment)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * adding and updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * the assignment being added or updated is unique in terms of identity in the UniqueAssignmentList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class UniqueAssignmentList implements Iterable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns {@code Optional} containing assignment with same identity as query."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Optional\u003cAssignment\u003e getAssignment(Assignment toGet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .filter(assignment -\u003e assignment.isSameAssignment(toGet))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment in the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!target.isSameAssignment(editedAssignment) \u0026\u0026 contains(editedAssignment)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.set(index, editedAssignment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignments(UniqueAssignmentList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the contents of this list with {@code assignments}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(assignments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!assignmentsAreUnique(assignments)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.setAll(assignments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Iterator\u003cAssignment\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (other instanceof UniqueAssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAssignmentList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 131,
      "sigmund-c": 6,
      "WangZijun97": 13
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/assignment/WorkerRolePair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker being assigned to a Role for a shift in the App."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerRolePair {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Worker-Role Pair must be of the form [ WORKER_INDEX ] [ ROLE ]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"(e.g. \\\u00272 Cashier\\\u0027).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-9][0-9]* \" + Role.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Index workerIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePair(Index workerIndex, Role role) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(workerIndex, role);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndex \u003d workerIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * String version constructor for easy parsing of sample data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePair(String workerRoleInfo) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(workerRoleInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidWorkerRolePair(workerRoleInfo), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int index \u003d workerRoleInfo.indexOf(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndex \u003d ParserUtil.parseIndex(workerRoleInfo.substring(0, index));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.role \u003d Role.createRole(workerRoleInfo.substring(index + 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if a given string is a valid worker-role"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static boolean isValidWorkerRolePair(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Index getWorkerIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workerIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true only if both worker-role are about the same worker and the same role."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                || (other instanceof WorkerRolePair"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 workerIndex.equals(((WorkerRolePair) other).workerIndex)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 role.equals(((WorkerRolePair) other).role));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(workerIndex, role);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        builder.append(\" Assigning Worker index \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getWorkerIndex())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(\" to Role: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getRole());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 89
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Signals that the operation will result in duplicate assignments (Assignments are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 10,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/RoleRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Role Requirement for a shift in the App."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class RoleRequirement {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Role Requirements must be of the form \u0027ROLE QUANTITY_REQUIRED\u0027\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \" (e.g. \\\u0027Cashier 1\\\u0027). \\nQuantity must be greater than zero.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_STRING_CONSTRUCTOR \u003d \"Role Requirements must be of the form \u0027ROLE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"QUANTITY_REQUIRED QUANTITY_FILLED\u0027 (e.g. \\\u0027Cashier 1 0\\\u0027).\\nQuantity required must be positive. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"Quantity filled must be non-negative and at most the quantity required\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d Role.VALIDATION_REGEX + \" [1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALIDATION_REGEX_STRING_CONSTRUCTOR \u003d Role.VALIDATION_REGEX + \" [1-9]\\\\d* \\\\d+$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int quantityRequired;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int quantityFilled;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a role requirement with no workers filling the {@code role} yet."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleRequirement(Role role, int quantityRequired) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(role, quantityRequired);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.quantityRequired \u003d quantityRequired;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        quantityFilled \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a role requirement with the number of workers filling the {@code role}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public RoleRequirement(Role role, int quantityRequired, int quantityFilled) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(role, quantityRequired, quantityFilled);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert quantityFilled \u003c\u003d quantityRequired;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.quantityRequired \u003d quantityRequired;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.quantityFilled \u003d quantityFilled;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * String version constructor for easy parsing of sample and test data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public RoleRequirement(String roleRequirementInfo) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirementInfo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(roleRequirementInfo.matches(VALIDATION_REGEX_STRING_CONSTRUCTOR),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                MESSAGE_CONSTRAINTS_STRING_CONSTRUCTOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int lastSpaceIndex \u003d roleRequirementInfo.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        quantityFilled \u003d Integer.parseInt(roleRequirementInfo.substring(lastSpaceIndex + 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String lastSpaceRemovedString \u003d roleRequirementInfo.substring(0, lastSpaceIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int secondLastSpaceIndex \u003d lastSpaceRemovedString.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        role \u003d Role.createRole(lastSpaceRemovedString.substring(0, secondLastSpaceIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        quantityRequired \u003d Integer.parseInt(lastSpaceRemovedString.substring(secondLastSpaceIndex + 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(quantityFilled \u003c\u003d quantityRequired, MESSAGE_CONSTRAINTS_STRING_CONSTRUCTOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a given string is a valid role requirement"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidRoleRequirement(String test) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the quantity filled has not reached the quantity required."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean isFilled() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return quantityFilled \u003e\u003d quantityRequired;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public int getQuantityRequired() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return quantityRequired;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public int getQuantityFilled() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return quantityFilled;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if both role requirements are about the same role and require the same quantity."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a weaker notion of equality between the two role requirements."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isSameRoleRequirement(RoleRequirement otherRoleRequirement) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (otherRoleRequirement \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherRoleRequirement !\u003d null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 otherRoleRequirement.getRole().equals(getRole())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 otherRoleRequirement.getQuantityRequired() \u003d\u003d getQuantityRequired();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true only if both role requirements are about the same role and of the same quantity required."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a stronger notion of equality between two role requirements."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof RoleRequirement"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 role.equals(((RoleRequirement) other).role)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 quantityRequired \u003d\u003d ((RoleRequirement) other).quantityRequired);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Objects.hash(role, quantityRequired);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        builder.append(\" Role Required: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getRole())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(\" x \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .append(getQuantityRequired());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 53,
      "plosslaw": 2,
      "sigmund-c": 8,
      "WangZijun97": 76
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/Shift.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift in the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Shift {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay shiftDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime shiftTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Set\u003cRoleRequirement\u003e roleRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Standard constructor, start with empty {@code workers}. Every field must be present and not null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Shift(ShiftDay shiftDay, ShiftTime shiftTime, Set\u003cRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shiftDay, shiftTime, roleRequirements);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftDay \u003d shiftDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftTime \u003d shiftTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.roleRequirements.addAll(roleRequirements);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftDay getShiftDay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftDay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftTime getShiftTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an immutable role requirements set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Set\u003cRoleRequirement\u003e getRoleRequirements() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Collections.unmodifiableSet(roleRequirements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns an immutable role set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Set\u003cRole\u003e getRoles() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cRole\u003e roles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.roleRequirements.forEach(roleRequirement -\u003e roles.add(roleRequirement.getRole()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Collections.unmodifiableSet(roles);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the specified {@code role} is required in the shift and has yet to be filled."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean isRoleRequired(Role role) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (role instanceof Leave) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (RoleRequirement requirement : roleRequirements) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (requirement.getRole().equals(role)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return !requirement.isFilled();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Updates the quantity of the specified {@code role} that is filled in the specified {@code shift}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param model storing the shift to be updated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param shiftToUpdate in the model."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param role of the role requirement to be updated."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static void updateRoleRequirements(Model model, Shift shiftToUpdate, Role role) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, shiftToUpdate, role);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int quantityFilled \u003d countRoleQuantityFilled(model, shiftToUpdate, role);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRoleRequirement\u003e updatedRoleRequirements \u003d getUpdatedRoleRequirements(shiftToUpdate, role, quantityFilled);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Shift updatedShift \u003d new Shift(shiftToUpdate.getShiftDay(), shiftToUpdate.getShiftTime(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                updatedRoleRequirements);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.setShift(shiftToUpdate, updatedShift);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Counts the quantity filled of the specified {@code role} in the specified {@code shift}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param model storing the shift to be updated."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param shiftToUpdate in the model."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param role whose quantity filled needs to be calculated."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static int countRoleQuantityFilled(Model model, Shift shiftToUpdate, Role role) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d model.getFullAssignmentList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int quantityFilled \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment assignment : assignmentList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (assignment.getShift().isSameShift(shiftToUpdate) \u0026\u0026 assignment.getRole().equals(role)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                quantityFilled++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return quantityFilled;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static Set\u003cRoleRequirement\u003e getUpdatedRoleRequirements(Shift shiftToUpdate, Role role, int quantityFilled) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Set\u003cRoleRequirement\u003e updatedRoleRequirements \u003d new HashSet\u003c\u003e(shiftToUpdate.getRoleRequirements());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (RoleRequirement requirement : updatedRoleRequirements) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (requirement.getRole().equals(role)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                RoleRequirement updatedRoleRequirement \u003d new RoleRequirement(role, requirement.getQuantityRequired(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                        quantityFilled);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                assert updatedRoleRequirement.getQuantityFilled() \u003c\u003d updatedRoleRequirement.getQuantityRequired();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                updatedRoleRequirements.remove(requirement);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                updatedRoleRequirements.add(updatedRoleRequirement);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return updatedRoleRequirements;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if both shifts have the same identity fields."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a weaker notion of equality between two shifts."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isSameShift(Shift otherShift) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (otherShift \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherShift !\u003d null"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftDay().equals(getShiftDay())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftTime().equals(getShiftTime());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if both shifts have the same identity and data fields."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a stronger notion of equality between two shifts."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof Shift)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift otherShift \u003d (Shift) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherShift.getShiftDay().equals(getShiftDay())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftTime().equals(getShiftTime())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 otherShift.getRoleRequirements().equals(getRoleRequirements());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Objects.hash(shiftDay, shiftTime, roleRequirements);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts the {@code Shift} object to a one-line {@code String}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return One-line string representation of shift object."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toCondensedString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return getShiftDay() + \" \" + getShiftTime();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        builder.append(\" Day: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getShiftDay())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .append(getShiftTime())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .append(\" Role requirements: \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        getRoleRequirements().forEach(builder::append);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 73,
      "tnsyn": 19,
      "sigmund-c": 8,
      "WangZijun97": 95
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/ShiftDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift\u0027s day in the App."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDay(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftDay {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"Shift day should only contain one of the following values: MON, TUE, WED, THUR, FRI, SAT, SUN\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public final ShiftDayValue day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code ShiftDay}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftDay(String day) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d day.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.day \u003d ShiftDayValue.valueOf(day);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftDay(ShiftDayValue value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.day \u003d value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a given string is a valid day."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ShiftDayValue.valueOf(test.toUpperCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns a list of all possible {@code ShiftDay}s."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ArrayList\u003cShiftDay\u003e getAllDays() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cShiftDay\u003e allDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (ShiftDayValue value : ShiftDayValue.values()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            allDays.add(new ShiftDay(value));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return allDays;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return day.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof ShiftDay"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 day.equals(((ShiftDay) other).day));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "tnsyn": 2,
      "sigmund-c": 4,
      "WangZijun97": 69
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/ShiftDayOrTimeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Tests that a {@code Shift}\u0027s {@code ShiftDay} or {@code ShiftTime} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftDayOrTimeContainsKeywordsPredicate implements Predicate\u003cShift\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftDayOrTimeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean test(Shift shift) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(shift.getShiftDay().toString(), keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(shift.getShiftTime().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof ShiftDayOrTimeContainsKeywordsPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 keywords.equals(((ShiftDayOrTimeContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "WangZijun97": 29
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/ShiftDayValue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public enum ShiftDayValue {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    MON,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    TUE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    WED,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    THU,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    FRI,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    SAT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    SUN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "tnsyn": 9,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/ShiftTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift\u0027s time in the App."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            \"Shift time should only contain one of the following values: AM, PM\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public final ShiftTimeValue time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code ShiftTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftTime(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.time \u003d ShiftTimeValue.valueOf(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftTime(ShiftTimeValue value) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true is a given string is a valid time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ShiftTimeValue.valueOf(test.toUpperCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns a list of all possible {@code ShiftTime}s."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ArrayList\u003cShiftTime\u003e getAllTimes() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ArrayList\u003cShiftTime\u003e(Arrays.stream(ShiftTimeValue.values())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(value -\u003e new ShiftTime(value))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return time.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof ShiftTime"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 time.equals(((ShiftTime) other).time));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "tnsyn": 5,
      "sigmund-c": 4,
      "WangZijun97": 65
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/ShiftTimeValue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public enum ShiftTimeValue {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    AM,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    PM"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 5,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/UniqueShiftList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.exceptions.DuplicateShiftException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.exceptions.ShiftNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A list of shifts that enforces uniqueness between its elements."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Supports a minimal set of shift operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * @see Shift#isSameShift(Shift)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class UniqueShiftList implements Iterable\u003cShift\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ObservableList\u003cShift\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ObservableList\u003cShift\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if the list contains an equivalent shift as {@code toCheck}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean contains(Shift toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameShift);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds a shift to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void add(Shift toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the shift {@code target} in the list with {@code editedShift}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift identity of {@code editedShift} must not be the same as any other shift in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShift);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ShiftNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!target.isSameShift(editedShift) \u0026\u0026 contains(editedShift)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.set(index, editedShift);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Removes the equivalent shift from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void remove(Shift toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ShiftNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(UniqueShiftList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(shifts);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!shiftsAreUnique(shifts)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.setAll(shifts);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Iterator\u003cShift\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof UniqueShiftList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueShiftList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private boolean shiftsAreUnique(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (int i \u003d 0; i \u003c shifts.size() - 1; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c shifts.size(); j++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                if (shifts.get(i).isSameShift(shifts.get(j))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "WangZijun97": 117
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/exceptions/DuplicateShiftException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Signals that the operation will result in duplicate Shifts (Shifts are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DuplicateShiftException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DuplicateShiftException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(\"Operation would result in duplicate shifts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "WangZijun97": 11
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/shift/exceptions/ShiftNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Signals that the operation is unable to find the specified shift."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "WangZijun97": 5
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/Leave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Leave extends Role {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String ROLE_NAME \u003d \"Leave\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Leave() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(\"Leave\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static boolean isLeave(Role role) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return role.tagName.equalsIgnoreCase(ROLE_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * In this implementation, a {@code Role} with {@code tagName \u003d\u003d Leave.ROLE_NAME} is equal to {@code Leave}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Future implementations which require a distinction between them should edit the below implementation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || other instanceof Leave"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof Role"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 ((Role) other).tagName.equalsIgnoreCase(ROLE_NAME));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 1,
      "WangZijun97": 21
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/Role.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Worker Role in the App."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable, name is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Role extends Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Role names should be alphanumeric and can contain whitespaces\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    protected Role(@JsonProperty(\"tagName\") String roleName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(roleName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Factory method for creating a {@code Role}. Returns a {@code Leave} if {@code roleName} is {@code \"Leave\"}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Role createRole(String roleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (roleName.equals(Leave.ROLE_NAME)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new Leave();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Role(roleName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof Role"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 tagName.equalsIgnoreCase(((Role) other).tagName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 1,
      "WangZijun97": 32
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric and can contain whitespaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.tagName \u003d tagName.substring(0, 1).toUpperCase() + tagName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 4,
      "WangZijun97": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/UniqueRoleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.exceptions.DuplicateRoleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.exceptions.RoleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * A list of roles that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * An role is considered unique by comparing using {@code Role#equals(Role)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class UniqueRoleList implements Iterable\u003cRole\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cRole\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cRole\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the list contains an equivalent role as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean contains(Role toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Adds a role to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void add(Role toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateRoleException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the role {@code target} in the list with {@code editedRole}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role identity of {@code editedRole} must not be the same as another existing role in the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRole(Role target, Role editedRole) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedRole);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new RoleNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!target.equals(editedRole) \u0026\u0026 contains(editedRole)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateRoleException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.set(index, editedRole);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Removes the equivalent role from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * The role must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void remove(Role toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new RoleNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRoles(UniqueRoleList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Replaces the contents of this list with {@code roles}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * {@code roles} must not contain duplicate roles."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setRoles(List\u003cRole\u003e roles) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(roles);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!rolesAreUnique(roles)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new DuplicateRoleException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        internalList.setAll(roles);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ObservableList\u003cRole\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Iterator\u003cRole\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (other instanceof UniqueRoleList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoleList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if {@code roles} contains only unique roles."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private boolean rolesAreUnique(List\u003cRole\u003e roles) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (int i \u003d 0; i \u003c roles.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c roles.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                if (roles.get(i).equals(roles.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 127,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/exceptions/DuplicateRoleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Signals that the operation will result in duplicate roles."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DuplicateRoleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public DuplicateRoleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"Operation would result in duplicate roles\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/tag/exceptions/RoleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Signals that the operation is unable to find the specified role."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class RoleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 1
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Contains utility methods for populating {@code McScheduler} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_ALEX \u003d new Worker("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Pay(\"10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"cashier\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"MON PM\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_BERNICE \u003d new Worker("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Pay(\"11.2\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"cashier\", \"cleaner\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"TUE AM\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_CHARLOTTE \u003d new Worker("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Pay(\"9.87\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"chef\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"MON AM\", \"TUE PM\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_DAVID \u003d new Worker("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"David Li\"), new Phone(\"91031282\"), new Pay(\"0.99\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"chef\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"FRI AM\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_IRFAN \u003d new Worker("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Pay(\"23\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"cashier\", \"chef\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"SAT AM\", \"SUN AM\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Worker SAMPLE_WORKER_ROY \u003d new Worker("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Pay(\"11.10\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            getRoleSet(\"cleaner\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            getUnavailabilitySet(\"SUN AM\", \"MON AM\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Shift SAMPLE_SHIFT_MON_AM \u003d new Shift("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftDay(\"Mon\"), new ShiftTime(\"AM\"), getRoleRequirementSet(\"Cashier 2 1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Shift SAMPLE_SHIFT_TUE_PM \u003d new Shift("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new ShiftDay(\"Tue\"), new ShiftTime(\"PM\"), getRoleRequirementSet(\"Cleaner 2 2\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Role SAMPLE_ROLE_CASHIER \u003d Role.createRole(\"cashier\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Role SAMPLE_ROLE_CHEF \u003d Role.createRole(\"chef\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Role SAMPLE_ROLE_CLEANER \u003d Role.createRole(\"cleaner\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Assignment SAMPLE_ASSIGNMENT_1 \u003d new Assignment("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_SHIFT_MON_AM, SAMPLE_WORKER_ALEX, SAMPLE_ROLE_CASHIER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Assignment SAMPLE_ASSIGNMENT_2 \u003d new Assignment("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_SHIFT_TUE_PM, SAMPLE_WORKER_BERNICE, SAMPLE_ROLE_CLEANER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Assignment SAMPLE_ASSIGNMENT_3 \u003d new Assignment("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_SHIFT_TUE_PM, SAMPLE_WORKER_ROY, SAMPLE_ROLE_CLEANER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Worker[] getSampleWorkers() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Worker[] {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_WORKER_ALEX, SAMPLE_WORKER_BERNICE, SAMPLE_WORKER_CHARLOTTE, SAMPLE_WORKER_DAVID,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_WORKER_IRFAN, SAMPLE_WORKER_ROY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Shift[] getSampleShifts() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Shift[] {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_SHIFT_MON_AM, SAMPLE_SHIFT_TUE_PM"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Role[] getSampleRoles() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Role[] {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_ROLE_CASHIER, SAMPLE_ROLE_CHEF, SAMPLE_ROLE_CLEANER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Assignment[] getSampleAssignments() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            SAMPLE_ASSIGNMENT_1, SAMPLE_ASSIGNMENT_2, SAMPLE_ASSIGNMENT_3"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static ReadOnlyMcScheduler getSampleMcScheduler() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler sampleAb \u003d new McScheduler();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Worker sampleWorker : getSampleWorkers()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            sampleAb.addWorker(sampleWorker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (Shift sampleShift : getSampleShifts()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            sampleAb.addShift(sampleShift);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Role sampleRole : getSampleRoles()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            sampleAb.addRole(sampleRole);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            sampleAb.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns a role set containing the list of strings given."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static Set\u003cRole\u003e getRoleSet(String... strings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(Role::createRole)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static Set\u003cUnavailability\u003e getUnavailabilitySet(String... strings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .map(Unavailability::new)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns a role requirement set containing the list of strings given."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Set\u003cRoleRequirement\u003e getRoleRequirementSet(String... string) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Arrays.stream(string)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(RoleRequirement::new)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 58,
      "tnsyn": 18,
      "sigmund-c": 22,
      "WangZijun97": 15,
      "-": 28
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Tests that a {@code Worker}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cWorker\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean test(Worker worker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(worker.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Pay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Pay {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            \"Hourly pay should contain numbers with a maximum of 2 decimal places.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]+(\\\\.[0-9]{1,2})?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public final float value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Constructs a {@code Pay}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param amount A valid hourly pay amount."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Pay(String amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidPay(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        value \u003d Float.valueOf(amount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static boolean isValidPay(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                || (other instanceof Pay // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Pay) other).value); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 51
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Unavailability.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDayValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTimeValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Represents a Worker\u0027s unavailability in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUnavailability(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class Unavailability {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            \"Unavailability must contain one of the days: MON, TUE, WED, THU, FRI, SAT, SUN and \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                    + \"one of the times: AM, PM, FULL\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final ShiftDay day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final ShiftTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final String unavailability;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Constructs an {@code Unavailability}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @param unavailability A valid unavailability."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Unavailability(String unavailability) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        requireNonNull(unavailability);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AppUtil.checkArgument(isValidUnavailability(unavailability), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.day \u003d new ShiftDay(unavailability.split(\" \")[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.time \u003d new ShiftTime(unavailability.split(\" \")[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.unavailability \u003d unavailability;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns true if a given string is a valid unavailability."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static boolean isValidUnavailability(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String[] splitString \u003d test.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            ShiftDayValue.valueOf(splitString[0].toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            ShiftTimeValue.valueOf(splitString[1].toUpperCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public ShiftDay getDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public ShiftTime getTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return unavailability;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Objects.hash(day, time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (!(other instanceof Unavailability)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Unavailability u \u003d (Unavailability) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return u.getDay().toString().equals(day.toString())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                \u0026\u0026 u.getTime().toString().equals(time.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return \"[\" + day + \" \" + time + \"]\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 87,
      "sigmund-c": 7
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/UniqueWorkerList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.exceptions.DuplicateWorkerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.exceptions.WorkerNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A list of workers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A worker is considered unique by comparing using {@code Worker#isSameWorker(Worker)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * workers uses Worker#isSameWorker(Worker) for equality so as to ensure that the worker being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * unique in terms of identity in the UniqueWorkerList. However, the removal of a worker uses Worker#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * as to ensure that the worker with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * @see Worker#isSameWorker(Worker)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class UniqueWorkerList implements Iterable\u003cWorker\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final ObservableList\u003cWorker\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final ObservableList\u003cWorker\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if the list contains an equivalent worker as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean contains(Worker toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameWorker);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Adds a worker to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add(Worker toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new DuplicateWorkerException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces the worker {@code target} in the list with {@code editedWorker}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker identity of {@code editedWorker} must not be the same as another existing worker in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker(Worker target, Worker editedWorker) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedWorker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new WorkerNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!target.isSameWorker(editedWorker) \u0026\u0026 contains(editedWorker)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new DuplicateWorkerException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        internalList.set(index, editedWorker);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Removes the equivalent worker from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * The worker must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove(Worker toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new WorkerNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers(UniqueWorkerList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Replaces the contents of this list with {@code workers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * {@code workers} must not contain duplicate workers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers(List\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(workers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!workersAreUnique(workers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new DuplicateWorkerException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        internalList.setAll(workers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ObservableList\u003cWorker\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Iterator\u003cWorker\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                || (other instanceof UniqueWorkerList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueWorkerList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if {@code workers} contains only unique workers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private boolean workersAreUnique(List\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (int i \u003d 0; i \u003c workers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            for (int j \u003d i + 1; j \u003c workers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                if (workers.get(i).isSameWorker(workers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 137
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/Worker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Worker in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Worker {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Pay pay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Set\u003cRole\u003e roles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final Set\u003cUnavailability\u003e unavailableTimings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Standard constructor, start with empty {@code shifts}. Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Worker(Name name, Phone phone, Pay pay, Address address, Set\u003cRole\u003e roles,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                  Set\u003cUnavailability\u003e unavailableTimings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, pay, address, roles, unavailableTimings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.pay \u003d pay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.roles.addAll(roles);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.unavailableTimings.addAll(unavailableTimings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Pay getPay() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return pay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns an immutable role set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Set\u003cRole\u003e getRoles() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Collections.unmodifiableSet(roles);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns an immutable availability set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Set\u003cUnavailability\u003e getUnavailableTimings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return Collections.unmodifiableSet(unavailableTimings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the worker\u0027s role set contains the specified role."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean isFitForRole(Role role) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (role instanceof Leave) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return roles.contains(role);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Returns true if the worker is unavailable for the specified shift."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public boolean isUnavailable(Shift shiftToAssign) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cUnavailability\u003e workerUnavailableTimings \u003d getUnavailableTimings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (Unavailability unavailability : workerUnavailableTimings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            boolean hasSameDay \u003d unavailability.getDay().equals(shiftToAssign.getShiftDay());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            boolean hasSameTime \u003d unavailability.getTime().equals(shiftToAssign.getShiftTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (hasSameDay \u0026\u0026 hasSameTime) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if both workers of the same name have the same phone number."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isSameWorker(Worker otherWorker) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (otherWorker \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return otherWorker !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns true if both workers have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * This defines a stronger notion of equality between two workers."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof Worker)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker otherWorker \u003d (Worker) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return otherWorker.getName().equals(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getPay().equals(getPay())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 otherWorker.getRoles().equals(getRoles())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 otherWorker.getUnavailableTimings().equals(getUnavailableTimings());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Objects.hash(name, phone, pay, address, roles, unavailableTimings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(\" Hourly pay: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getPay())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .append(\" Roles: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        getRoles().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        builder.append(\" Unavailable Timings: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        getUnavailableTimings().forEach(builder::append);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "tnsyn": 37,
      "sigmund-c": 30,
      "WangZijun97": 3,
      "-": 81
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/exceptions/DuplicateWorkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Signals that the operation will result in duplicate Workers (Workers are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class DuplicateWorkerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public DuplicateWorkerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        super(\"Operation would result in duplicate workers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 11
    }
  },
  {
    "path": "src/main/java/mcscheduler/model/worker/exceptions/WorkerNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Signals that the operation is unable to find the specified worker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Jackson-friendly version of {@link Assignment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final JsonAdaptedShift shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final JsonAdaptedWorker worker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final JsonAdaptedRole role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"shift\") JsonAdaptedShift shift,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"worker\") JsonAdaptedWorker worker, @JsonProperty(\"role\") JsonAdaptedRole role) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        shift \u003d new JsonAdaptedShift(source.getShift());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        worker \u003d new JsonAdaptedWorker(source.getWorker());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        role \u003d new JsonAdaptedRole(source.getRole());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment(shift.toModelType(), worker.toModelType(), role.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 43,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link Role}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class JsonAdaptedRole extends JsonAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedRole} with the given {@code roleName}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRole(String roleName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(roleName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts a given {@code Role} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Note that {@code Role} objects are also {@code Tag} objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public JsonAdaptedRole(Role source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this Jackson-friendly adapted role object into the model\u0027s {@code Role} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Role toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!Role.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException((Role.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Role.createRole(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 2,
      "sigmund-c": 3,
      "WangZijun97": 37
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedRoleRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link RoleRequirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class JsonAdaptedRoleRequirement {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final JsonAdaptedRole role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int quantityRequired;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int quantityFilled;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoleRequirement} with the given details"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRoleRequirement(@JsonProperty(\"role\") JsonAdaptedRole role,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"quantityRequired\") int quantityRequired,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"quantityFilled\") int quantityFilled) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.quantityRequired \u003d quantityRequired;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.quantityFilled \u003d quantityFilled;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts a given {@code RoleRequirement} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRoleRequirement(RoleRequirement source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        role \u003d new JsonAdaptedRole(source.getRole());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        quantityRequired \u003d source.getQuantityRequired();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        quantityFilled \u003d source.getQuantityFilled();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this Jackson-friendly adapted role requirement into the model\u0027s {@code RoleRequirement} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted role requirement."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public RoleRequirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new RoleRequirement(role.toModelType(), quantityRequired, quantityFilled);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "sigmund-c": 3,
      "WangZijun97": 35
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedShift.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link Shift}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class JsonAdaptedShift {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Shift\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final List\u003cJsonAdaptedRoleRequirement\u003e roleRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedShift} with the given shift information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedShift(@JsonProperty(\"day\") String day, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"roleRequirements\") List\u003cJsonAdaptedRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (roleRequirements !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.roleRequirements.addAll(roleRequirements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts a given {@code Shift} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedShift(Shift source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d source.getShiftDay().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d source.getShiftTime().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        roleRequirements.addAll(source.getRoleRequirements().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(JsonAdaptedRoleRequirement::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this shift into the models\u0027 {@code Shift} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Shift toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ShiftDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftDay.isValidDay(day)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException(ShiftDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final ShiftDay modelDay \u003d new ShiftDay(day);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ShiftTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftTime.isValidTime(time)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException((ShiftTime.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final ShiftTime modelTime \u003d new ShiftTime(time);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final List\u003cRoleRequirement\u003e roleRequirementsBuilder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (JsonAdaptedRoleRequirement req : roleRequirements) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            roleRequirementsBuilder.add(req.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final Set\u003cRoleRequirement\u003e modelRoleRequirements \u003d new HashSet\u003c\u003e(roleRequirementsBuilder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Shift(modelDay, modelTime, modelRoleRequirements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 8,
      "sigmund-c": 6,
      "WangZijun97": 72
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "WangZijun97": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedUnavailability.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class JsonAdaptedUnavailability {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final String unavailability;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public JsonAdaptedUnavailability(@JsonProperty(\"unavailability\") String unavailability) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.unavailability \u003d unavailability;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public JsonAdaptedUnavailability(Unavailability source) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.unavailability \u003d source.getString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public Unavailability toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return new Unavailability(unavailability);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 22,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonAdaptedWorker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Jackson-friendly version of {@link Worker}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "class JsonAdaptedWorker {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Worker\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final String pay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final List\u003cJsonAdaptedRole\u003e roles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private final List\u003cJsonAdaptedUnavailability\u003e unavailableTimings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Constructs a {@code JsonAdaptedWorker} with the given worker details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JsonAdaptedWorker(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                             @JsonProperty(\"pay\") String pay, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                             @JsonProperty(\"roles\") List\u003cJsonAdaptedRole\u003e roles,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                             @JsonProperty(\"unavailableTimings\") List\u003cJsonAdaptedUnavailability\u003e unavailableTimings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.pay \u003d pay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (roles !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            this.roles.addAll(roles);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (unavailableTimings !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            this.unavailableTimings.addAll(unavailableTimings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Converts a given {@code Worker} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JsonAdaptedWorker(Worker source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        pay \u003d String.valueOf(source.getPay().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        roles.addAll(source.getRoles().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .map(JsonAdaptedRole::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        unavailableTimings.addAll(source.getUnavailableTimings().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .map(JsonAdaptedUnavailability::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Converts this Jackson-friendly adapted worker object into the model\u0027s {@code Worker} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted worker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Worker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (pay \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Pay.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!Pay.isValidPay(pay)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalValueException(Pay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final Pay modelPay \u003d new Pay(pay);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cRole\u003e rolesBuilder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (JsonAdaptedRole role : roles) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            rolesBuilder.add(role.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final Set\u003cRole\u003e modelRoles \u003d new HashSet\u003c\u003e(rolesBuilder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        List\u003cUnavailability\u003e unavailabilitiesBuilder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        for (JsonAdaptedUnavailability unavailability : unavailableTimings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            unavailabilitiesBuilder.add(unavailability.toModelType());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        final Set\u003cUnavailability\u003e modelUnavailabilities \u003d new HashSet\u003c\u003e(unavailabilitiesBuilder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Worker(modelName, modelPhone, modelPay, modelAddress, modelRoles, modelUnavailabilities);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "tnsyn": 18,
      "sigmund-c": 29,
      "-": 69
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonMcSchedulerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A class to access McScheduler data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class JsonMcSchedulerStorage implements McSchedulerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMcSchedulerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JsonMcSchedulerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return readMcScheduler(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Similar to {@link #readMcScheduler()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Optional\u003cJsonSerializableMcScheduler\u003e jsonMcScheduler \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                filePath, JsonSerializableMcScheduler.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!jsonMcScheduler.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return Optional.of(jsonMcScheduler.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler(ReadOnlyMcScheduler mcScheduler) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        saveMcScheduler(mcScheduler, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Similar to {@link #saveMcScheduler(ReadOnlyMcScheduler)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler(ReadOnlyMcScheduler mcScheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(mcScheduler);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMcScheduler(mcScheduler), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 80
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonSerializableMcScheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * An Immutable McScheduler that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "@JsonRootName(value \u003d \"mcscheduler\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "class JsonSerializableMcScheduler {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKER \u003d \"Workers list contains duplicate worker(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHIFT \u003d \"Shifts list contains duplicate shift(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignments list contains duplicate assignment(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROLE \u003d \"Roles list contains duplicate role(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final List\u003cJsonAdaptedWorker\u003e workers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final List\u003cJsonAdaptedShift\u003e shifts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final List\u003cJsonAdaptedRole\u003e validRoles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Constructs a {@code JsonSerializableMcScheduler} with the given workers, shifts, assignments and valid roles."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JsonSerializableMcScheduler(@JsonProperty(\"workers\") List\u003cJsonAdaptedWorker\u003e workers,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"shifts\") List\u003cJsonAdaptedShift\u003e shifts,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            @JsonProperty(\"validRoles\") List\u003cJsonAdaptedRole\u003e validRoles) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workers.addAll(workers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shifts.addAll(shifts);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.validRoles.addAll(validRoles);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Converts a given {@code ReadOnlyMcScheduler} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMcScheduler}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JsonSerializableMcScheduler(ReadOnlyMcScheduler source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workers.addAll(source.getWorkerList().stream().map(JsonAdaptedWorker::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.addAll(source.getShiftList().stream().map(JsonAdaptedShift::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignments.addAll(source.getAssignmentList().stream().map(JsonAdaptedAssignment::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validRoles.addAll(source.getRoleList().stream().map(JsonAdaptedRole::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Converts this address book into the model\u0027s {@code McScheduler} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McScheduler toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler mcScheduler \u003d new McScheduler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (JsonAdaptedWorker jsonAdaptedWorker : workers) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Worker worker \u003d jsonAdaptedWorker.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (mcScheduler.hasWorker(worker)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            mcScheduler.addWorker(worker);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (JsonAdaptedShift jsonAdaptedShift : shifts) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Shift shift \u003d jsonAdaptedShift.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (mcScheduler.hasShift(shift)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            mcScheduler.addShift(shift);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (mcScheduler.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            mcScheduler.addAssignment(assignment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (JsonAdaptedRole jsonAdaptedRole : validRoles) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Role role \u003d jsonAdaptedRole.toModelType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (mcScheduler.hasRole(role)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            mcScheduler.addRole(role);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 25,
      "sigmund-c": 35,
      "WangZijun97": 10,
      "-": 34
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/McSchedulerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a storage for {@link McScheduler}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public interface McSchedulerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Path getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns McScheduler data as a {@link ReadOnlyMcScheduler}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see #getMcSchedulerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Saves the given {@link ReadOnlyMcScheduler} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param mcScheduler cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void saveMcScheduler(ReadOnlyMcScheduler mcScheduler) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see #saveMcScheduler(ReadOnlyMcScheduler)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void saveMcScheduler(ReadOnlyMcScheduler mcScheduler, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 46
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public interface Storage extends McSchedulerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Path getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    void saveMcScheduler(ReadOnlyMcScheduler mcScheduler) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 32
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Manages storage of McScheduler data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private McSchedulerStorage mcSchedulerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code McSchedulerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StorageManager(McSchedulerStorage mcSchedulerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.mcSchedulerStorage \u003d mcSchedulerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McScheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcSchedulerStorage.getMcSchedulerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return readMcScheduler(mcSchedulerStorage.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcSchedulerStorage.readMcScheduler(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler(ReadOnlyMcScheduler mcScheduler) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        saveMcScheduler(mcScheduler, mcSchedulerStorage.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler(ReadOnlyMcScheduler mcScheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcSchedulerStorage.saveMcScheduler(mcScheduler, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/mcscheduler/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/AssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * An UI component that displays information of an {@code Assignment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/mcscheduler-level4/issues/336\"\u003eThe issue on McScheduler level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    protected Label label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentCode} with the given {@code Assignment} to display."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentCard(Assignment assignment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!(other instanceof AssignmentCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 52,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/AssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    protected ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignmentListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentListView.prefHeightProperty().bind(Bindings.size(assignmentList).multiply(18));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 30,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 75
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-f10-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "WangZijun97": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/JinglePlayer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.media.Media;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.media.MediaPlayer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Stores media and plays them when called."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class JinglePlayer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private MediaPlayer mediaPlayer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates a JinglePlayer from a media file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param filename the path of the media file from resources/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public JinglePlayer(String filename) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Media media \u003d new Media(getClass().getResource(filename).toExternalForm());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mediaPlayer \u003d new MediaPlayer(media);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void play() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mediaPlayer.play();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 24
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private WorkerListPanel workerListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftListPanel shiftListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private StackPane workerListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private StackPane shiftListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        workerListPanel \u003d new WorkerListPanel(logic.getFilteredWorkerList(), logic.getFullAssignmentList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerListPanelPlaceholder.getChildren().add(workerListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        shiftListPanel \u003d new ShiftListPanel(logic.getFilteredShiftList(), logic.getFullAssignmentList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListPanelPlaceholder.getChildren().add(shiftListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerListPanel getWorkerListPanel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return workerListPanel;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftListPanel getShiftListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 2,
      "sigmund-c": 14,
      "WangZijun97": 6,
      "-": 185
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/ShiftAssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ShiftAssignmentCard extends AssignmentCard {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentCode} with the given {@code Assignment} to display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ShiftAssignmentCard(Assignment assignment) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(assignment);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        label.setText(assignment.getWorker().getName() + \" [\" + assignment.getRole() + \"]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13,
      "sigmund-c": 2
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/ShiftAssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ShiftAssignmentListPanel extends AssignmentListPanel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentListPanel} with the given {@code ObservableList} and {@code Shift}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ShiftAssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList, Shift shift) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(assignmentList.filtered(assignment -\u003e assignment.getShift().isSameShift(shift)));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new ShiftAssignmentListViewCell());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Assignment} using an {@code AssignmentCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    class ShiftAssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(new ShiftAssignmentCard(assignment).getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 31,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/ShiftCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * An UI component that displays information of a {@code Shift}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static final String FXML \u003d \"ShiftListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public final Shift shift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Label dayTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private FlowPane roleRequirements;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private FlowPane shiftAssignments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private FlowPane leaveShiftAssignments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a {@code ShiftCard} with the given {@code Shift} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ShiftCard(Shift shift, int displayedIndex, ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dayTime.setText(shift.getShiftDay().toString() + \" \" + shift.getShiftTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shift.getRoleRequirements().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .sorted(Comparator.comparing(roleRequirement -\u003e roleRequirement.getRole().getRole()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .forEach(roleRequirement -\u003e roleRequirements.getChildren().add(new Label(roleRequirement.toString())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftAssignmentListPanel assignmentListPanel \u003d new ShiftAssignmentListPanel("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                assignmentList.filtered(assignment -\u003e !(new Leave().equals(assignment.getRole()))), shift);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        shiftAssignments.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftAssignmentListPanel leaveAssignmentListPanel \u003d new ShiftAssignmentListPanel("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                assignmentList.filtered(assignment -\u003e new Leave().equals(assignment.getRole())), shift);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        leaveShiftAssignments.getChildren().add(leaveAssignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof ShiftCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftCard card \u003d (ShiftCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 shift.equals(card.shift);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 6,
      "sigmund-c": 4,
      "WangZijun97": 63
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/ShiftListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static final String FXML \u003d \"ShiftListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShiftListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e assignmentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ListView\u003cShift\u003e shiftListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a {@code ShiftListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public ShiftListPanel(ObservableList\u003cShift\u003e shiftList, ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListView.setItems(shiftList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListView.setCellFactory(shiftView -\u003e new ShiftListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.assignmentList \u003d assignmentList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Shift} using a {@code ShiftCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    class ShiftListViewCell extends ListCell\u003cShift\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        protected void updateItem(Shift shift, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super.updateItem(shift, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (empty || shift \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(new ShiftCard(shift, getIndex() + 1, assignmentList).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wakululuu": 4,
      "sigmund-c": 4,
      "WangZijun97": 41
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/mclogo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String JINGLE \u003d \"/sounds/mcjingle.mp3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logger.info(\"Playing Jingle...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JinglePlayer jinglePlayer \u003d new JinglePlayer(JINGLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        jinglePlayer.play();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 11,
      "-": 83
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/WorkerAssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class WorkerAssignmentCard extends AssignmentCard {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentCode} with the given {@code Assignment} to display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public WorkerAssignmentCard(Assignment assignment) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(assignment);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        label.setText(assignment.getShift().toCondensedString() + \" [\" + assignment.getRole() + \"]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13,
      "sigmund-c": 2
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/WorkerAssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class WorkerAssignmentListPanel extends AssignmentListPanel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentListPanel} with the given {@code ObservableList} and {@code Worker}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public WorkerAssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList, Worker worker) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(assignmentList.filtered(assignment -\u003e assignment.getWorker().isSameWorker(worker)));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new WorkerAssignmentListViewCell());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Assignment} using an {@code AssignmentCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    class WorkerAssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(new WorkerAssignmentCard(assignment).getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 32,
      "sigmund-c": 3
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/WorkerCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * An UI component that displays information of a {@code Worker}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String FXML \u003d \"WorkerListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/mcscheduler-level4/issues/336\"\u003eThe issue on McScheduler level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public final Worker worker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Label pay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private FlowPane roles;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private FlowPane workerAssignments;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private FlowPane leaveWorkerAssignments;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private FlowPane unavailableTimings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates a {@code WorkerCode} with the given {@code Worker} and index to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public WorkerCard(Worker worker, int displayedIndex, ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        name.setText(worker.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        phone.setText(worker.getPhone().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        address.setText(worker.getAddress().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        pay.setText(worker.getPay().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //email.setText(worker.getEmail().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        worker.getRoles().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .sorted(Comparator.comparing(role -\u003e role.tagName))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .forEach(role -\u003e roles.getChildren().add(new Label(role.tagName)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        WorkerAssignmentListPanel assignmentListPanel \u003d new WorkerAssignmentListPanel("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                assignmentList.filtered(assignment -\u003e !(new Leave().equals(assignment.getRole()))), worker);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        workerAssignments.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        WorkerAssignmentListPanel leaveAssignmentListPanel \u003d new WorkerAssignmentListPanel("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                assignmentList.filtered(assignment -\u003e new Leave().equals(assignment.getRole())), worker);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        leaveWorkerAssignments.getChildren().add(leaveAssignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        worker.getUnavailableTimings()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .forEach(unavailability -\u003e unavailableTimings.getChildren().add(new Label("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                        unavailability.getDay() + \" \" + unavailability.getTime())));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof WorkerCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerCard card \u003d (WorkerCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 worker.equals(card.worker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 8,
      "tnsyn": 7,
      "sigmund-c": 21,
      "WangZijun97": 8,
      "-": 55
    }
  },
  {
    "path": "src/main/java/mcscheduler/ui/WorkerListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Panel containing the list of workers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String FXML \u003d \"WorkerListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WorkerListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e assignmentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ListView\u003cWorker\u003e workerListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates a {@code WorkerListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public WorkerListPanel(ObservableList\u003cWorker\u003e workerList, ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerListView.setItems(workerList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerListView.setCellFactory(listView -\u003e new WorkerListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.assignmentList \u003d assignmentList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Worker} using a {@code WorkerCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    class WorkerListViewCell extends ListCell\u003cWorker\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        protected void updateItem(Worker worker, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            super.updateItem(worker, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (empty || worker \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(new WorkerCard(worker, getIndex() + 1, assignmentList).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    class ShiftListViewCell extends ListCell\u003cShift\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        protected void updateItem(Shift shift, boolean empty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super.updateItem(shift, empty);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (empty || shift \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                setGraphic(new ShiftCard(shift, getIndex() + 1, assignmentList).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 18,
      "WangZijun97": 13,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"10\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \u003cLabel fx:id\u003d\"label\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$assignment\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 21
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#filterField, #workerListPanel, #workerWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#roles {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "#roles .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#shiftAssignments,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#workerAssignments,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#unavailableTimings,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#leaveShiftAssignments{"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#shiftAssignments .label,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#workerAssignments .label,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#unavailableTiming .label,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#leaveShiftAssignments .label,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#leaveWorkerAssignments .label {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#unavailableTimings .label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    -fx-background-color: #d92c0d;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#shiftAssignments .label,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#workerAssignments .label {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#leaveShiftAssignments .label,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#leaveWorkerAssignments .label {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    -fx-background-color: darkmagenta;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 14,
      "tnsyn": 2,
      "sigmund-c": 1,
      "WangZijun97": 20,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background: #dddddd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         title\u003d\"McScheduler\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    \u003cImage url\u003d\"@/images/mclogo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cURL value\u003d\"@McTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "          \u003cVBox fx:id\u003d\"workerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            \u003cStackPane fx:id\u003d\"workerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "          \u003cVBox fx:id\u003d\"shiftList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"shiftListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 10,
      "WangZijun97": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/resources/view/McTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    background-color: #ffd203; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #aaaaaa;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".label-white {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-base: #e2e2e2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-control-inner-background: #e2e2e2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #ffd203;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #ffbe19;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #FDD979;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: #da291c;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        -fx-text-fill: black;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     -fx-border-color: derive(#e2e2e2, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #c5c5c5;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  -fx-text-fill: #e2e2e2;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent #ffd203 transparent #ffd203;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-color: #ffffff #ffffff #383838 #ffffff;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#filterField, #workerListPanel, #workerWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: transparent, #dddddd, transparent, #dddddd;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#roles {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#roles .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #da291c;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#shiftAssignments,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#workerAssignments,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#unavailableTimings,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#leaveShiftAssignments{"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#shiftAssignments .label,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#workerAssignments .label,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#unavailableTiming .label,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#leaveShiftAssignments .label,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#leaveWorkerAssignments .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#unavailableTimings .label {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#shiftAssignments .label,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#workerAssignments .label {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #da291c;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#leaveShiftAssignments .label,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "#leaveWorkerAssignments .label {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 394
    }
  },
  {
    "path": "src/main/resources/view/ShiftListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cLabel fx:id\u003d\"dayTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"roleRequirements\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"shiftAssignments\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"leaveShiftAssignments\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "WangZijun97": 33
    }
  },
  {
    "path": "src/main/resources/view/ShiftListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cListView fx:id\u003d\"shiftListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/WorkerListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"roles\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003cLabel fx:id\u003d\"pay\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$pay\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"workerAssignments\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"leaveWorkerAssignments\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"unavailableTimings\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "tnsyn": 2,
      "sigmund-c": 9,
      "WangZijun97": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/WorkerListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \u003cListView fx:id\u003d\"workerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonMcSchedulerStorageTest/invalidAndValidWorkerMcScheduler.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"name\": \"Valid Worker\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"199.10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"name\": \"Worker With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"199.10\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"shifts\": [],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"assignments\": [],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"validRoles\": []"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 10,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonMcSchedulerStorageTest/invalidWorkerMcScheduler.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"name\": \"Worker with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"199.10\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"shifts\": [],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"assignments\": [],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"validRoles\": []"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 6,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcSchedulerTest/duplicateWorkerMcScheduler.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"15.5\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"15.5\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"shifts\": [],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"assignments\": [],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"validRoles\": []"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 11,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcSchedulerTest/invalidWorkerMcScheduler.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"1337.101\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"shifts\": [],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"assignments\": [],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"validRoles\": []"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "sigmund-c": 5,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcSchedulerTest/typicalWorkersMcScheduler.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"_comment\": \"McScheduler save file which contains the same Worker values as in McSchedulerBuilder#getTypicalMcScheduler()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"workers\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"9.75\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"cashier\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"unavailableTimings\": ["
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"unavailability\": \"TUE AM\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"10.20\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"cashier\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"unavailableTimings\": ["
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"unavailability\": \"MON AM\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"15.01\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"wall street\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"cashier\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \"unavailableTimings\": []"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"16\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"10th street\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \"unavailableTimings\": []"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"5.99\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"michegan ave\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \"unavailableTimings\": []"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"21.86\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"little tokyo\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \"unavailableTimings\": []"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"pay\": \"24\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roles\": ["
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \"chef\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "      \"unavailableTimings\": []"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"shifts\": ["
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \"day\": \"MON\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \"time\": \"AM\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roleRequirements\": ["
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \"role\": \"cashier\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityRequired\": 1,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityFilled\": 1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "      \"day\": \"FRI\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \"time\": \"PM\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roleRequirements\": ["
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \"role\": \"cashier\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "          \"quantityRequired\": 2,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityFilled\": 0"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        },"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \"role\": \"chef\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityRequired\": 3,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityFilled\": 1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    },"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \"day\": \"TUE\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \"time\": \"AM\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \"roleRequirements\": ["
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \"role\": \"cleaner\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityRequired\": 4,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityFilled\": 0"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        },"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \"role\": \"cashier\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityRequired\": 3,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "          \"quantityFilled\": 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "  \"assignments\": [],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"validRoles\": ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    \"cashier\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    \"chef\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    \"janitor\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 17,
      "plosslaw": 1,
      "sigmund-c": 84,
      "WangZijun97": 10,
      "-": 23
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"mcSchedulerFilePath\": \"mcscheduler.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  \"mcSchedulerFilePath\": \"mcscheduler.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/mcscheduler/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 1,
      "sigmund-c": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 133
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final Index fifthWorkerIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(Index.fromOneBased(5), fifthWorkerIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(Index.fromZeroBased(4), fifthWorkerIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(fifthWorkerIndex, fifthWorkerIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(fifthWorkerIndex, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(fifthWorkerIndex, 5.0f);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(Index.fromOneBased(1), fifthWorkerIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7,
      "sigmund-c": 5,
      "-": 48
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/mclogo.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 104
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/mcscheduler/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "-": 137
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.JsonMcSchedulerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonMcSchedulerStorage mcSchedulerStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonMcSchedulerStorage(temporaryFolder.resolve(\"mcScheduler.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcSchedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String deleteCommand \u003d \"worker-delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String listCommand \u003d WorkerListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(listCommand, WorkerListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Setup LogicManager with JsonMcSchedulerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonMcSchedulerStorage mcSchedulerStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonMcSchedulerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMcScheduler.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcSchedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        model.addRole(Role.createRole(VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String addCommand \u003d WorkerAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + PAY_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            + ADDRESS_DESC_AMY + ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(AMY).withUnavailableTimings().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        expectedModel.addRole(Role.createRole(VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addWorker(expectedWorker);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void getFilteredWorkerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredWorkerList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static class JsonMcSchedulerIoExceptionThrowingStub extends JsonMcSchedulerStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private JsonMcSchedulerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void saveMcScheduler(ReadOnlyMcScheduler mcScheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 2,
      "tnsyn": 6,
      "sigmund-c": 47,
      "-": 119
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/AssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullShiftIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AssignCommand(null, validWorkerRole));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_assignmentAcceptedByModel_assignSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand validAssignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult \u003d validAssignCommand.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftToAssign \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToAssign \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().withShift(shiftToAssign)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withWorker(workerToAssign)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRole(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(String.format(AssignCommand.MESSAGE_ASSIGN_SUCCESS, 1, validAssignment + \"\\n\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Arrays.asList(validAssignment), model.getFullAssignmentList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidShiftIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(outOfBoundIndex, validWorkerRole);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidWorkerIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e invalidWorkerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        invalidWorkerIndex.add(new WorkerRolePair(outOfBoundIndex, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, invalidWorkerIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandFailure(assignCommand, model,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX, outOfBoundIndex.getOneBased()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assignCommand.execute(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignmentName \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new Assignment(model.getFilteredShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Role.createRole(VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(AssignCommand.MESSAGE_DUPLICATE_ASSIGNMENT, assignmentName), () -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                assignCommand.execute(model));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_workerNotFitForRole_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e notFitWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        notFitWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_THIRD_SHIFT, notFitWorkerRole);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String workerName \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased()).getName().toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_ASSIGNMENT_WORKER_ROLE, workerName, VALID_ROLE_CHEF), () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                assignCommand.execute(model));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_workerUnavailable_throwsCommandException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_THIRD_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String workerName \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased()).getName().toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String shiftName \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_THIRD_SHIFT.getZeroBased()).toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_ASSIGNMENT_UNAVAILABLE, workerName, shiftName), () -\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                assignCommand.execute(model));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand1 \u003d new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand2 \u003d new AssignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(assignCommand1, assignCommand1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand assignCommand1Copy \u003d new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(assignCommand1, assignCommand1Copy);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(assignCommand1, 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(assignCommand1, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(assignCommand1, assignCommand2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 162
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/CancelLeaveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class CancelLeaveCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CancelLeaveCommand(null, validIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CancelLeaveCommand(null, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_leaveInModel_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignment \u003d new Assignment(TypicalShifts.SHIFT_A, TypicalWorkers.BENSON, new Leave());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(assignment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(model.hasAssignment(assignment));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult result \u003d new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex).execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(String.format(CancelLeaveCommand.MESSAGE_CANCEL_LEAVE_SUCCESS_PREFIX"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + UnassignCommand.MESSAGE_UNASSIGN_SUCCESS, validIndex.size(), assignment) + \"\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            result.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(model.hasAssignment(assignment));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_leaveNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex).execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex).execute(model));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_assignmentInModelNotLeave_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(new Assignment(TypicalShifts.SHIFT_A, TypicalWorkers.BENSON, Role.createRole(\"Cashier\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex).execute(model));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndexTwo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndexTwo.add(TypicalIndexes.INDEX_SECOND_WORKER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CancelLeaveCommand firstIndexes \u003d new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CancelLeaveCommand secondIndexes \u003d new CancelLeaveCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validIndexTwo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CancelLeaveCommand firstShiftSecondWorker \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndexTwo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(firstIndexes.equals(firstIndexes)); // same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            firstIndexes.equals(new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex))); // same values"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(firstIndexes.equals(123)); // different type"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(firstIndexes.equals(null)); // null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(firstIndexes.equals(secondIndexes)); // different values"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(firstIndexes.equals(firstShiftSecondWorker)); // different worker"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(secondIndexes.equals(firstShiftSecondWorker)); // different shift"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 108
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_emptyMcScheduler_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_nonEmptyMcScheduler_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.setMcScheduler(new McScheduler());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 32
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\"), commandResult);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", false, false), commandResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(commandResult, commandResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(commandResult, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(commandResult, 0.5f);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new CommandResult(\"different\"), commandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new CommandResult(\"feedback\", true, false), commandResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new CommandResult(\"feedback\", false, true), commandResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 8,
      "sigmund-c": 1,
      "-": 43
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_NEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_OLD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_NEW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_WORKER_OLD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDayOrTimeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditShiftDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_PAY_AMY \u003d \"13.50\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_PAY_BOB \u003d \"17\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALID_ROLE_CASHIER \u003d \"Cashier\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALID_ROLE_CHEF \u003d \"Chef\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALID_ROLE_JANITOR \u003d \"Janitor\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String VALID_UNAVAILABILITY \u003d \"MON AM\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String INVALID_ROLE \u003d \"cashier*\"; // \u0027*\u0027 not allowed in roles"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String PAY_DESC_AMY \u003d \" \" + PREFIX_PAY + VALID_PAY_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String PAY_DESC_BOB \u003d \" \" + PREFIX_PAY + VALID_PAY_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String ROLE_DESC_CASHIER \u003d \" \" + PREFIX_ROLE + VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String ROLE_DESC_CHEF \u003d \" \" + PREFIX_ROLE + VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String UNAVAILABILITY \u003d \" \" + PREFIX_UNAVAILABILITY + VALID_UNAVAILABILITY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String INVALID_PAY_DESC \u003d \" \" + PREFIX_PAY + \"12.101\"; // limit of 2 digits behind decimal"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"cashier*\"; // \u0027*\u0027 not allowed in roles"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String NOT_FOUND_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"random role\"; // role not in model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String NOT_FOUND_ROLE \u003d \"Random role\"; // role not in model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_UNAVAILABILITY \u003d \" \" + PREFIX_UNAVAILABILITY + \"ddw w\"; // not valid day or time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final WorkerEditCommand.EditWorkerDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final WorkerEditCommand.EditWorkerDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final ShiftEditCommand.EditShiftDescriptor DESC_FIRST_SHIFT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final ShiftEditCommand.EditShiftDescriptor DESC_SECOND_SHIFT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALID_DAY_MON \u003d \"MON\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALID_DAY_TUE \u003d \"TUE\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALID_TIME_AM \u003d \"AM\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALID_TIME_PM \u003d \"PM\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALID_ROLE_REQUIREMENT_CASHIER \u003d VALID_ROLE_CASHIER + \" 1 1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String VALID_ROLE_REQUIREMENT_CHEF \u003d VALID_ROLE_CHEF + \" 3 2\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String DAY_DESC_MON \u003d \" \" + PREFIX_SHIFT_DAY + VALID_DAY_MON;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String DAY_DESC_TUE \u003d \" \" + PREFIX_SHIFT_DAY + VALID_DAY_TUE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String TIME_DESC_AM \u003d \" \" + PREFIX_SHIFT_TIME + VALID_TIME_AM;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String TIME_DESC_PM \u003d \" \" + PREFIX_SHIFT_TIME + VALID_TIME_PM;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String INVALID_DAY \u003d \" \" + PREFIX_SHIFT_DAY + \"Mmon\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String INVALID_TIME \u003d \" \" + PREFIX_SHIFT_TIME + \"aam\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_SHIFT_INDEX_1 \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_SHIFT + TypicalIndexes.INDEX_FIRST_SHIFT.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_SHIFT_INDEX_2 \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_SHIFT + TypicalIndexes.INDEX_SECOND_SHIFT.getOneBased();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_WORKER_INDEX_1 \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_WORKER + TypicalIndexes.INDEX_FIRST_WORKER.getOneBased();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_WORKER_INDEX_2 \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_WORKER + TypicalIndexes.INDEX_SECOND_WORKER.getOneBased();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_NEW_SHIFT_INDEX \u003d \" \" + PREFIX_SHIFT_NEW + \"a\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_NEW_WORKER_INDEX \u003d \" \" + PREFIX_WORKER_NEW + \"a\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_OLD_SHIFT_INDEX \u003d \" \" + PREFIX_SHIFT_NEW + \"a\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final String INVALID_OLD_WORKER_INDEX \u003d \" \" + PREFIX_WORKER_OLD + \"a\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String INVALID_SHIFT_INDEX \u003d \" \" + PREFIX_SHIFT + \"a\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String INVALID_WORKER_INDEX \u003d \" \" + PREFIX_WORKER + \"a\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_NEW_SHIFT_INDEX_1 \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_SHIFT_NEW + TypicalIndexes.INDEX_FIRST_SHIFT.getOneBased();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_NEW_SHIFT_INDEX_2 \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_SHIFT_NEW + TypicalIndexes.INDEX_SECOND_SHIFT.getOneBased();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_NEW_WORKER_INDEX_1 \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_WORKER_NEW + TypicalIndexes.INDEX_FIRST_WORKER.getOneBased();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_NEW_WORKER_INDEX_2 \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_WORKER_NEW + TypicalIndexes.INDEX_SECOND_WORKER.getOneBased();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_OLD_WORKER_INDEX_1 \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_WORKER_OLD + TypicalIndexes.INDEX_FIRST_WORKER.getOneBased();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALID_OLD_SHIFT_INDEX_1 \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \" \" + PREFIX_SHIFT_OLD + TypicalIndexes.INDEX_FIRST_SHIFT.getOneBased();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        DESC_AMY \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withPay(VALID_PAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            .withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        DESC_BOB \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withPay(VALID_PAY_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            .withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        DESC_FIRST_SHIFT \u003d new EditShiftDescriptorBuilder().withShiftDay(VALID_DAY_MON).withShiftTime(VALID_TIME_AM)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            .withRoleRequirements(VALID_ROLE_REQUIREMENT_CHEF).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        DESC_SECOND_SHIFT \u003d new EditShiftDescriptorBuilder().withShiftDay(VALID_DAY_TUE).withShiftTime(VALID_TIME_PM)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            .withRoleRequirements(VALID_ROLE_REQUIREMENT_CHEF, VALID_ROLE_REQUIREMENT_CASHIER).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * - the address book, filtered worker list and selected worker in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler expectedMcScheduler \u003d new McScheduler(actualModel.getMcScheduler());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredWorkerList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedMcScheduler, actualModel.getMcScheduler());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredWorkerList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the worker at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static void showWorkerAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredWorkerList().size());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker worker \u003d model.getFilteredWorkerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final String[] splitName \u003d worker.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(1, model.getFilteredWorkerList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the shift at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void showShiftAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredShiftList().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift shift \u003d model.getFilteredShiftList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        final String[] shiftDayKeywords \u003d {shift.getShiftDay().toString()};"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        model.updateFilteredShiftList(new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(shiftDayKeywords)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertEquals(1, model.getFilteredShiftList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 11,
      "plosslaw": 21,
      "tnsyn": 14,
      "sigmund-c": 77,
      "WangZijun97": 14,
      "-": 81
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/EditWorkerDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class EditWorkerDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptorWithSameValues \u003d new EditWorkerDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(descriptorWithSameValues, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(CommandTestUtil.DESC_AMY, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(CommandTestUtil.DESC_AMY, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(CommandTestUtil.DESC_AMY, 5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(CommandTestUtil.DESC_BOB, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor editedAmy \u003d new EditWorkerDescriptorBuilder(CommandTestUtil.DESC_AMY).withName("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAmy, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAmy \u003d new EditWorkerDescriptorBuilder(CommandTestUtil.DESC_AMY).withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAmy, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different pay -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditWorkerDescriptorBuilder(CommandTestUtil.DESC_AMY).withPay(CommandTestUtil.VALID_PAY_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAmy, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAmy \u003d new EditWorkerDescriptorBuilder(CommandTestUtil.DESC_AMY).withAddress("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAmy, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different roles -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAmy \u003d new EditWorkerDescriptorBuilder(CommandTestUtil.DESC_AMY).withRoles(CommandTestUtil.VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAmy, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 58
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_WORKERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(findFirstCommandCopy, findFirstCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(findFirstCommand, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(findFirstCommand, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(findSecondCommand, findFirstCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_zeroKeywords_noWorkerFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.updateFilteredWorkerList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredWorkerList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_multipleKeywords_multipleWorkersFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.updateFilteredWorkerList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Arrays.asList(TypicalWorkers.CARL, TypicalWorkers.ELLE, TypicalWorkers.FIONA),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.getFilteredWorkerList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 23,
      "-": 53
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/MassCancelLeaveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class MassCancelLeaveCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay mon \u003d new ShiftDay(CommandTestUtil.VALID_DAY_MON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime am \u003d new ShiftTime(CommandTestUtil.VALID_TIME_AM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay tue \u003d new ShiftDay(CommandTestUtil.VALID_DAY_TUE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime pm \u003d new ShiftTime(CommandTestUtil.VALID_TIME_PM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void initModel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(null, mon, am, mon, am));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, null, am, mon, am));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, null, mon, am));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, null, am));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_correctInputs_successfullyRemoveLeavesOnly() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_C);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_D);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(new Assignment("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalShifts.SHIFT_A, TypicalWorkers.ALICE, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), model.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // 1 leave to remove"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment leave1 \u003d new Assignment(TypicalShifts.SHIFT_C, TypicalWorkers.ALICE, new Leave());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(leave1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage1 \u003d String.format(MassCancelLeaveCommand.MESSAGE_MASS_CANCEL_LEAVE_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new Shift(mon, am, Collections.emptySet()), new Shift(tue, pm, Collections.emptySet()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult1 \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm).execute(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedMessage1, commandResult1.getFeedbackToUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // 2 leaves to remove, flipped dates order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment leave2 \u003d new Assignment(TypicalShifts.SHIFT_D, TypicalWorkers.ALICE, new Leave());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(leave1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(leave2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage2 \u003d String.format(MassCancelLeaveCommand.MESSAGE_MASS_CANCEL_LEAVE_SUCCESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new Shift(tue, am, Collections.emptySet()), new Shift(mon, pm, Collections.emptySet()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult2 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, tue, am, mon, pm).execute(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedMessage2, commandResult2.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, am).execute(model));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_noLeavesInRange_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftMonAm \u003d new Shift(mon, am, Collections.emptySet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, String.format("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            MassCancelLeaveCommand.MESSAGE_NO_LEAVE_FOUND, shiftMonAm, shiftMonAm), () -\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, am).execute(model));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        MassCancelLeaveCommand massCancelLeaveCommand1 \u003d new MassCancelLeaveCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        MassCancelLeaveCommand massCancelLeaveCommand1copy \u003d new MassCancelLeaveCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(massCancelLeaveCommand1, massCancelLeaveCommand1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1, 123);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same/different values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(massCancelLeaveCommand1, massCancelLeaveCommand1copy);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_SECOND_WORKER, mon, am, tue, pm));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, tue, am, tue, pm));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, pm, tue, pm));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, pm));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massCancelLeaveCommand1,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, am));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 134
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/MassTakeLeaveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class MassTakeLeaveCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay mon \u003d new ShiftDay(CommandTestUtil.VALID_DAY_MON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay tue \u003d new ShiftDay(CommandTestUtil.VALID_DAY_TUE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime am \u003d new ShiftTime(CommandTestUtil.VALID_TIME_AM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime pm \u003d new ShiftTime(CommandTestUtil.VALID_TIME_PM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void initModel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(null, mon, am, mon, am));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, null, am, mon, am));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, null, mon, am));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, null, am));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_correctInputs_successWithNoLeaveOnUnavailableDayTime() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, am).execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new McScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addWorker(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftMonPm \u003d new Shift(mon, pm, Collections.emptySet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addShift(shiftMonPm);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftTueAm \u003d new Shift(tue, am, Collections.emptySet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addShift(shiftTueAm);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addAssignment(new Assignment(shiftMonPm, TypicalWorkers.BENSON, new Leave()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addAssignment(new Assignment(shiftTueAm, TypicalWorkers.BENSON, new Leave()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(result.getFeedbackToUser(), String.format(MassTakeLeaveCommand.MESSAGE_MASS_TAKE_LEAVE_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new Shift(mon, am, Collections.emptySet()), shiftTueAm));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, am).execute(model));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_someShiftHasNonLeaveAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignment1 \u003d new Assignment("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalShifts.SHIFT_A, TypicalWorkers.ALICE, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addWorker(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(assignment1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedError1 \u003d String.format(MassTakeLeaveCommand.MESSAGE_DUPLICATE_ASSIGNMENT, assignment1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // 1 assignment present"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedError1, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm).execute(model));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignment2 \u003d new Assignment("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalShifts.SHIFT_C, TypicalWorkers.ALICE, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addShift(TypicalShifts.SHIFT_C);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.addAssignment(assignment2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedError2 \u003d String.format(MassTakeLeaveCommand.MESSAGE_DUPLICATE_ASSIGNMENT, assignment2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // 2 assignments present"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedError1 + expectedError2, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm).execute(model));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        MassTakeLeaveCommand massTakeLeaveCommand1 \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        MassTakeLeaveCommand massTakeLeaveCommand1Copy \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        MassTakeLeaveCommand massTakeLeaveCommand1AnotherCopy \u003d new MassTakeLeaveCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_WORKER, new ShiftDay(\"MON\"), new ShiftTime(\"AM\"), new ShiftDay(\"TUE\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftTime(\"PM\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(massTakeLeaveCommand1, massTakeLeaveCommand1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1, null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1, 123);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same/different values"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(massTakeLeaveCommand1, massTakeLeaveCommand1Copy);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(massTakeLeaveCommand1, massTakeLeaveCommand1AnotherCopy); // not same object this time"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_SECOND_WORKER, mon, am, tue, pm));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, tue, am, tue, pm));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, pm, tue, pm));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, mon, pm));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(massTakeLeaveCommand1,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, am));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 142
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ReassignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ReassignCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullOldWorkerIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(null, TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Role.createRole(CommandTestUtil.VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullNewWorkerIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, null, TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Role.createRole(CommandTestUtil.VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullOldShiftIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER, null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Role.createRole(CommandTestUtil.VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullNewShiftIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT, null,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Role.createRole(CommandTestUtil.VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullRole_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_SECOND_WORKER, TypicalIndexes.INDEX_FIRST_SHIFT, TypicalIndexes.INDEX_SECOND_SHIFT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_reassignmentAcceptedByModel_reassignSuccessful() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand validReassignCommand \u003d new ReassignCommand(TypicalIndexes.INDEX_THIRD_WORKER,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_SECOND_WORKER, TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_SECOND_SHIFT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.createRole(CommandTestUtil.VALID_ROLE_CHEF));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult \u003d validReassignCommand.execute(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift oldShift \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_THIRD_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker oldWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_THIRD_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment oldAssignment \u003d new AssignmentBuilder().withShift(oldShift).withWorker(oldWorker)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRole(CommandTestUtil.VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift newShift \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker newWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_SECOND_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment validReassignment \u003d new AssignmentBuilder().withShift(newShift)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withWorker(newWorker)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRole(CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(String.format(ReassignCommand.MESSAGE_REASSIGN_SUCCESS, validReassignment),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(model.hasAssignment(oldAssignment));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(model.hasAssignment(validReassignment));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.setAssignment(validReassignment, oldAssignment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidWorkerIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand(TypicalIndexes.INDEX_THIRD_WORKER, outOfBoundIndex,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(reassignCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidShiftIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand(TypicalIndexes.INDEX_THIRD_WORKER, outOfBoundIndex,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, outOfBoundIndex, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(reassignCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateAssignmentCreated_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_THIRD_WORKER,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, ReassignCommand.MESSAGE_DUPLICATE_ASSIGNMENT, () -\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            reassignCommand.execute(model));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_workerNotFitForRole_throwsCommandException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_JANITOR));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ASSIGNMENT_WORKER_ROLE, () -\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            reassignCommand.execute(model));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_workerUnavailable_throwsCommandException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ASSIGNMENT_UNAVAILABLE, () -\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            reassignCommand.execute(model));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_assignmentNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcSchedulerWithAssignments(), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand reassignCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_SECOND_WORKER, TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_SHIFT, TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(reassignCommand, model, ReassignCommand.MESSAGE_ASSIGNMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand firstCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand secondCommand \u003d new ReassignCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_FOURTH_WORKER,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(firstCommand, firstCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReassignCommand firstCommandCopy \u003d new ReassignCommand("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_SHIFT, TypicalIndexes.INDEX_THIRD_SHIFT, Role.createRole("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(firstCommand, firstCommandCopy);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(firstCommand, 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(firstCommand, null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(firstCommand, secondCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 190
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ShiftAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftAddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void constructor_nullShift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ShiftAddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_shiftAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommandTest.ModelStubAcceptingShiftAdded modelStub \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            new ShiftAddCommandTest.ModelStubAcceptingShiftAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift validShift \u003d new ShiftBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        CommandResult commandResult \u003d new ShiftAddCommand(validShift).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertEquals(String.format(ShiftAddCommand.MESSAGE_SUCCESS, validShift), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertEquals(Arrays.asList(validShift), modelStub.shiftsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_duplicateShift_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift validShift \u003d new ShiftBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommand shiftAddCommand \u003d new ShiftAddCommand(validShift);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommandTest.ModelStub modelStub \u003d new ShiftAddCommandTest.ModelStubWithShift(validShift);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ShiftAddCommand.MESSAGE_DUPLICATE_SHIFT, () -\u003e shiftAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_roleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift validShift \u003d new ShiftBuilder().withRoleRequirements(CommandTestUtil.VALID_ROLE_CASHIER + \" 1 0\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ShiftAddCommand shiftAddCommand \u003d new ShiftAddCommand(validShift);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubAcceptingShiftAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(Messages.MESSAGE_ROLE_NOT_FOUND, CommandTestUtil.VALID_ROLE_CASHIER), () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    shiftAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift shift1 \u003d new ShiftBuilder().withShiftDay(\"FRI\").withShiftTime(\"AM\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift shift2 \u003d new ShiftBuilder().withShiftDay(\"TUE\").withShiftTime(\"PM\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommand addShift1Command \u003d new ShiftAddCommand(shift1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommand addShift2Command \u003d new ShiftAddCommand(shift2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(addShift1Command, addShift1Command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftAddCommand addShift1CommandCopy \u003d new ShiftAddCommand(shift1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(addShift1CommandCopy, addShift1Command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addShift1Command, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addShift1Command, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different shift -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addShift2Command, addShift1Command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setMcSchedulerFilePath(Path mcSchedulerFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void addWorker(Worker worker) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setMcScheduler(ReadOnlyMcScheduler newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void deleteWorker(Worker target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setWorker(Worker target, Worker editedWorker) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public float calculateWorkerPay(Worker worker) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cWorker\u003e getFullWorkerList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void deleteShift(Shift target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cShift\u003e getFullShiftList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cAssignment\u003e getAssignment(Assignment toGet) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFullAssignmentList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void deleteRole(Role target) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void addRole(Role role) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void setRole(Role target, Role editedRole) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cRole\u003e getFilteredRoleList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void updateFilteredRoleList(Predicate\u003cRole\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * A Model stub that contains a single shift."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private class ModelStubWithShift extends ShiftAddCommandTest.ModelStub {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        private final Shift shift;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ModelStubWithShift(Shift shift) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            requireNonNull(shift);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            this.shift \u003d shift;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            requireNonNull(shift);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return this.shift.isSameShift(shift);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * A Model stub that always accept the shift being added."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private class ModelStubAcceptingShiftAdded extends ShiftAddCommandTest.ModelStub {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        final ArrayList\u003cShift\u003e shiftsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final ArrayList\u003cRole\u003e validRoles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ModelStubAcceptingShiftAdded(Role... role) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            requireNonNull(role);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            validRoles.addAll(Arrays.asList(role));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            requireNonNull(shift);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return shiftsAdded.stream().anyMatch(shift::isSameShift);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            requireNonNull(shift);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            shiftsAdded.add(shift);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            requireNonNull(role);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return validRoles.stream().anyMatch(role::equals);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new McScheduler();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 92,
      "plosslaw": 200,
      "sigmund-c": 32,
      "WangZijun97": 6
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ShiftDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftDeleteCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftToDelete \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_FIRST_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftDeleteCommand shiftDeleteCommand \u003d new ShiftDeleteCommand(TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftDeleteCommand.MESSAGE_DELETE_SHIFT_SUCCESS, shiftToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        expectedModel.deleteShift(shiftToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftDeleteCommand shiftDeleteCommand \u003d new ShiftDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftDeleteCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftToDelete \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_FIRST_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftDeleteCommand shiftDeleteCommand \u003d new ShiftDeleteCommand(TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftDeleteCommand.MESSAGE_DELETE_SHIFT_SUCCESS, shiftToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        expectedModel.deleteShift(shiftToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        showNoShift(expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_SHIFT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getShiftList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftDeleteCommand shiftDeleteCommand \u003d new ShiftDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftDeleteCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftDeleteCommand deleteFirstCommand \u003d new ShiftDeleteCommand(TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftDeleteCommand deleteSecondCommand \u003d new ShiftDeleteCommand(TypicalIndexes.INDEX_SECOND_SHIFT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftDeleteCommand deleteFirstCommandCopy \u003d new ShiftDeleteCommand(TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(deleteFirstCommandCopy, deleteFirstCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different shift -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteSecondCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void showNoShift(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        model.updateFilteredShiftList(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertTrue(model.getFilteredShiftList().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7,
      "plosslaw": 70,
      "sigmund-c": 26
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ShiftEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditShiftDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class ShiftEditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift editedShift \u003d new ShiftBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor descriptor \u003d new EditShiftDescriptorBuilder(editedShift).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT, descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftEditCommand.MESSAGE_EDIT_SHIFT_SUCCESS, editedShift);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        expectedModel.setShift(model.getFilteredShiftList().get(0), editedShift);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Index indexLastShift \u003d Index.fromOneBased(model.getFilteredShiftList().size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Shift lastShift \u003d model.getFilteredShiftList().get(indexLastShift.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftBuilder shiftInList \u003d new ShiftBuilder(lastShift);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d shiftInList.withShiftDay(CommandTestUtil.VALID_DAY_TUE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoleRequirements("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_ROLE_REQUIREMENT_CASHIER, CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor descriptor \u003d new EditShiftDescriptorBuilder().withShiftDay("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_DAY_TUE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoleRequirements("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_ROLE_REQUIREMENT_CASHIER, CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(indexLastShift, descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftEditCommand.MESSAGE_EDIT_SHIFT_SUCCESS, editedShift);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        expectedModel.setShift(lastShift, editedShift);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT, new ShiftEditCommand.EditShiftDescriptor());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_FIRST_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftEditCommand.MESSAGE_EDIT_SHIFT_SUCCESS, editedShift);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftInFilteredList \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_FIRST_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d new ShiftBuilder(shiftInFilteredList).withShiftTime(CommandTestUtil.VALID_TIME_PM).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditShiftDescriptorBuilder().withShiftTime(CommandTestUtil.VALID_TIME_PM).build());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d String.format(ShiftEditCommand.MESSAGE_EDIT_SHIFT_SUCCESS, editedShift);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        expectedModel.setShift(model.getFilteredShiftList().get(0), editedShift);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(shiftEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_duplicateShiftUnfilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift firstShift \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_FIRST_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor descriptor \u003d new EditShiftDescriptorBuilder(firstShift).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(TypicalIndexes.INDEX_SECOND_SHIFT, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftEditCommand, model, ShiftEditCommand.MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_duplicateShiftFilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // edit shift in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftInList \u003d model.getMcScheduler().getShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            new EditShiftDescriptorBuilder(shiftInList).build());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftEditCommand, model, ShiftEditCommand.MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidShiftIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor descriptor \u003d new EditShiftDescriptorBuilder().withShiftDay("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_DAY_MON)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withShiftTime(CommandTestUtil.VALID_TIME_AM).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftEditCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidShiftIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_SHIFT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getShiftList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditShiftDescriptorBuilder().withShiftDay(CommandTestUtil.VALID_DAY_MON).withShiftTime("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_TIME_PM).build());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(shiftEditCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_roleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand shiftEditCommand \u003d new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new EditShiftDescriptorBuilder().withRoleRequirements(\"random role 1 0\").build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(shiftEditCommand, model,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(Messages.MESSAGE_ROLE_NOT_FOUND, \"Random role\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final ShiftEditCommand standardCommand \u003d new ShiftEditCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_SHIFT, CommandTestUtil.DESC_FIRST_SHIFT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        ShiftEditCommand.EditShiftDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftEditCommand.EditShiftDescriptor(CommandTestUtil.DESC_FIRST_SHIFT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ShiftEditCommand commandWithSameValues \u003d new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(commandWithSameValues, standardCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new ClearCommand(), standardCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ShiftEditCommand(TypicalIndexes.INDEX_SECOND_SHIFT, CommandTestUtil.DESC_FIRST_SHIFT),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            standardCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ShiftEditCommand(TypicalIndexes.INDEX_FIRST_SHIFT, CommandTestUtil.DESC_SECOND_SHIFT),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            standardCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 12,
      "plosslaw": 109,
      "sigmund-c": 63
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/ShiftListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ShiftListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandSuccess(new ShiftListCommand(), model, ShiftListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandSuccess(new ShiftListCommand(), model, ShiftListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 35
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/TakeLeaveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Leave;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TakeLeaveCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TakeLeaveCommand(null, validIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TakeLeaveCommand(null, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute_correctIndexes_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e workers \u003d Arrays.asList(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e shifts \u003d Arrays.asList(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ModelStubAcceptingLeaveAdded model \u003d new ModelStubAcceptingLeaveAdded(workers, shifts);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand takeLeaveCommand \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        result \u003d takeLeaveCommand.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignment \u003d new Assignment(TypicalShifts.SHIFT_A, TypicalWorkers.ALICE, new Leave());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(String.format(TakeLeaveCommand.MESSAGE_TAKE_LEAVE_SUCCESS_PREFIX"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + AssignCommand.MESSAGE_ASSIGN_SUCCESS, 1, assignment) + \"\\n\", result.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(Arrays.asList(assignment), model.assignments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute_workerNotAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e workers \u003d Arrays.asList(TypicalWorkers.BENSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e shifts \u003d Arrays.asList(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ModelStubAcceptingLeaveAdded model \u003d new ModelStubAcceptingLeaveAdded(workers, shifts);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand takeLeaveCommand \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e takeLeaveCommand.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute_workerAlreadyHasAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e workers \u003d Arrays.asList(TypicalWorkers.DANIEL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e shifts \u003d Arrays.asList(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ModelStubAlreadyHasAssignment model \u003d new ModelStubAlreadyHasAssignment(workers, shifts);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand takeLeaveCommand \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e takeLeaveCommand.execute(model));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute_invalidWorkerIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cWorker\u003e workers \u003d Arrays.asList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e shifts \u003d Arrays.asList(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ModelStubAcceptingLeaveAdded model \u003d new ModelStubAcceptingLeaveAdded(workers, shifts);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand takeLeaveCommand \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e takeLeaveCommand.execute(model));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute_invalidShiftIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e workers \u003d Arrays.asList(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e shifts \u003d Arrays.asList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ModelStubAcceptingLeaveAdded model \u003d new ModelStubAcceptingLeaveAdded(workers, shifts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex).execute(model));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndexTwo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndexTwo.add(TypicalIndexes.INDEX_SECOND_WORKER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand firstIndexes \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand secondIndexes \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validIndexTwo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        TakeLeaveCommand firstShiftSecondWorker \u003d new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndexTwo);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(firstIndexes.equals(firstIndexes)); // same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            firstIndexes.equals(new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex))); // same values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(firstIndexes.equals(123)); // different type"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(firstIndexes.equals(null)); // null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(firstIndexes.equals(secondIndexes)); // different values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(firstIndexes.equals(firstShiftSecondWorker)); // different worker"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(secondIndexes.equals(firstShiftSecondWorker)); // different shift"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This stub replaces all methods used by {@code TakeLeaveCommand} for adding assignments."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Worker/Shift must still be present in the model."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private class ModelStubAcceptingLeaveAdded extends ModelManager {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private final ArrayList\u003cAssignment\u003e assignments;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public ModelStubAcceptingLeaveAdded(List\u003cWorker\u003e workers, List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            for (Worker worker : workers) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                addWorker(worker);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            for (Shift shift : shifts) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                addShift(shift);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.assignments.add(assignment);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Similarly, this stub replaces all methods regarding assignment, but always returns true for"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code hasAssignment()}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private class ModelStubAlreadyHasAssignment extends ModelStubAcceptingLeaveAdded {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public ModelStubAlreadyHasAssignment(List\u003cWorker\u003e workers, List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super(workers, shifts);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 59,
      "WangZijun97": 116
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/UnassignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class UnassignCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void constructor_nullShiftIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validWorker \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorker.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new UnassignCommand(null, validWorker));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void constructor_nullWorkerIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e nullWorker \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        nullWorker.add(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, nullWorker));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullWorkerIndexSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_unassignmentAcceptedByModel_unassignSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        AssignCommand validAssignCommand \u003d new AssignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, validWorkerRole);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        validAssignCommand.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand validUnassignCommand \u003d new UnassignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, workerIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        CommandResult commandResult \u003d validUnassignCommand.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shiftToUnassign \u003d model.getFilteredShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToUnassign \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // the model has the role of cashier"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().withShift(shiftToUnassign)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withWorker(workerToUnassign).withRole(CommandTestUtil.VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(String.format(UnassignCommand.MESSAGE_UNASSIGN_SUCCESS + \"\\n\", 1, validAssignment),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFullAssignmentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_invalidShiftIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(outOfBoundIndex, workerIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unassignCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_invalidWorkerIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e outOfBoundWorkerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        outOfBoundWorkerIndex.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, outOfBoundWorkerIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unassignCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_assignmentNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand \u003d new UnassignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, workerIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String assignmentName \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new Assignment(model.getFilteredShiftList().get(TypicalIndexes.INDEX_SECOND_SHIFT.getZeroBased()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased()))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unassignCommand, model,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(UnassignCommand.MESSAGE_ASSIGNMENT_NOT_FOUND, assignmentName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand1 \u003d new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand2 \u003d new UnassignCommand(TypicalIndexes.INDEX_SECOND_SHIFT, workerIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(unassignCommand1, unassignCommand1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UnassignCommand unassignCommand1Copy \u003d new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(unassignCommand1, unassignCommand1Copy);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(unassignCommand1, 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(unassignCommand1, null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(unassignCommand1, unassignCommand2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 67,
      "sigmund-c": 76
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code WorkerAddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_newWorker_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.addWorker(validWorker);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertCommandSuccess(new WorkerAddCommand(validWorker), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(WorkerAddCommand.MESSAGE_SUCCESS, validWorker), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateWorker_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerInList \u003d model.getMcScheduler().getWorkerList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(new WorkerAddCommand(workerInList), model, WorkerAddCommand.MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 45
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerAddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WorkerAddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_workerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ModelStubAcceptingWorkerAdded modelStub \u003d new ModelStubAcceptingWorkerAdded("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandResult commandResult \u003d new WorkerAddCommand(validWorker).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(String.format(WorkerAddCommand.MESSAGE_SUCCESS, validWorker), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Arrays.asList(validWorker), modelStub.workersAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateWorker_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAddCommand addCommand \u003d new WorkerAddCommand(validWorker);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithWorker(validWorker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(CommandException.class, WorkerAddCommand.MESSAGE_DUPLICATE_WORKER, ()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_roleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Worker validWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        WorkerAddCommand addCommand \u003d new WorkerAddCommand(validWorker);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubAcceptingWorkerAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(Messages.MESSAGE_ROLE_NOT_FOUND, CommandTestUtil.VALID_ROLE_CASHIER), () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker alice \u003d new WorkerBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker bob \u003d new WorkerBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerAddCommand addAliceCommand \u003d new WorkerAddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerAddCommand addBobCommand \u003d new WorkerAddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerAddCommand addAliceCommandCopy \u003d new WorkerAddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(addAliceCommandCopy, addAliceCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addAliceCommand, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addAliceCommand, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(addBobCommand, addAliceCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public Path getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setMcSchedulerFilePath(Path mcSchedulerFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void addWorker(Worker worker) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setMcScheduler(ReadOnlyMcScheduler newData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void deleteWorker(Worker target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void setWorker(Worker target, Worker editedWorker) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public float calculateWorkerPay(Worker worker) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cWorker\u003e getFullWorkerList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cWorker\u003e getFilteredWorkerList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void updateFilteredWorkerList(Predicate\u003cWorker\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void deleteShift(Shift target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cShift\u003e getFullShiftList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cAssignment\u003e getAssignment(Assignment toGet) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFullAssignmentList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void deleteRole(Role target) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void addRole(Role role) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void setRole(Role target, Role editedRole) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public ObservableList\u003cRole\u003e getFilteredRoleList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public void updateFilteredRoleList(Predicate\u003cRole\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * A Model stub that contains a single worker."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private class ModelStubWithWorker extends ModelStub {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private final Worker worker;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelStubWithWorker(Worker worker) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            requireNonNull(worker);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.worker \u003d worker;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            requireNonNull(worker);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return this.worker.isSameWorker(worker);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * A Model stub that always accept the worker being added."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private class ModelStubAcceptingWorkerAdded extends ModelStub {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final ArrayList\u003cWorker\u003e workersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        final ArrayList\u003cRole\u003e validRoles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ModelStubAcceptingWorkerAdded(Role... role) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            requireNonNull(role);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            validRoles.addAll(Arrays.asList(role));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public boolean hasWorker(Worker worker) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            requireNonNull(worker);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return workersAdded.stream().anyMatch(worker::isSameWorker);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public void addWorker(Worker worker) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            requireNonNull(worker);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            workersAdded.add(worker);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        public boolean hasRole(Role role) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            requireNonNull(role);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return validRoles.stream().anyMatch(role::equals);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ReadOnlyMcScheduler getMcScheduler() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new McScheduler();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 93,
      "plosslaw": 5,
      "tnsyn": 5,
      "sigmund-c": 63,
      "WangZijun97": 36,
      "-": 127
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerAvailableCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Contains integration tests (interaction with the Model)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * and unit tests for WorkerAvailableCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerAvailableCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidShiftIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Role role \u003d Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAvailableCommand workerAvailableCommand \u003d new WorkerAvailableCommand(outOfBoundIndex, role);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(workerAvailableCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidShiftIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showShiftAtIndex(model, TypicalIndexes.INDEX_FIRST_SHIFT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_SHIFT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of McScheduler shift list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getShiftList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAvailableCommand workerAvailableCommand \u003d new WorkerAvailableCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(workerAvailableCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_roleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAvailableCommand workerAvailableCommand \u003d new WorkerAvailableCommand(TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.createRole(CommandTestUtil.NOT_FOUND_ROLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerAvailableCommand, model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(Messages.MESSAGE_ROLE_NOT_FOUND, CommandTestUtil.NOT_FOUND_ROLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Role role \u003d Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Role differentRole \u003d Role.createRole(CommandTestUtil.VALID_ROLE_CHEF);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final WorkerAvailableCommand standardCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerAvailableCommand(TypicalIndexes.INDEX_FIRST_SHIFT, role);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Role roleCopy \u003d Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAvailableCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerAvailableCommand(TypicalIndexes.INDEX_FIRST_SHIFT, roleCopy);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(commandWithSameValues, standardCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ClearCommand(), standardCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(standardCommand, new WorkerAvailableCommand(TypicalIndexes.INDEX_SECOND_SHIFT, role));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different role -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(standardCommand, new WorkerAvailableCommand(TypicalIndexes.INDEX_FIRST_SHIFT, differentRole));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 91
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * {@code WorkerDeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerDeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToDelete \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerDeleteCommand workerDeleteCommand \u003d new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerDeleteCommand.MESSAGE_DELETE_WORKER_SUCCESS, workerToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.deleteWorker(workerToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerDeleteCommand workerDeleteCommand \u003d new WorkerDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(workerDeleteCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerToDelete \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerDeleteCommand workerDeleteCommand \u003d new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerDeleteCommand.MESSAGE_DELETE_WORKER_SUCCESS, workerToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.deleteWorker(workerToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        showNoWorker(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getWorkerList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerDeleteCommand workerDeleteCommand \u003d new WorkerDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(workerDeleteCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerDeleteCommand deleteFirstCommand \u003d new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerDeleteCommand deleteSecondCommand \u003d new WorkerDeleteCommand(TypicalIndexes.INDEX_SECOND_WORKER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerDeleteCommand deleteFirstCommandCopy \u003d new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(deleteFirstCommandCopy, deleteFirstCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(deleteSecondCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private void showNoWorker(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model.updateFilteredWorkerList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(model.getFilteredWorkerList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7,
      "tnsyn": 6,
      "sigmund-c": 38,
      "-": 58
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * and unit tests for WorkerEditCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerEditCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder(editedWorker).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerEditCommand.MESSAGE_EDIT_WORKER_SUCCESS, editedWorker);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.setWorker(model.getFilteredWorkerList().get(0), editedWorker);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index indexLastWorker \u003d Index.fromOneBased(model.getFilteredWorkerList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker lastWorker \u003d model.getFilteredWorkerList().get(indexLastWorker.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerBuilder workerInList \u003d new WorkerBuilder(lastWorker);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d workerInList.withName(CommandTestUtil.VALID_NAME_BOB).withPhone("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoles(CommandTestUtil.VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPhone(CommandTestUtil.VALID_PHONE_BOB).withRoles(CommandTestUtil.VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(indexLastWorker, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerEditCommand.MESSAGE_EDIT_WORKER_SUCCESS, editedWorker);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.setWorker(lastWorker, editedWorker);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, new EditWorkerDescriptor());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerEditCommand.MESSAGE_EDIT_WORKER_SUCCESS, editedWorker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerInFilteredList \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedWorker \u003d new WorkerBuilder(workerInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditWorkerDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(WorkerEditCommand.MESSAGE_EDIT_WORKER_SUCCESS, editedWorker);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McScheduler(model.getMcScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel.setWorker(model.getFilteredWorkerList().get(0), editedWorker);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(workerEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateWorkerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker firstWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder(firstWorker).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(TypicalIndexes.INDEX_SECOND_WORKER, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerEditCommand, model, WorkerEditCommand.MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_duplicateWorkerFilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // edit worker in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker workerInList \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            model.getMcScheduler().getWorkerList().get(TypicalIndexes.INDEX_SECOND_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditWorkerDescriptorBuilder(workerInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerEditCommand, model, WorkerEditCommand.MESSAGE_DUPLICATE_WORKER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidWorkerIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditWorkerDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerEditCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void execute_invalidWorkerIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getWorkerList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand workerEditCommand \u003d new WorkerEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new EditWorkerDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerEditCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute_roleNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand editCommand \u003d new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new EditWorkerDescriptorBuilder().withRoles(\"random role\").build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertCommandFailure(editCommand, model, String.format(Messages.MESSAGE_ROLE_NOT_FOUND, \"Random role\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final WorkerEditCommand standardCommand \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor copyDescriptor \u003d new EditWorkerDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(commandWithSameValues, standardCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new ClearCommand(), standardCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new WorkerEditCommand(TypicalIndexes.INDEX_SECOND_WORKER, CommandTestUtil.DESC_AMY),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            standardCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, CommandTestUtil.DESC_BOB),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            standardCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 12,
      "tnsyn": 9,
      "sigmund-c": 83,
      "-": 81
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for WorkerListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(new WorkerListCommand(), model, WorkerListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertCommandSuccess(new WorkerListCommand(), model, WorkerListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 4,
      "sigmund-c": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/commands/WorkerPayCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * {@code WorkerDeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerPayCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Model model \u003d new ModelManager(McSchedulerBuilder.getTypicalMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker selectedWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerPayCommand workerPayCommand \u003d new WorkerPayCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        float calculatedPay \u003d model.calculateWorkerPay(selectedWorker);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String.format(WorkerPayCommand.MESSAGE_SHOW_PAY_SUCCESS, selectedWorker.getName(), calculatedPay);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(workerPayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkerList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        WorkerPayCommand workerPayCommand \u003d new WorkerPayCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerPayCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker selectedWorker \u003d model.getFilteredWorkerList().get(TypicalIndexes.INDEX_FIRST_WORKER.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerPayCommand workerPayCommand \u003d new WorkerPayCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        float calculatedPay \u003d model.calculateWorkerPay(selectedWorker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String.format(WorkerPayCommand.MESSAGE_SHOW_PAY_SUCCESS, selectedWorker.getName(), calculatedPay);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(expectedModel, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertCommandSuccess(workerPayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.showWorkerAtIndex(model, TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcScheduler().getWorkerList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        WorkerPayCommand workerPayCommand \u003d new WorkerPayCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandTestUtil.assertCommandFailure(workerPayCommand, model, Messages.MESSAGE_INVALID_WORKER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerPayCommand workerPayFirstCommand \u003d new WorkerPayCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerPayCommand workerPaySecondCommand \u003d new WorkerPayCommand(TypicalIndexes.INDEX_SECOND_WORKER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertEquals(workerPayFirstCommand, workerPayFirstCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerPayCommand workerPayFirstCommandCopy \u003d new WorkerPayCommand(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertEquals(workerPayFirstCommandCopy, workerPayFirstCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertNotEquals(workerPayFirstCommand, 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertNotEquals(workerPayFirstCommand, null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertNotEquals(workerPaySecondCommand, workerPayFirstCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 74,
      "sigmund-c": 27
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/AssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_SHIFT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cWorkerRolePair\u003e validWorkerRole \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            PREAMBLE_WHITESPACE + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1 + \" \" + VALID_ROLE_CASHIER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseSuccess(parser, VALID_WORKER_INDEX_1 + \" \" + VALID_ROLE_CASHIER + VALID_SHIFT_INDEX_1,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // multiple shift indexes - last shift index accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            VALID_SHIFT_INDEX_2 + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1 + \" \" + VALID_ROLE_CASHIER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // add pair for mass ops"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validWorkerRole.add(new WorkerRolePair(TypicalIndexes.INDEX_SECOND_WORKER, Role.createRole(VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple worker-role indexes - mass ops"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1 + \" \" + VALID_ROLE_CASHIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_WORKER_INDEX_2 + \" \" + VALID_ROLE_CHEF,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validWorkerRole));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // missing shift prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_SHIFT + VALID_WORKER_INDEX_1 + VALID_ROLE_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing worker-role prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            VALID_SHIFT_INDEX_1 + \" \" + TypicalIndexes.INDEX_FIRST_WORKER + VALID_ROLE_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // both prefixes missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_SHIFT + \" \" + TypicalIndexes.INDEX_FIRST_WORKER + VALID_ROLE_CASHIER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // invalid shift index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1 + \" \" + VALID_ROLE_CHEF,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // invalid worker index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, VALID_SHIFT_INDEX_1 + INVALID_WORKER_INDEX + \" \" + VALID_ROLE_CHEF,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple indexes in worker-role prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1 + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + TypicalIndexes.INDEX_SECOND_WORKER + VALID_ROLE_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid worker-role regex"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1 + \" \" + INVALID_ROLE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1 + \" \" + INVALID_ROLE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 42,
      "sigmund-c": 60
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/CancelLeaveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_SHIFT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CancelLeaveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class CancelLeaveCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private CancelLeaveCommandParser parser \u003d new CancelLeaveCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_WORKER_INDEX_1 + VALID_SHIFT_INDEX_1,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new CancelLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, VALID_SHIFT_INDEX_1 + \" \" + TypicalIndexes.INDEX_FIRST_WORKER, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + \" \" + TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, VALID_SHIFT_INDEX_1 + INVALID_WORKER_INDEX, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertParseFailure(parser, INVALID_SHIFT_INDEX + INVALID_WORKER_INDEX, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 56
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/MassCancelLeaveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.DAY_DESC_MON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.DAY_DESC_TUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.TIME_DESC_AM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.TIME_DESC_PM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_DAY_MON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_DAY_TUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_TIME_AM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_TIME_PM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassCancelLeaveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class MassCancelLeaveCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private MassCancelLeaveCommandParser parser \u003d new MassCancelLeaveCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay mon \u003d new ShiftDay(VALID_DAY_MON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime am \u003d new ShiftTime(VALID_TIME_AM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay tue \u003d new ShiftDay(VALID_DAY_TUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime pm \u003d new ShiftTime(VALID_TIME_PM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_WORKER_INDEX_1 + DAY_DESC_MON"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // change order should result in a different MassTakeLeaveCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, TIME_DESC_PM + DAY_DESC_MON + DAY_DESC_TUE + VALID_WORKER_INDEX_1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM, new MassCancelLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, pm, tue, am));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_missingCompulsoryFields_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassCancelLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage); // missing index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage); // missing day"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage); // missing time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_extraCompulsoryFields_fail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassCancelLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + DAY_DESC_MON + TIME_DESC_PM, expectedMessage); // extra day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM + TIME_DESC_AM, expectedMessage); // extra time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_MON"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM + DAY_DESC_MON + TIME_DESC_AM, expectedMessage); // extra day/time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_invalidValue_fail() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassCancelLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, INVALID_WORKER_INDEX + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM, expectedMessage); // invalid worker"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + INVALID_DAY + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM, expectedMessage); // invalid day"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + INVALID_TIME + DAY_DESC_TUE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM, expectedMessage); //invalid time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 89
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/MassTakeLeaveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.DAY_DESC_MON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.DAY_DESC_TUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.TIME_DESC_AM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.TIME_DESC_PM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_DAY_MON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_DAY_TUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_TIME_AM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_TIME_PM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.MassTakeLeaveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class MassTakeLeaveCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private MassTakeLeaveCommandParser parser \u003d new MassTakeLeaveCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay mon \u003d new ShiftDay(VALID_DAY_MON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime am \u003d new ShiftTime(VALID_TIME_AM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftDay tue \u003d new ShiftDay(VALID_DAY_TUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ShiftTime pm \u003d new ShiftTime(VALID_TIME_PM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_WORKER_INDEX_1 + DAY_DESC_MON"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, am, tue, pm));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // change order should result in a different MassTakeLeaveCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, TIME_DESC_PM + DAY_DESC_MON + DAY_DESC_TUE + VALID_WORKER_INDEX_1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM, new MassTakeLeaveCommand(TypicalIndexes.INDEX_FIRST_WORKER, mon, pm, tue, am));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_missingCompulsoryFields_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassTakeLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage); // missing index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + TIME_DESC_AM + DAY_DESC_TUE + TIME_DESC_PM,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage); // missing day"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage); // missing time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_extraCompulsoryFields_fail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassTakeLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + DAY_DESC_MON + TIME_DESC_PM, expectedMessage); // extra day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM + TIME_DESC_AM, expectedMessage); // extra time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_MON"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM + DAY_DESC_MON + TIME_DESC_AM, expectedMessage); // extra day/time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parser_invalidValue_fail() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MassTakeLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, INVALID_WORKER_INDEX + DAY_DESC_MON + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM, expectedMessage); // invalid worker"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + INVALID_DAY + TIME_DESC_AM + DAY_DESC_TUE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_AM, expectedMessage); // invalid day"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_WORKER_INDEX_1 + DAY_DESC_MON + INVALID_TIME + DAY_DESC_TUE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + TIME_DESC_PM, expectedMessage); //invalid time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 89
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/McSchedulerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerDeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McSchedulerParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final McSchedulerParser parser \u003d new McSchedulerParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAddCommand command \u003d (WorkerAddCommand) parser.parseCommand(WorkerUtil.getAddCommand(worker));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new WorkerAddCommand(worker), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerDeleteCommand command \u003d (WorkerDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            WorkerDeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_WORKER.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder(worker).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand command \u003d (WorkerEditCommand) parser.parseCommand(WorkerEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + TypicalIndexes.INDEX_FIRST_WORKER.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + WorkerUtil.getEditWorkerDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new WorkerEditCommand(TypicalIndexes.INDEX_FIRST_WORKER, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertTrue(parser.parseCommand(WorkerListCommand.COMMAND_WORD) instanceof WorkerListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertTrue(parser.parseCommand(WorkerListCommand.COMMAND_WORD + \" 3\") instanceof WorkerListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 4,
      "sigmund-c": 39,
      "-": 60
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_WORKER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_WORKER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 26,
      "-": 170
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/ReassignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NEW_SHIFT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NEW_WORKER_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_OLD_SHIFT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_OLD_WORKER_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NEW_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NEW_SHIFT_INDEX_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NEW_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NEW_WORKER_INDEX_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_OLD_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_OLD_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ReassignCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ReassignCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ReassignCommandParser parser \u003d new ReassignCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, VALID_NEW_WORKER_INDEX_2 + VALID_OLD_WORKER_INDEX_1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + ROLE_DESC_CASHIER + VALID_NEW_SHIFT_INDEX_2,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple new shift indexes - last shift index accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + VALID_NEW_SHIFT_INDEX_1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple new worker indexes - last worker index accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2 + VALID_NEW_WORKER_INDEX_1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole(VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple roles - last role accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER + ROLE_DESC_CHEF,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ReassignCommand(TypicalIndexes.INDEX_FIRST_WORKER, TypicalIndexes.INDEX_SECOND_WORKER,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_SHIFT, Role.createRole(VALID_ROLE_CHEF)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReassignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing old worker prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing new worker prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //missing old shift prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + VALID_NEW_SHIFT_INDEX_2 + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //missing new shift prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + VALID_OLD_SHIFT_INDEX_1 + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_2,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_SHIFT + \" \" + TypicalIndexes.INDEX_FIRST_WORKER + VALID_ROLE_CASHIER,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReassignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid new shift index"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + INVALID_NEW_SHIFT_INDEX + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid old shift index"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_2"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + INVALID_OLD_SHIFT_INDEX + VALID_NEW_SHIFT_INDEX_1 + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid new worker index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + INVALID_NEW_WORKER_INDEX"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_1 + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid old worker index"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_OLD_WORKER_INDEX + VALID_NEW_WORKER_INDEX_1"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_1 + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_OLD_WORKER_INDEX_1 + VALID_NEW_WORKER_INDEX_1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_1 + INVALID_ROLE_DESC,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_OLD_WORKER_INDEX + VALID_NEW_WORKER_INDEX_1"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_OLD_SHIFT_INDEX_1 + VALID_NEW_SHIFT_INDEX_1 + INVALID_ROLE_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 137
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/TakeLeaveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_SHIFT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.TakeLeaveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class TakeLeaveCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private TakeLeaveCommandParser parser \u003d new TakeLeaveCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e validIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        validIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_WORKER_INDEX_1 + VALID_SHIFT_INDEX_1,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new TakeLeaveCommand(TypicalIndexes.INDEX_FIRST_SHIFT, validIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TakeLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_SHIFT_INDEX_1 + \" \" + TypicalIndexes.INDEX_FIRST_WORKER, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + \" \" + TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TakeLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_SHIFT_INDEX_1 + INVALID_WORKER_INDEX, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_SHIFT_INDEX + INVALID_WORKER_INDEX, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 58
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/UnassignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_SHIFT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_WORKER_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_SHIFT_INDEX_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_WORKER_INDEX_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.UnassignCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class UnassignCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private UnassignCommandParser parser \u003d new UnassignCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Set\u003cIndex\u003e workerIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_FIRST_WORKER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, VALID_WORKER_INDEX_1 + VALID_SHIFT_INDEX_1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple shift indexes - last shift index accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, VALID_SHIFT_INDEX_2 + VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_1,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // add index for mass ops"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex.add(TypicalIndexes.INDEX_SECOND_WORKER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple worker indexes - mass ops"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, VALID_SHIFT_INDEX_1 + VALID_WORKER_INDEX_2 + VALID_WORKER_INDEX_1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new UnassignCommand(TypicalIndexes.INDEX_FIRST_SHIFT, workerIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing shift prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing worker prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_SHIFT_INDEX_1 + \" \" + TypicalIndexes.INDEX_FIRST_WORKER, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, TypicalIndexes.INDEX_FIRST_SHIFT + \" \" + TypicalIndexes.INDEX_FIRST_WORKER,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid shift index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid worker index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_SHIFT_INDEX_1 + INVALID_WORKER_INDEX, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_SHIFT_INDEX + VALID_WORKER_INDEX_1, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 84
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerAddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(TypicalWorkers.BOB).withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple roles - all accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker expectedWorkerMultipleTags \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerBuilder(TypicalWorkers.BOB).withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, new WorkerAddCommand(expectedWorkerMultipleTags));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(TypicalWorkers.AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                NAME_DESC_AMY + PHONE_DESC_AMY + PAY_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing pay prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_PAY_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_PAY_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + VALID_ROLE_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid pay"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_PAY_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Pay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + PAY_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ROLE_DESC_CASHIER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    + ROLE_DESC_CASHIER + ROLE_DESC_CHEF,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 156
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerAvailableCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAvailableCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerAvailableCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAvailableCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private WorkerAvailableCommandParser parser \u003d new WorkerAvailableCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, ROLE_DESC_CASHIER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + ROLE_DESC_CASHIER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + ROLE_DESC_CASHIER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidRole_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Role role \u003d Role.createRole(VALID_ROLE_CHEF);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerAvailableCommand expectedCommand \u003d new WorkerAvailableCommand(targetIndex, role);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 66
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerEditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String ROLE_EMPTY \u003d \" \" + PREFIX_ROLE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private WorkerEditCommandParser parser \u003d new WorkerEditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", WorkerEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_PAY_DESC, Pay.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + PAY_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // while parsing {@code PREFIX_ROLE} alone will reset the tags of the {@code Worker} being edited,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + ROLE_DESC_CASHIER + ROLE_DESC_CHEF + ROLE_EMPTY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + ROLE_DESC_CASHIER + ROLE_EMPTY + ROLE_DESC_CHEF,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + ROLE_EMPTY + ROLE_DESC_CASHIER + ROLE_DESC_CHEF,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseFailure(parser,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_PAY_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ROLE_DESC_CASHIER + PAY_DESC_AMY"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + ADDRESS_DESC_AMY + NAME_DESC_AMY + ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withPay(VALID_PAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoles(VALID_ROLE_CHEF, VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + PAY_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPay(VALID_PAY_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_WORKER;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // pay"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAY_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPay(VALID_PAY_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // roles"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PAY_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + ROLE_DESC_CASHIER + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PAY_DESC_AMY + ROLE_DESC_CHEF"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + PAY_DESC_BOB + ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPay(VALID_PAY_BOB).withAddress(VALID_ADDRESS_BOB).withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAY_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB).withPay(VALID_PAY_BOB)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void parse_resetRoles_success() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_WORKER;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ROLE_EMPTY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withRoles().build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 218
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerPayCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerPayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * outside of the WorkerDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * same path through the WorkerDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class WorkerPayCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private WorkerPayCommandParser parser \u003d new WorkerPayCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void parse_validArgs_returnsWorkerPayCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new WorkerPayCommand(TypicalIndexes.INDEX_FIRST_WORKER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            WorkerPayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 26,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerWorkerAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import mcscheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerWorkerAddCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private WorkerAddCommandParser parser \u003d new WorkerAddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(BOB).withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + PAY_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_CASHIER, new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // multiple roles - all accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker expectedWorkerMultipleTags \u003d new WorkerBuilder(BOB).withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, new WorkerAddCommand(expectedWorkerMultipleTags));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Worker expectedWorker \u003d new WorkerBuilder(AMY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + PAY_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_CASHIER,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                new WorkerAddCommand(expectedWorker));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // missing pay prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_PAY_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_PAY_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + VALID_ROLE_CASHIER, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid pay"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_PAY_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Pay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + PAY_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + PAY_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + ROLE_DESC_CASHIER + ROLE_DESC_CHEF,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 24,
      "tnsyn": 18,
      "sigmund-c": 44,
      "-": 53
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerWorkerDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * outside of the WorkerDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": " * same path through the WorkerDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerWorkerDeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private WorkerDeleteCommandParser parser \u003d new WorkerDeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertParseSuccess(parser, \"1\", new WorkerDeleteCommand(TypicalIndexes.INDEX_FIRST_WORKER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            WorkerDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 5,
      "sigmund-c": 7,
      "-": 20
    }
  },
  {
    "path": "src/test/java/mcscheduler/logic/parser/WorkerWorkerEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PAY_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalIndexes.INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalIndexes.INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalIndexes.INDEX_THIRD_WORKER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.EditWorkerDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class WorkerWorkerEditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static final String ROLE_EMPTY \u003d \" \" + PREFIX_ROLE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, WorkerEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private WorkerEditCommandParser parser \u003d new WorkerEditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\", WorkerEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PAY_DESC, Pay.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + PAY_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // while parsing {@code PREFIX_ROLE} alone will reset the tags of the {@code Worker} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + ROLE_DESC_CASHIER + ROLE_DESC_CHEF + ROLE_EMPTY, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + ROLE_DESC_CASHIER + ROLE_EMPTY + ROLE_DESC_CHEF, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + ROLE_EMPTY + ROLE_DESC_CASHIER + ROLE_DESC_CHEF, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_PAY_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_WORKER;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ROLE_DESC_CASHIER + PAY_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + ROLE_DESC_CHEF;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withPay(VALID_PAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .withRoles(VALID_ROLE_CHEF, VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + PAY_DESC_AMY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .withPay(VALID_PAY_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_WORKER;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // pay"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAY_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPay(VALID_PAY_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // roles"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PAY_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + ROLE_DESC_CASHIER + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PAY_DESC_AMY + ROLE_DESC_CHEF"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + PAY_DESC_BOB + ROLE_DESC_CASHIER;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                .withPay(VALID_PAY_BOB).withAddress(VALID_ADDRESS_BOB).withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAY_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptorBuilder().withPhone(VALID_PHONE_BOB).withPay(VALID_PAY_BOB)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public void parse_resetRoles_success() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_WORKER;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ROLE_EMPTY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        EditWorkerDescriptor descriptor \u003d new EditWorkerDescriptorBuilder().withRoles().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        WorkerEditCommand expectedCommand \u003d new WorkerEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 33,
      "tnsyn": 22,
      "sigmund-c": 66,
      "-": 89
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/McSchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.McSchedulerBuilder.getTypicalMcScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.exceptions.DuplicateShiftException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.exceptions.DuplicateWorkerException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McSchedulerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final McScheduler mcScheduler \u003d new McScheduler();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Collections.emptyList(), mcScheduler.getWorkerList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(Collections.emptyList(), mcScheduler.getShiftList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcScheduler.resetData(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void resetData_withValidReadOnlyMcScheduler_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler newData \u003d getTypicalMcScheduler();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(newData, mcScheduler);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void resetData_withDuplicateWorkers_throwsDuplicateWorkerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Two workers with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withRoles(VALID_ROLE_CASHIER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e newWorkers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McSchedulerStub newData \u003d McSchedulerStub.createMcSchedulerStubWithWorkers(newWorkers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(DuplicateWorkerException.class, () -\u003e mcScheduler.resetData(newData));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcScheduler.hasWorker(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_workerNotInMcScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(mcScheduler.hasWorker(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_workerInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addWorker(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(mcScheduler.hasWorker(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_workerWithSameIdentityFieldsInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addWorker(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withRoles(VALID_ROLE_CASHIER)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(mcScheduler.hasWorker(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void getWorkerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mcScheduler.getWorkerList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void resetData_withDuplicateShifts_throwsDuplicateShiftException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d new ShiftBuilder(SHIFT_A).withRoleRequirements(VALID_ROLE_REQUIREMENT_CHEF)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e newShifts \u003d Arrays.asList(SHIFT_A, editedShift);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McSchedulerStub newData \u003d McSchedulerStub.createMcSchedulerStubWithShifts(newShifts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(DuplicateShiftException.class, () -\u003e mcScheduler.resetData(newData));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_nullShift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcScheduler.hasShift(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_shiftNotInMcScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(mcScheduler.hasShift(SHIFT_A));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_shiftInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addShift(SHIFT_A);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(mcScheduler.hasShift(SHIFT_A));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_workerWithSameIdentityFieldsInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addShift(SHIFT_A);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d new ShiftBuilder(SHIFT_A).withRoleRequirements(VALID_ROLE_REQUIREMENT_CHEF)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(mcScheduler.hasShift(editedShift));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void getShiftList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mcScheduler.getShiftList().remove(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addWorker(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addShift(SHIFT_A);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler noWorkerMcScheduler \u003d new McSchedulerBuilder().withShift(SHIFT_A).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler noShiftMcScheduler \u003d new McSchedulerBuilder().withWorker(ALICE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler emptyMcScheduler \u003d new McScheduler();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //same object returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(mcScheduler, mcScheduler);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //different class object returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(mcScheduler, 123);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //same content returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new McScheduler(mcScheduler), mcScheduler);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //same shifts different workers returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(noWorkerMcScheduler, mcScheduler);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //same workers different shifts returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(noShiftMcScheduler, mcScheduler);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //different workers different shifts returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(emptyMcScheduler, mcScheduler);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * A stub ReadOnlyMcScheduler whose workers list can violate interface constraints."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static class McSchedulerStub implements ReadOnlyMcScheduler {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private final ObservableList\u003cWorker\u003e workers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private final ObservableList\u003cShift\u003e shifts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private final ObservableList\u003cAssignment\u003e assignments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private final ObservableList\u003cRole\u003e validRoles \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        private McSchedulerStub(Collection\u003cWorker\u003e workers, Collection\u003cShift\u003e shifts,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                                Collection\u003cAssignment\u003e assignments, Collection\u003cRole\u003e validRoles) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.workers.setAll(workers);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.shifts.setAll(shifts);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.assignments.setAll(assignments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            this.validRoles.setAll(validRoles);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public static McSchedulerStub createMcSchedulerStubWithWorkers(Collection\u003cWorker\u003e workers) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new McSchedulerStub(workers, Collections.emptyList(), Collections.emptyList(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public static McSchedulerStub createMcSchedulerStubWithShifts(Collection\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new McSchedulerStub(Collections.emptyList(), shifts, Collections.emptyList(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cWorker\u003e getWorkerList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return workers;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cShift\u003e getShiftList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return shifts;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return assignments;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        public ObservableList\u003cRole\u003e getRoleList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return validRoles;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 214
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_SHIFTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.model.Model.PREDICATE_SHOW_ALL_WORKERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDayOrTimeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new McScheduler(), new McScheduler(modelManager.getMcScheduler()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userPrefs.setMcSchedulerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userPrefs.setMcSchedulerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcSchedulerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMcSchedulerFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcSchedulerFilePath_validPath_setsMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        modelManager.setMcSchedulerFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(path, modelManager.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasWorker(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_workerNotInMcScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(modelManager.hasWorker(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasWorker_workerInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        modelManager.addWorker(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(modelManager.hasWorker(ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void getFilteredWorkerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredWorkerList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void hasShift_nullShift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasShift(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_shiftNotInMcScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(modelManager.hasShift(SHIFT_A));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void hasShift_shiftInMcScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        modelManager.addShift(SHIFT_A);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(modelManager.hasShift(SHIFT_A));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void getFilteredShiftList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredShiftList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler mcScheduler \u003d new McSchedulerBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withWorker(ALICE).withWorker(BENSON)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            .withShift(SHIFT_A).withShift(SHIFT_B)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler differentMcScheduler \u003d new McScheduler();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        modelManager \u003d new ModelManager(mcScheduler, userPrefs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mcScheduler, userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(modelManagerCopy, modelManager);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different mcScheduler -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ModelManager(differentMcScheduler, userPrefs), modelManager);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different filteredWorkerList -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String[] workerKeywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        modelManager.updateFilteredWorkerList(new NameContainsKeywordsPredicate(Arrays.asList(workerKeywords)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ModelManager(mcScheduler, userPrefs), modelManager);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        modelManager.updateFilteredWorkerList(PREDICATE_SHOW_ALL_WORKERS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        //different filteredShiftList -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cString\u003e shiftKeywords \u003d Arrays.asList(SHIFT_A.getShiftTime().toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        modelManager.updateFilteredShiftList(new ShiftDayOrTimeContainsKeywordsPredicate(shiftKeywords));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ModelManager(mcScheduler, userPrefs), modelManager);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        //resets modelManager to initial state"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        modelManager.updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        differentUserPrefs.setMcSchedulerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ModelManager(mcScheduler, differentUserPrefs), modelManager);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 4,
      "sigmund-c": 50,
      "WangZijun97": 29,
      "-": 87
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setMcSchedulerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMcSchedulerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/assignment/AssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalAssignments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void isSameAssignment() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalAssignments.ASSIGNMENT_A.isSameAssignment(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalAssignments.ASSIGNMENT_A.isSameAssignment(TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same content -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different shift -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withShift("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalShifts.SHIFT_B).build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withWorker("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalWorkers.BOB).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different shift and worker -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalAssignments.ASSIGNMENT_A.isSameAssignment("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withShift(TypicalShifts.SHIFT_B).withWorker("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalWorkers.BOB).build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different role -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withRole("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    CommandTestUtil.VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalAssignments.ASSIGNMENT_A, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment assignmentACopy \u003d new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(assignmentACopy, TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalAssignments.ASSIGNMENT_A, 5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different shift -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withShift("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalShifts.SHIFT_B).build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withWorker("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    TypicalWorkers.BOB).build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different shift and worker -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalAssignments.ASSIGNMENT_A.isSameAssignment("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withShift(TypicalShifts.SHIFT_B).withWorker("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                TypicalWorkers.BOB).build()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different role -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .isSameAssignment(new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withRole("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    CommandTestUtil.VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    .build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 99
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/assignment/UniqueAssignmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalAssignments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class UniqueAssignmentListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final UniqueAssignmentList uniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(uniqueAssignmentList.contains(TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_assignmentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment editedAssignmentA \u003d new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withRole("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(editedAssignmentA));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_duplicateAssignmentWithSameRole_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.add("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_duplicateAssignmentWithDifferentRole_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment editedAssignmentA \u003d new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withRole("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.add(editedAssignmentA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_nullTargetAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                uniqueAssignmentList.setAssignment(null, TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_nullEditedAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignment("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A, null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_targetAssignmentNotInList_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(AssignmentNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.setAssignment(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_B));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_editedAssignmentIsSameAssignment_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.setAssignment(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_editedAssignmentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assignment editedAssignmentA \u003d new AssignmentBuilder(TypicalAssignments.ASSIGNMENT_A).withRole("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.setAssignment(TypicalAssignments.ASSIGNMENT_A, editedAssignmentA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueAssignmentList.add(editedAssignmentA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_editedAssignmentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.setAssignment(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignment_editedAssignmentHasNonUniqueIdentity_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateAssignmentException.class, () -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.setAssignment(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_B));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.remove(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.remove("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalAssignments.ASSIGNMENT_A));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_existingAssignment_removesAssignment() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.remove(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignments_nullUniqueAssignmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.setAssignments((UniqueAssignmentList) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignments_uniqueAssignmentList_replacesOwnListWithProvidedUniqueAssignmentList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.setAssignments(expectedUniqueAssignmentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.setAssignments((List\u003cAssignment\u003e) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d Collections.singletonList(TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueAssignmentList.setAssignments(assignmentList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueAssignmentList.add(TypicalAssignments.ASSIGNMENT_B);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setAssignments_listWithDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cAssignment\u003e listWithDuplicateAssignments \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            Arrays.asList(TypicalAssignments.ASSIGNMENT_A, TypicalAssignments.ASSIGNMENT_A);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateAssignmentException.class, () -\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.setAssignments(listWithDuplicateAssignments));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueAssignmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 187
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/assignment/WorkerRolePairTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerRolePairBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerRolePairTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WorkerRolePair(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WorkerRolePair("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            null, Role.createRole(CommandTestUtil.VALID_ROLE_CASHIER)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null role"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerRolePair(TypicalIndexes.INDEX_FIRST_WORKER, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void constructor_invalidWorkerRolePair_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String invalidInputString \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new WorkerRolePair(invalidInputString));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void isValidWorkerRolePair() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e WorkerRolePair.isValidWorkerRolePair(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // invalid workerRolePairs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(WorkerRolePair.isValidWorkerRolePair(\"\")); // empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(WorkerRolePair.isValidWorkerRolePair(\"8 \")); // no role"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(WorkerRolePair.isValidWorkerRolePair(\"cashier 9\")); // wrong order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(WorkerRolePair.isValidWorkerRolePair(\"0 cashier\")); // 0 index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // valid workerRolePairs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(WorkerRolePair.isValidWorkerRolePair(\"1 cashier\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(WorkerRolePair.isValidWorkerRolePair(\"1090 c\")); // big index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerRolePair pair \u003d new WorkerRolePairBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerRolePair samePair \u003d new WorkerRolePairBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerRolePair differentWorker \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerRolePairBuilder().withWorkerIndex(TypicalIndexes.INDEX_SECOND_WORKER).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        WorkerRolePair differentRole \u003d new WorkerRolePairBuilder().withRole(CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(pair, pair);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(pair, samePair);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(pair, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(pair, 5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(pair, differentWorker);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different role -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(pair, differentRole);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 84
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/RoleRequirementTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class RoleRequirementTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final RoleRequirement ROLE_REQUIREMENT \u003d new RoleRequirement(\"cleaner 3 0\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final RoleRequirement DIFFERENT_ROLE_ROLE_REQUIREMENT \u003d new RoleRequirement(\"cashier 3 0\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final RoleRequirement DIFFERENT_QUANTITY_REQUIRED_ROLE_REQUIREMENT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        new RoleRequirement(\"cleaner 7 0\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final RoleRequirement DIFFERENT_QUANTITY_FILLED_ROLE_REQUIREMENT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        new RoleRequirement(\"cleaner 3 1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final RoleRequirement DIFFERENT_ROLE_REQUIREMENT \u003d new RoleRequirement(\"cashier 7 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void stringConstructor_inputWithSpaces_correctlyParsed() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String testRole \u003d \"Deep Fryer Technician 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Role role \u003d Role.createRole(testRole);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String testQuantityRequired \u003d \"5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int quantityRequired \u003d Integer.parseInt(testQuantityRequired);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String testQuantityFilled \u003d \"0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int quantityFilled \u003d Integer.parseInt(testQuantityFilled);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new RoleRequirement(testRole + \" \" + testQuantityRequired + \" \" + testQuantityFilled),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            new RoleRequirement(role, quantityRequired, quantityFilled));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void isValidRoleRequirement() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e RoleRequirement.isValidRoleRequirement(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // invalid role requirement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"\")); // empty"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\" \")); // whitespace"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"      \")); // lots of whitespace"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"role\")); // just a role"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"123\")); // just a quantity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"role -4\")); // negative quantity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(RoleRequirement.isValidRoleRequirement(\"role@$##@ 1\")); // invalid role"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // valid role requirement"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(RoleRequirement.isValidRoleRequirement(\"cashier 1\")); // valid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        assertTrue(RoleRequirement.isValidRoleRequirement(\"     cashier   1\")); // valid (whitespace surrounding)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(RoleRequirement.isValidRoleRequirement(\"deep fryer 4 5\")); // with spaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void isSameRoleRequirement() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ROLE_REQUIREMENT.isSameRoleRequirement(ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertFalse(ROLE_REQUIREMENT.isSameRoleRequirement(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different role only -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertFalse(ROLE_REQUIREMENT.isSameRoleRequirement(DIFFERENT_ROLE_ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // different quantity required only -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertFalse(ROLE_REQUIREMENT.isSameRoleRequirement(DIFFERENT_QUANTITY_REQUIRED_ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        // different quantity filled only -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ROLE_REQUIREMENT.isSameRoleRequirement(DIFFERENT_QUANTITY_FILLED_ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // completely different -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertFalse(ROLE_REQUIREMENT.isSameRoleRequirement(DIFFERENT_ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertFalse(!ROLE_REQUIREMENT.equals(ROLE_REQUIREMENT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new RoleRequirement(ROLE_REQUIREMENT.getRole(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ROLE_REQUIREMENT.getQuantityRequired()), ROLE_REQUIREMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(ROLE_REQUIREMENT, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(ROLE_REQUIREMENT, 123);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different any field -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(DIFFERENT_ROLE_ROLE_REQUIREMENT, ROLE_REQUIREMENT); // different role only"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(DIFFERENT_QUANTITY_REQUIRED_ROLE_REQUIREMENT, ROLE_REQUIREMENT); // different quantity only"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(DIFFERENT_ROLE_REQUIREMENT, ROLE_REQUIREMENT); // completely different"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 31,
      "plosslaw": 3,
      "sigmund-c": 4,
      "WangZijun97": 61
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/ShiftDayOrTimeContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftDayOrTimeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"mon\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cString\u003e otherKeywords \u003d Arrays.asList(\"AM\", \"MON\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDayOrTimeContainsKeywordsPredicate predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDayOrTimeContainsKeywordsPredicate otherPredicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            otherKeywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(predicate, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(predicate, 123);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new ShiftDayOrTimeContainsKeywordsPredicate(keywords), predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(otherPredicate, predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void test_dayOrTimeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // One keyword day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDayOrTimeContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"MON\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"MON\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // One keyword time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"PM\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftTime(\"PM\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"MON\", \"TUE\", \"AM\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // match multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"MON\").withShiftTime(\"AM\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // match one keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"TUE\").withShiftTime(\"PM\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"AM\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"moN\", \"tUe\", \"Am\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"MON\").withShiftTime(\"AM\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"TUE\").withShiftTime(\"PM\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"AM\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void test_dayAndTimeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDayOrTimeContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(predicate.test(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // non-matching keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"MON\", \"TUE\", \"AM\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"PM\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // keywords match role requirement but not day nor time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        predicate \u003d new ShiftDayOrTimeContainsKeywordsPredicate(Arrays.asList(\"cashier\", \"1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            .withRoleRequirements(\"cashier 2 0\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            .withRoleRequirements(\"cashier 1 0\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            .withRoleRequirements(\"chef 1 0\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(predicate.test(new ShiftBuilder().withShiftDay(\"WED\").withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            .withRoleRequirements(\"cashier 3 0\", \"cleaner 1 0\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 11,
      "sigmund-c": 4,
      "WangZijun97": 79
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/ShiftDayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftDayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ShiftDay(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_invalidShiftDay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ShiftDay(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_validShiftDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new ShiftDay(\"wed\"), new ShiftDay(\"WED\")); // non-caps"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new ShiftDay(\"sUn\"), new ShiftDay(\"SUN\")); // mix of caps and non-caps"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ShiftDay.isValidDay(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(ShiftDay.isValidDay(\"NOM\")); //anything that isn\u0027t the seven days"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // valid day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(ShiftDay.isValidDay(\"MON\")); // caps day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ShiftDay.isValidDay(\"tue\")); // non-caps day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ShiftDay.isValidDay(\"sUn\")); // mix of caps and non-caps"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 4,
      "sigmund-c": 6,
      "WangZijun97": 34
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/ShiftTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ShiftTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift shift \u003d new ShiftBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e shift.getRoleRequirements().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void isSameShift() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(new ShiftBuilder().build().isSameShift(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalShifts.SHIFT_A.isSameShift(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same content"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalShifts.SHIFT_A.isSameShift(new ShiftBuilder(TypicalShifts.SHIFT_A).build()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different day"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalShifts.SHIFT_A.isSameShift(new ShiftBuilder(TypicalShifts.SHIFT_A).withShiftDay("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_DAY_TUE).build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalShifts.SHIFT_A.isSameShift(new ShiftBuilder(TypicalShifts.SHIFT_A).withShiftTime("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_TIME_PM).build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different day and time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalShifts.SHIFT_A.isSameShift("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftBuilder().withShiftDay(CommandTestUtil.VALID_DAY_TUE).withShiftTime("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_TIME_PM).build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same day and time but different role requirements"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalShifts.SHIFT_A.isSameShift("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new ShiftBuilder(TypicalShifts.SHIFT_A).withRoleRequirements(CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalShifts.SHIFT_A, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalShifts.SHIFT_A, 123);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(new ShiftBuilder(TypicalShifts.SHIFT_A).build(), TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // completely different"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalShifts.SHIFT_C, TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different day"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ShiftBuilder(TypicalShifts.SHIFT_A).withShiftDay(CommandTestUtil.VALID_DAY_TUE),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ShiftBuilder(TypicalShifts.SHIFT_A).withShiftTime(CommandTestUtil.VALID_TIME_PM),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different role requirements"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(new ShiftBuilder(TypicalShifts.SHIFT_A).withRoleRequirements("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF), TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 83
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/ShiftTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ShiftTime(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_invalidShiftTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ShiftTime(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_validShiftTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new ShiftTime(\"am\"), new ShiftTime(\"AM\")); // non-caps equal to caps"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new ShiftTime(\"pM\"), new ShiftTime(\"PM\")); // mixed cases no difference"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ShiftTime.isValidTime(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(ShiftTime.isValidTime(\"mp\")); // not AM, PM"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(ShiftTime.isValidTime(\"PM\")); // caps time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ShiftTime.isValidTime(\"am\")); // non-caps"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertTrue(ShiftTime.isValidTime(\"pM\")); // mix caps and non-caps"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 4,
      "sigmund-c": 6,
      "WangZijun97": 33
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/shift/UniqueShiftListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.exceptions.DuplicateShiftException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.exceptions.ShiftNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.ShiftBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalShifts;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class UniqueShiftListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // shift not in list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(uniqueShiftList.contains(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // shift in list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueShiftList.contains(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same identity shift in list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueShiftList.contains(new ShiftBuilder(TypicalShifts.SHIFT_A)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoleRequirements(CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_nullShift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.add(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_duplicateShift_throwsDuplicateShiftException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateShiftException.class, () -\u003e uniqueShiftList.add(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShift_nullShift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.setShift(null, TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.setShift(TypicalShifts.SHIFT_A, null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShift_targetShiftNotInList_throwsShiftNotFoundException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ShiftNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueShiftList.setShift(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_B));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShift_editedShiftHasDifferentNonUniqueIdentity_throwsDuplicateShiftException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateShiftException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueShiftList.setShift(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_B));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShift_editedShiftHasSameIdentity_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // exact same values"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.setShift(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList expected \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, expected);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different field values"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Shift editedShift \u003d new ShiftBuilder(TypicalShifts.SHIFT_A).withRoleRequirements("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ROLE_REQUIREMENT_CHEF).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.setShift(TypicalShifts.SHIFT_A, editedShift);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected.add(editedShift);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, expected);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShift_editedShiftHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.setShift(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList expected \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected.add(TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, expected);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.remove(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_shiftNotInList_throwsShiftNotFoundException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(ShiftNotFoundException.class, () -\u003e uniqueShiftList.remove(TypicalShifts.SHIFT_A));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_shiftInList_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.remove(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, new UniqueShiftList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShifts_nullUniqueShiftList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.setShifts((UniqueShiftList) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShifts_uniqueShiftList_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList anotherList \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        anotherList.add(TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.setShifts(anotherList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, anotherList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShifts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueShiftList.setShifts((List\u003cShift\u003e) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShifts_listWithDuplicates_throwsDuplicateShiftException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e listWithDuplicates \u003d Arrays.asList(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateShiftException.class, () -\u003e uniqueShiftList.setShifts(listWithDuplicates));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setShifts_list_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cShift\u003e list \u003d Arrays.asList(TypicalShifts.SHIFT_A, TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.setShifts(list);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList expected \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expected.add(TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expected, uniqueShiftList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void asUnmodifiableObservableList_modify_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e uniqueShiftList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueShiftList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(uniqueShiftList, uniqueShiftList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(uniqueShiftList, null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(uniqueShiftList, 123);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same content"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList sameList \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sameList.setShifts(uniqueShiftList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(sameList, uniqueShiftList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different content"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueShiftList differentList \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        differentList.add(TypicalShifts.SHIFT_B);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        differentList.add(TypicalShifts.SHIFT_A);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(differentList, uniqueShiftList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 184
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/tag/LeaveTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class LeaveTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new Leave(), new Leave());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Leave should be equal to a Role with tagName \u003d\u003d \"Leave\" - even though"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // allowing Role to initialize with"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(new RoleStub(\"Leave\"), new Leave());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Leave should not be equal to a Tag with tagName \u003d\u003d \"Leave\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(new Leave(), new Tag(\"Leave\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private class RoleStub extends Role {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public RoleStub(String s) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super(s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "sigmund-c": 1,
      "WangZijun97": 24
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/tag/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class RoleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Role.createRole(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Role.createRole(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void isValidRoleName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Role.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // invalid names"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(Role.isValidTagName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertFalse(Role.isValidTagName(\"sigh @__@\")); // symbols and letters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // valid names"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(Role.isValidTagName(\"cashier\")); // simple role name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(Role.isValidTagName(\"Burger Flipper\")); // with space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertTrue(Role.isValidTagName(\"Level 2 Chef\")); //with numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "WangZijun97": 31
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 57
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(firstPredicateCopy, firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNotEquals(secondPredicate, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(predicate.test(new WorkerBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withPay(\"13.50\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7,
      "sigmund-c": 11,
      "-": 59
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 36
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 36
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/UnavailabilityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "public class UnavailabilityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Unavailability(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public void constructor_invalidUnavailability_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        String invalidUnavailability \u003d \"buirb\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Unavailability(invalidUnavailability));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public void isValidUnavailability() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // null unavailability"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Unavailability.isValidUnavailability(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // invalid unavailability"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertFalse(Unavailability.isValidUnavailability(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertFalse(Unavailability.isValidUnavailability(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertFalse(Unavailability.isValidUnavailability(\"diub PM\")); // invalid day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertFalse(Unavailability.isValidUnavailability(\"MON dhiw\")); //invalid time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertFalse(Unavailability.isValidUnavailability(\"diub oub\")); // invalid day and time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        // valid unavailability"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertTrue(Unavailability.isValidUnavailability(\"MON AM\")); // regular day and AM"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        assertTrue(Unavailability.isValidUnavailability(\"MON PM\")); // regular day and PM"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tnsyn": 33,
      "sigmund-c": 6
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/UniqueWorkerListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.exceptions.DuplicateWorkerException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.exceptions.WorkerNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class UniqueWorkerListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final UniqueWorkerList uniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_workerNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(uniqueWorkerList.contains(TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_workerInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueWorkerList.contains(TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void contains_workerWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerBuilder(TypicalWorkers.ALICE).withAddress(CommandTestUtil.VALID_ADDRESS_BOB).withRoles("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_ROLE_CASHIER)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(uniqueWorkerList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void add_duplicateWorker_throwsDuplicateWorkerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateWorkerException.class, () -\u003e uniqueWorkerList.add(TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_nullTargetWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.setWorker(null, TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_nullEditedWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.setWorker(TypicalWorkers.ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_targetWorkerNotInList_throwsWorkerNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(WorkerNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueWorkerList.setWorker(TypicalWorkers.ALICE, TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_editedWorkerIsSameWorker_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.setWorker(TypicalWorkers.ALICE, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_editedWorkerHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new WorkerBuilder(TypicalWorkers.ALICE).withAddress(CommandTestUtil.VALID_ADDRESS_BOB).withRoles("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                CommandTestUtil.VALID_ROLE_CASHIER)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.setWorker(TypicalWorkers.ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueWorkerList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_editedWorkerHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.setWorker(TypicalWorkers.ALICE, TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueWorkerList.add(TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorker_editedWorkerHasNonUniqueIdentity_throwsDuplicateWorkerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(DuplicateWorkerException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            uniqueWorkerList.setWorker(TypicalWorkers.ALICE, TypicalWorkers.BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_nullWorker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_workerDoesNotExist_throwsWorkerNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(WorkerNotFoundException.class, () -\u003e uniqueWorkerList.remove(TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void remove_existingWorker_removesWorker() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.remove(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers_nullUniqueWorkerList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.setWorkers((UniqueWorkerList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers_uniqueWorkerList_replacesOwnListWithProvidedUniqueWorkerList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueWorkerList.add(TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.setWorkers(expectedUniqueWorkerList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueWorkerList.setWorkers((List\u003cWorker\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.add(TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e workerList \u003d Collections.singletonList(TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        uniqueWorkerList.setWorkers(workerList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        UniqueWorkerList expectedUniqueWorkerList \u003d new UniqueWorkerList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        expectedUniqueWorkerList.add(TypicalWorkers.BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(expectedUniqueWorkerList, uniqueWorkerList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void setWorkers_listWithDuplicateWorkers_throwsDuplicateWorkerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cWorker\u003e listWithDuplicateWorkers \u003d Arrays.asList(TypicalWorkers.ALICE, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .assertThrows(DuplicateWorkerException.class, () -\u003e uniqueWorkerList.setWorkers(listWithDuplicateWorkers));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            -\u003e uniqueWorkerList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 175
    }
  },
  {
    "path": "src/test/java/mcscheduler/model/worker/WorkerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.model.worker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.TypicalWorkers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.WorkerBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e worker.getRoles().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void isSameWorker() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalWorkers.ALICE.isSameWorker(TypicalWorkers.ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalWorkers.ALICE.isSameWorker(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalWorkers.ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(TypicalWorkers.ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withPay(CommandTestUtil.VALID_PAY_BOB).withAddress("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            CommandTestUtil.VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            .withRoles(CommandTestUtil.VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertTrue(TypicalWorkers.ALICE.isSameWorker(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker aliceCopy \u003d new WorkerBuilder(TypicalWorkers.ALICE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(aliceCopy, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(TypicalWorkers.ALICE, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalWorkers.ALICE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalWorkers.ALICE, 5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different worker -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(TypicalWorkers.BOB, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Worker editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAlice, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAlice, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different pay -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withPay(CommandTestUtil.VALID_PAY_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAlice, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withAddress(CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAlice, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // different roles -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        editedAlice \u003d new WorkerBuilder(TypicalWorkers.ALICE).withRoles(CommandTestUtil.VALID_ROLE_CHEF).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotEquals(editedAlice, TypicalWorkers.ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 86
    }
  },
  {
    "path": "src/test/java/mcscheduler/storage/JsonAdaptedWorkerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.storage.JsonAdaptedWorker.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class JsonAdaptedWorkerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String INVALID_PAY \u003d \"10.111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"#chef\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String VALID_PAY \u003d BENSON.getPay().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static final List\u003cJsonAdaptedRole\u003e VALID_ROLES \u003d BENSON.getRoles().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .map(JsonAdaptedRole::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private static final List\u003cJsonAdaptedUnavailability\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        VALID_UNAVAILABILITIES \u003d BENSON.getUnavailableTimings().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .map(JsonAdaptedUnavailability::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_validWorkerDetails_returnsWorker() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d new JsonAdaptedWorker(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(BENSON, worker.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonAdaptedWorker(INVALID_NAME, VALID_PHONE, VALID_PAY, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d new JsonAdaptedWorker(null, VALID_PHONE, VALID_PAY, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonAdaptedWorker(VALID_NAME, INVALID_PHONE, VALID_PAY, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d new JsonAdaptedWorker(VALID_NAME, null, VALID_PAY, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_invalidPay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonAdaptedWorker(VALID_NAME, VALID_PHONE, INVALID_PAY, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d Pay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_nullPay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d new JsonAdaptedWorker(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Pay.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonAdaptedWorker(VALID_NAME, VALID_PHONE, VALID_PAY, INVALID_ADDRESS, VALID_ROLES,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d new JsonAdaptedWorker(VALID_NAME, VALID_PHONE, VALID_PAY, null, VALID_ROLES,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, worker::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public void toModelType_invalidRoles_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        List\u003cJsonAdaptedRole\u003e invalidRoles \u003d new ArrayList\u003c\u003e(VALID_ROLES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        invalidRoles.add(new JsonAdaptedRole(INVALID_ROLE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonAdaptedWorker worker \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonAdaptedWorker(VALID_NAME, VALID_PHONE, VALID_PAY, VALID_ADDRESS, invalidRoles,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                VALID_UNAVAILABILITIES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, worker::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 9,
      "tnsyn": 10,
      "sigmund-c": 45,
      "-": 61
    }
  },
  {
    "path": "src/test/java/mcscheduler/storage/JsonMcSchedulerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.McSchedulerBuilder.getTypicalMcScheduler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class JsonMcSchedulerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMcSchedulerStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void readMcScheduler_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMcScheduler(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMcScheduler\u003e readMcScheduler(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new JsonMcSchedulerStorage(Paths.get(filePath)).readMcScheduler(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertFalse(readMcScheduler(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcScheduler(\"notJsonFormatMcScheduler.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void readMcScheduler_invalidWorkerMcScheduler_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcScheduler(\"invalidWorkerMcScheduler.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void readMcScheduler_invalidAndValidWorkerMcScheduler_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcScheduler(\"invalidAndValidWorkerMcScheduler.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void readAndSaveMcScheduler_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMcScheduler.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler original \u003d getTypicalMcScheduler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonMcSchedulerStorage jsonMcSchedulerStorage \u003d new JsonMcSchedulerStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        jsonMcSchedulerStorage.saveMcScheduler(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReadOnlyMcScheduler readBack \u003d jsonMcSchedulerStorage.readMcScheduler(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(original, new McScheduler(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        original.addWorker(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        original.removeWorker(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        jsonMcSchedulerStorage.saveMcScheduler(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        readBack \u003d jsonMcSchedulerStorage.readMcScheduler(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(original, new McScheduler(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        original.addWorker(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        jsonMcSchedulerStorage.saveMcScheduler(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        readBack \u003d jsonMcSchedulerStorage.readMcScheduler().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(original, new McScheduler(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler_nullMcScheduler_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcScheduler(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Saves {@code mcScheduler} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private void saveMcScheduler(ReadOnlyMcScheduler mcScheduler, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            new JsonMcSchedulerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .saveMcScheduler(mcScheduler, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void saveMcScheduler_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcScheduler(new McScheduler(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 110
    }
  },
  {
    "path": "src/test/java/mcscheduler/storage/JsonSerializableMcSchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.testutil.McSchedulerBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class JsonSerializableMcSchedulerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMcSchedulerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Path TYPICAL_WORKERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalWorkersMcScheduler.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Path INVALID_WORKER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWorkerMcScheduler.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final Path DUPLICATE_WORKER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateWorkerMcScheduler.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_typicalWorkersFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonSerializableMcScheduler dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_WORKERS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            JsonSerializableMcScheduler.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler mcSchedulerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler typicalWorkersMcScheduler \u003d McSchedulerBuilder.getTypicalMcScheduler();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(mcSchedulerFromFile, typicalWorkersMcScheduler);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_invalidWorkerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonSerializableMcScheduler dataFromFile \u003d JsonUtil.readJsonFile(INVALID_WORKER_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            JsonSerializableMcScheduler.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void toModelType_duplicateWorkers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonSerializableMcScheduler dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_WORKER_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            JsonSerializableMcScheduler.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMcScheduler.MESSAGE_DUPLICATE_WORKER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 47
    }
  },
  {
    "path": "src/test/java/mcscheduler/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        userPrefs.setMcSchedulerFilePath(Paths.get(\"mcscheduler.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/mcscheduler/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.McSchedulerBuilder.getTypicalMcScheduler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.ReadOnlyMcScheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        JsonMcSchedulerStorage mcSchedulerStorage \u003d new JsonMcSchedulerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        storageManager \u003d new StorageManager(mcSchedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void mcSchedulerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         * {@link JsonMcSchedulerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMcSchedulerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler original \u003d getTypicalMcScheduler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        storageManager.saveMcScheduler(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ReadOnlyMcScheduler retrieved \u003d storageManager.readMcScheduler().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertEquals(original, new McScheduler(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void getMcSchedulerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        assertNotNull(storageManager.getMcSchedulerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/AssignmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AssignmentBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Cashier\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Shift shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Worker worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an {@code AssignmentBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        shift \u003d new ShiftBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        worker \u003d new WorkerBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        role \u003d Role.createRole(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Initializes the AssignmentBuilder with the data of {@code assignmentToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentBuilder(Assignment assignmentToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        shift \u003d assignmentToCopy.getShift();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        worker \u003d assignmentToCopy.getWorker();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        role \u003d assignmentToCopy.getRole();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Sets the {@code Shift} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentBuilder withShift(Shift shift) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Sets the {@code Worker} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentBuilder withWorker(Worker worker) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.worker \u003d worker;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Sets the {@code Role} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AssignmentBuilder withRole(String role) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.role \u003d Role.createRole(role);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Assignment build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment(shift, worker, role);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a dummy assignment used by {@code UnassignCommandTest}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Assignment buildDummy() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Assignment(shift, worker);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 64,
      "sigmund-c": 5
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/EditShiftDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.ShiftEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " * A utility class to help with building EditShiftDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class EditShiftDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private ShiftEditCommand.EditShiftDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public EditShiftDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor \u003d new ShiftEditCommand.EditShiftDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public EditShiftDescriptorBuilder(ShiftEditCommand.EditShiftDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.descriptor \u003d new ShiftEditCommand.EditShiftDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Returns an {@code EditShiftDescriptor} with fields containing {@code shift}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public EditShiftDescriptorBuilder(Shift shift) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor \u003d new ShiftEditCommand.EditShiftDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setShiftDay(shift.getShiftDay());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setShiftTime(shift.getShiftTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setRoleRequirements(shift.getRoleRequirements());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Sets the {@code ShiftDay} of the {@code EditShiftDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditShiftDescriptorBuilder withShiftDay(String shiftDay) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setShiftDay(new ShiftDay(shiftDay));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Sets the {@code ShiftTime} of the {@code EditShiftDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditShiftDescriptorBuilder withShiftTime(String shiftTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setShiftTime(new ShiftTime(shiftTime));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * Parses the {@code roleRequirements} into a {@code Set\u003cRoleRequirement\u003e} and set it to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     * the {@code EditShiftDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditShiftDescriptorBuilder withRoleRequirements(String... roleRequirements) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Set\u003cRoleRequirement\u003e roleRequirementsSet \u003d Stream.of(roleRequirements)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            .map(RoleRequirement::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        descriptor.setRoleRequirements(roleRequirementsSet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public ShiftEditCommand.EditShiftDescriptor build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 62,
      "sigmund-c": 9
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/EditWorkerDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A utility class to help with building EditWorkerDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class EditWorkerDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private EditWorkerDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder(EditWorkerDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.descriptor \u003d new EditWorkerDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns an {@code EditWorkerDescriptor} with fields containing {@code worker}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder(Worker worker) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor \u003d new EditWorkerDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setName(worker.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setPhone(worker.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setPay(worker.getPay());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //descriptor.setEmail(worker.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setAddress(worker.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setRoles(worker.getRoles());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        descriptor.setUnavailableTimings(worker.getUnavailableTimings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Name} of the {@code EditWorkerDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditWorkerDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Pay} of the {@code EditWorkerDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withPay(String pay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setPay(new Pay(pay));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Address} of the {@code EditWorkerDescriptor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cRole\u003e} and set it to the {@code EditWorkerDescriptor}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptorBuilder withRoles(String... roles) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Set\u003cRole\u003e roleSet \u003d Stream.of(roles).map(Role::createRole).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.setRoles(roleSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cRole\u003e} and set it to the {@code EditWorkerDescriptor}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public EditWorkerDescriptorBuilder withUnavailableTimings(String... unavailableTimings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        Set\u003cUnavailability\u003e unavailabilitySet \u003d Stream.of(unavailableTimings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            .map(Unavailability::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        descriptor.setUnavailableTimings(unavailabilitySet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public EditWorkerDescriptor build() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 12,
      "sigmund-c": 99,
      "WangZijun97": 1
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/McSchedulerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_JANITOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.McScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * {@code McScheduler ab \u003d new McSchedulerBuilder().withWorker(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McSchedulerBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private McScheduler mcScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McSchedulerBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler \u003d new McScheduler();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McSchedulerBuilder(McScheduler mcScheduler) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.mcScheduler \u003d mcScheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns an {@code McScheduler} with all the typical workers, shifts and roles."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static McScheduler getTypicalMcScheduler() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler ab \u003d new McScheduler();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Worker worker : TypicalWorkers.getTypicalWorkers()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ab.addWorker(worker);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Shift shift : TypicalShifts.getTypicalShifts()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ab.addShift(shift);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_CHEF));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_JANITOR));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns an {@code McScheduler} with all the typical workers, shifts, assignments and roles."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static McScheduler getTypicalMcSchedulerWithAssignments() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McScheduler ab \u003d new McScheduler();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Worker worker : TypicalWorkers.getTypicalWorkers()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ab.addWorker(worker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Shift shift : TypicalShifts.getTypicalShifts()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ab.addShift(shift);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Assignment assignment : TypicalAssignments.getTypicalAssignments()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ab.addAssignment(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_CASHIER));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_CHEF));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ab.addRole(Role.createRole(VALID_ROLE_JANITOR));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Adds a new {@code Worker} to the {@code McScheduler} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McSchedulerBuilder withWorker(Worker worker) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addWorker(worker);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Adds a new {@code Shift} to the {@code McScheduler} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McSchedulerBuilder withShift(Shift shift) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        mcScheduler.addShift(shift);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McScheduler build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return mcScheduler;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 86
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/ShiftBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A utility class to help with building Shift objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"MON\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"AM\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftDay day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Set\u003cRoleRequirement\u003e roleRequirements;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a {@code ShiftBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d new ShiftDay(DEFAULT_DAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d new ShiftTime(DEFAULT_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        roleRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Initializes the ShiftBuilder with the data of {@code shiftToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftBuilder(Shift shiftToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d shiftToCopy.getShiftDay();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d shiftToCopy.getShiftTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        roleRequirements \u003d new HashSet\u003c\u003e(shiftToCopy.getRoleRequirements());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Sets the {@code ShiftDay} of the {@code Shift} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftBuilder withShiftDay(String day) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.day \u003d new ShiftDay(day);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Sets the {@code ShiftTime} of the {@code Shift} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftBuilder withShiftTime(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d new ShiftTime(time);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the {@code roleRequirements} into a {@code Set\u003cRoleRequirements\u003e} and set it to the {@code Shift} that"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftBuilder withRoleRequirements(String... roleRequirements) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.roleRequirements \u003d SampleDataUtil.getRoleRequirementSet(roleRequirements);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Shift build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Shift(day, time, roleRequirements);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "WangZijun97": 65
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the middle index of the worker in the {@code model}\u0027s worker list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWorkerList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the last index of the worker in the {@code model}\u0027s worker list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWorkerList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the worker in the {@code model}\u0027s worker list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static Worker getWorker(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return model.getFilteredWorkerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/TypicalAssignments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalShifts.SHIFT_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.TypicalWorkers.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * A utility class containing a list of {@code Assignment} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TypicalAssignments {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Assignment ASSIGNMENT_A \u003d new AssignmentBuilder().withWorker(ALICE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withShift(SHIFT_A)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRole(\"cashier\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Assignment ASSIGNMENT_B \u003d new AssignmentBuilder().withWorker(BOB)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withShift(SHIFT_B)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRole(\"chef\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final Assignment ASSIGNMENT_C \u003d new AssignmentBuilder().withWorker(CARL)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withShift(SHIFT_C)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRole(\"cashier\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static List\u003cAssignment\u003e getTypicalAssignments() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT_A, ASSIGNMENT_B, ASSIGNMENT_C));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 27,
      "sigmund-c": 8
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Index INDEX_FIRST_WORKER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Index INDEX_SECOND_WORKER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Index INDEX_THIRD_WORKER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public static final Index INDEX_FOURTH_WORKER \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final Index INDEX_FIRST_SHIFT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final Index INDEX_SECOND_SHIFT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final Index INDEX_THIRD_SHIFT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 4,
      "tnsyn": 1,
      "sigmund-c": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/TypicalShifts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.shift.Shift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A utility class containing a list of {@code Shift} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TypicalShifts {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Shift SHIFT_A \u003d new ShiftBuilder().withShiftDay(\"MON\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        .withShiftTime(\"AM\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRoleRequirements(\"cashier 1 1\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static final Shift SHIFT_B \u003d new ShiftBuilder().withShiftDay(\"FRI\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        .withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        .withRoleRequirements(\"cashier 2 0\", \"chef 3 1\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Shift SHIFT_C \u003d new ShiftBuilder().withShiftDay(\"TUE\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        .withShiftTime(\"AM\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRoleRequirements(\"cleaner 4 0\", \"cashier 3 1\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Shift SHIFT_D \u003d new ShiftBuilder().withShiftDay(\"TUE\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        .withShiftTime(\"PM\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        .withRoleRequirements(\"cashier 2 0\", \"cleaner 2 0\", \"chef 2 0\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static List\u003cShift\u003e getTypicalShifts() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIFT_A, SHIFT_B, SHIFT_C));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 2,
      "plosslaw": 1,
      "sigmund-c": 3,
      "WangZijun97": 25
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/TypicalWorkers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CASHIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.commands.CommandTestUtil.VALID_ROLE_CHEF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A utility class containing a list of {@code Worker} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class TypicalWorkers {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker ALICE \u003d new WorkerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withPay(\"9.75\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withRoles(\"cashier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withUnavailableTimings(\"TUE AM\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker BENSON \u003d new WorkerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        .withPay(\"10.20\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withRoles(\"chef\", \"cashier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        .withUnavailableTimings(\"MON AM\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker CARL \u003d new WorkerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"15.01\").withAddress(\"wall street\").withRoles(\"cashier\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker DANIEL \u003d new WorkerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"16\").withAddress(\"10th street\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker ELLE \u003d new WorkerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"5.99\").withAddress(\"michegan ave\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker FIONA \u003d new WorkerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"21.86\").withAddress(\"little tokyo\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker GEORGE \u003d new WorkerBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"24\").withAddress(\"4th street\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker HOON \u003d new WorkerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"11.11\").withAddress(\"little india\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker IDA \u003d new WorkerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(\"10.10\").withAddress(\"chicago ave\").withRoles(\"chef\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Manually added - Worker\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker AMY \u003d new WorkerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(VALID_PAY_AMY).withAddress(VALID_ADDRESS_AMY).withRoles(VALID_ROLE_CASHIER).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final Worker BOB \u003d new WorkerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        .withPay(VALID_PAY_BOB).withAddress(VALID_ADDRESS_BOB).withRoles(VALID_ROLE_CASHIER, VALID_ROLE_CHEF)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private TypicalWorkers() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static List\u003cWorker\u003e getTypicalWorkers() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "tnsyn": 11,
      "sigmund-c": 31,
      "-": 23
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/WorkerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Pay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A utility class to help with building Worker objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String DEFAULT_PAY \u003d \"12.20\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"cashier\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Pay pay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //private Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private Set\u003cRole\u003e roles;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    private Set\u003cUnavailability\u003e unavailableTimings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates a {@code WorkerBuilder} with the default details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        pay \u003d new Pay(DEFAULT_PAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        roles.add(Role.createRole(DEFAULT_ROLE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        unavailableTimings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Initializes the WorkerBuilder with the data of {@code workerToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder(Worker workerToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        name \u003d workerToCopy.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        phone \u003d workerToCopy.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        pay \u003d workerToCopy.getPay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        address \u003d workerToCopy.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e(workerToCopy.getRoles());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        unavailableTimings \u003d new HashSet\u003c\u003e(workerToCopy.getUnavailableTimings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Name} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cRole\u003e} and set it to the {@code Worker} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withRoles(String... roles) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.roles \u003d SampleDataUtil.getRoleSet(roles);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * Parses the {@code unavailableTimings} into a {@code Set\u003cUnavailability\u003e}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     * and set it to the {@code Worker} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    public WorkerBuilder withUnavailableTimings(String... unavailableTimings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        this.unavailableTimings \u003d SampleDataUtil.getUnavailabilitySet(unavailableTimings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Address} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Phone} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Pay} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withPay(String pay) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.pay \u003d new Pay(pay);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Email} of the {@code Worker} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Worker build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Worker(name, phone, pay, address, roles, unavailableTimings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "tnsyn": 15,
      "sigmund-c": 50,
      "WangZijun97": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/WorkerRolePairBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.assignment.WorkerRolePair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerRolePairBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Cashier\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Index workerIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Creates an {@code WorkerRolePairBuilder} with the default details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePairBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex \u003d TypicalIndexes.INDEX_FIRST_WORKER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        role \u003d Role.createRole(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Initializes the WorkerRolePairBuilder with the data of {@code pairToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePairBuilder(WorkerRolePair pairToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        workerIndex \u003d pairToCopy.getWorkerIndex();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        role \u003d pairToCopy.getRole();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code workerIndex} of the {@code WorkerRolePair} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePairBuilder withWorkerIndex(Index workerIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.workerIndex \u003d workerIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Sets the {@code Role} of the {@code WorkerRolePair} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePairBuilder withRole(String role) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.role \u003d Role.createRole(role);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public WorkerRolePair build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new WorkerRolePair(workerIndex, role);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 49
    }
  },
  {
    "path": "src/test/java/mcscheduler/testutil/WorkerUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.logic.parser.CliSyntax.PREFIX_UNAVAILABILITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.logic.commands.WorkerEditCommand.EditWorkerDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.tag.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Unavailability;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.model.worker.Worker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import static CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "//import Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * A utility class for Worker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class WorkerUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns an add command string for adding the {@code worker}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static String getAddCommand(Worker worker) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return WorkerAddCommand.COMMAND_WORD + \" \" + getWorkerDetails(worker);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the part of command string for the given {@code worker}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static String getWorkerDetails(Worker worker) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(PREFIX_NAME + worker.getName().fullName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(PREFIX_PHONE + worker.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(PREFIX_PAY + String.valueOf(worker.getPay().value) + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sb.append(PREFIX_ADDRESS + worker.getAddress().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        worker.getRoles().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            s -\u003e sb.append(PREFIX_ROLE + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        worker.getUnavailableTimings().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            s -\u003e sb.append(PREFIX_ROLE + s.getString() + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the part of command string for the given {@code EditWorkerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static String getEditWorkerDescriptorDetails(EditWorkerDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        descriptor.getPay().ifPresent(pay -\u003e sb.append(PREFIX_PAY).append(pay.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (descriptor.getRoles().isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            Set\u003cRole\u003e roles \u003d descriptor.getRoles().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (roles.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                sb.append(PREFIX_ROLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                roles.forEach(s -\u003e sb.append(PREFIX_ROLE).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        if (descriptor.getUnavailableTimings().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            Set\u003cUnavailability\u003e unavailabilities \u003d descriptor.getUnavailableTimings().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            if (unavailabilities.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                sb.append(PREFIX_UNAVAILABILITY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "                unavailabilities.forEach(s -\u003e sb.append(PREFIX_UNAVAILABILITY).append(s.getString()).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 17,
      "sigmund-c": 31,
      "-": 31
    }
  },
  {
    "path": "src/test/java/mcscheduler/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/mcscheduler/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package mcscheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static mcscheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import mcscheduler.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import mcscheduler.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 1,
      "-": 5
    }
  }
]
